/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 租户是否可用
     * @param input (optional) 
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput | null | undefined): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsTenantAvailable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsTenantAvailable(<any>response_);
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>_observableThrow(response_);
        }));
    }

    protected processIsTenantAvailable(response: HttpResponseBase): Observable<IsTenantAvailableOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IsTenantAvailableOutput>(<any>null);
    }

    /**
     * 解析租户Id
     * @param input (optional) 
     * @return Success
     */
    resolveTenantId(input: ResolveTenantIdInput | null | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResolveTenantId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResolveTenantId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResolveTenantId(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processResolveTenantId(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * 租户是否存在
     * @param input (optional) 
     * @return Success
     */
    isTenantNameExist(input: IsTenantAvailableInput | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantNameExist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsTenantNameExist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsTenantNameExist(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processIsTenantNameExist(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }

    /**
     * 注册
     * @param input (optional) 
     * @return Success
     */
    register(input: RegisterInput | null | undefined): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<RegisterOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterOutput>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterOutput>(<any>null);
    }

    /**
     * 发送密码重置邮箱
     * @param input (optional) 
     * @return Success
     */
    sendPasswordResetCode(input: SendPasswordResetCodeInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendPasswordResetCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendPasswordResetCode(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendPasswordResetCode(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 重置密码
     * @param input (optional) 
     * @return Success
     */
    resetPassword(input: ResetPasswordInput | null | undefined): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(<any>response_);
                } catch (e) {
                    return <Observable<ResetPasswordOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResetPasswordOutput>><any>_observableThrow(response_);
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<ResetPasswordOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResetPasswordOutput>(<any>null);
    }

    /**
     * 发送邮箱验证码
     * @param input (optional) 
     * @return Success
     */
    sendEmailVerificationCode(input: SendEmailVerificationCodeInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailVerificationCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendEmailVerificationCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendEmailVerificationCode(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendEmailVerificationCode(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 验证当前用户的验证码
     * @param input (optional) 
     * @return Success
     */
    checkEmailCodeByCurrentUser(input: CheckEmailCodeInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/CheckEmailCodeByCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckEmailCodeByCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckEmailCodeByCurrentUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCheckEmailCodeByCurrentUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 发送激活邮件
     * @param input (optional) 
     * @return Success
     */
    sendEmailActivationLink(input: SendEmailActivationLinkInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendEmailActivationLink(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendEmailActivationLink(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendEmailActivationLink(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 邮箱激活
     * @param input (optional) 
     * @return Success
     */
    activateEmail(input: ActivateEmailInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActivateEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActivateEmail(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processActivateEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 模拟(用户)登录
     * @param input (optional) 
     * @return Success
     */
    impersonate(input: ImpersonateInput | null | undefined): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImpersonate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImpersonate(<any>response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>_observableThrow(response_);
        }));
    }

    protected processImpersonate(response: HttpResponseBase): Observable<ImpersonateOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImpersonateOutput>(<any>null);
    }

    /**
     * 退出模拟登录
     * @return Success
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBackToImpersonator(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBackToImpersonator(<any>response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>_observableThrow(response_);
        }));
    }

    protected processBackToImpersonator(response: HttpResponseBase): Observable<ImpersonateOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImpersonateOutput>(<any>null);
    }

    /**
     * 关联账号
     * @param input (optional) 
     * @return Success
     */
    switchToLinkedAccount(input: SwitchToLinkedAccountInput | null | undefined): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSwitchToLinkedAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSwitchToLinkedAccount(<any>response_);
                } catch (e) {
                    return <Observable<SwitchToLinkedAccountOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwitchToLinkedAccountOutput>><any>_observableThrow(response_);
        }));
    }

    protected processSwitchToLinkedAccount(response: HttpResponseBase): Observable<SwitchToLinkedAccountOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwitchToLinkedAccountOutput>(<any>null);
    }
}

@Injectable()
export class AdvertAccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 同步广告账户
     * @return Success
     */
    syncAccounts(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertAccount/SyncAccounts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncAccounts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncAccounts(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSyncAccounts(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有广告账户
     * @param advertChannels (optional) 渠道
     * @param thirdpartyId (optional) 第三方Id
     * @param userName (optional) 用户名
     * @param displayName (optional) 显示名称
     * @param productId (optional) 产品Id
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getAccounts(advertChannels: AdvertChannels[] | null | undefined, thirdpartyId: string | null | undefined, userName: string | null | undefined, displayName: string | null | undefined, productId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfAdvertAccountListDto> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertAccount/GetAccounts?";
        if (advertChannels !== undefined)
            advertChannels && advertChannels.forEach(item => { url_ += "AdvertChannels=" + encodeURIComponent("" + item) + "&"; });
        if (thirdpartyId !== undefined)
            url_ += "ThirdpartyId=" + encodeURIComponent("" + thirdpartyId) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (displayName !== undefined)
            url_ += "DisplayName=" + encodeURIComponent("" + displayName) + "&"; 
        if (productId !== undefined)
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccounts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccounts(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfAdvertAccountListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfAdvertAccountListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAccounts(response: HttpResponseBase): Observable<PagedResultDtoOfAdvertAccountListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAdvertAccountListDto.fromJS(resultData200) : new PagedResultDtoOfAdvertAccountListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfAdvertAccountListDto>(<any>null);
    }

    /**
     * 获取所有可用广告账户(下拉框)
     * @return Success
     */
    getAccountSelectList(): Observable<SelectListItemDtoOfInt64[]> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertAccount/GetAccountSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccountSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccountSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAccountSelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt64[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt64.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt64[]>(<any>null);
    }

    /**
     * 获取广告账户详情
     * @param id (optional) 
     * @return Success
     */
    getAccountForEdit(id: number | null | undefined): Observable<GetAdvertAccountForEditOutput> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertAccount/GetAccountForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccountForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccountForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetAdvertAccountForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetAdvertAccountForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetAccountForEdit(response: HttpResponseBase): Observable<GetAdvertAccountForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetAdvertAccountForEditOutput.fromJS(resultData200) : new GetAdvertAccountForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetAdvertAccountForEditOutput>(<any>null);
    }

    /**
     * 创建或更新广告账户
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateAccount(input: CreateOrUpdateAdvertAccountInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertAccount/CreateOrUpdateAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateAccount(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateAccount(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除广告账户
     * @param ids (optional) id数组
     * @return Success
     */
    deleteAdvertAccount(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertAccount/DeleteAdvertAccount?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAdvertAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAdvertAccount(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAdvertAccount(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取 授权账户 AccessToken
     * @param accountId (optional) 账户Id
     * @param code (optional) 授权码
     * @return Success
     */
    getAccessToken(accountId: number | null | undefined, code: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertAccount/GetAccessToken?";
        if (accountId !== undefined)
            url_ += "AccountId=" + encodeURIComponent("" + accountId) + "&"; 
        if (code !== undefined)
            url_ += "Code=" + encodeURIComponent("" + code) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccessToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccessToken(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGetAccessToken(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class AdvertStatisticServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有广告数据统计
     * @param advertChannels (optional) 渠道
     * @param productIds (optional) 产品Id
     * @param accountIds (optional) 账户Id
     * @param statisticOn_FormDate (optional) 开始时间
     * @param statisticOn_ToDate (optional) 结束时间
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getDailyStatistics(advertChannels: AdvertChannels2[] | null | undefined, productIds: number[] | null | undefined, accountIds: number[] | null | undefined, statisticOn_FormDate: moment.Moment | null | undefined, statisticOn_ToDate: moment.Moment | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfDailyStatisticDto> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertStatistic/GetDailyStatistics?";
        if (advertChannels !== undefined)
            advertChannels && advertChannels.forEach(item => { url_ += "AdvertChannels=" + encodeURIComponent("" + item) + "&"; });
        if (productIds !== undefined)
            productIds && productIds.forEach(item => { url_ += "ProductIds=" + encodeURIComponent("" + item) + "&"; });
        if (accountIds !== undefined)
            accountIds && accountIds.forEach(item => { url_ += "AccountIds=" + encodeURIComponent("" + item) + "&"; });
        if (statisticOn_FormDate !== undefined)
            url_ += "StatisticOn.FormDate=" + encodeURIComponent(statisticOn_FormDate ? "" + statisticOn_FormDate.toJSON() : "") + "&"; 
        if (statisticOn_ToDate !== undefined)
            url_ += "StatisticOn.ToDate=" + encodeURIComponent(statisticOn_ToDate ? "" + statisticOn_ToDate.toJSON() : "") + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDailyStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDailyStatistics(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfDailyStatisticDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfDailyStatisticDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDailyStatistics(response: HttpResponseBase): Observable<PagedResultDtoOfDailyStatisticDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDailyStatisticDto.fromJS(resultData200) : new PagedResultDtoOfDailyStatisticDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfDailyStatisticDto>(<any>null);
    }

    /**
     * 获取广告数据统计详情
     * @param id (optional) 
     * @return Success
     */
    getDailyStatisticForEdit(id: number | null | undefined): Observable<DailyStatisticDto> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertStatistic/GetDailyStatisticForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDailyStatisticForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDailyStatisticForEdit(<any>response_);
                } catch (e) {
                    return <Observable<DailyStatisticDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DailyStatisticDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDailyStatisticForEdit(response: HttpResponseBase): Observable<DailyStatisticDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? DailyStatisticDto.fromJS(resultData200) : new DailyStatisticDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DailyStatisticDto>(<any>null);
    }

    /**
     * 创建或更新广告数据统计
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateDailyStatistic(input: DailyStatisticDto | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertStatistic/CreateOrUpdateDailyStatistic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateDailyStatistic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateDailyStatistic(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateDailyStatistic(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除广告数据统计
     * @param ids (optional) id数组
     * @return Success
     */
    deleteDailyStatistic(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertStatistic/DeleteDailyStatistic?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDailyStatistic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDailyStatistic(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDailyStatistic(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取广告数据统计条目
     * @param advertDailyStatisticId (optional) 广告统计Id
     * @return Success
     */
    getDailyStatisticItems(advertDailyStatisticId: number | null | undefined): Observable<DailyStatisticItemDto[]> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertStatistic/GetDailyStatisticItems?";
        if (advertDailyStatisticId !== undefined)
            url_ += "AdvertDailyStatisticId=" + encodeURIComponent("" + advertDailyStatisticId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDailyStatisticItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDailyStatisticItems(<any>response_);
                } catch (e) {
                    return <Observable<DailyStatisticItemDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<DailyStatisticItemDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDailyStatisticItems(response: HttpResponseBase): Observable<DailyStatisticItemDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DailyStatisticItemDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DailyStatisticItemDto[]>(<any>null);
    }

    /**
     * 创建或更新广告数据条目
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateDailyStatisticItem(input: DailyStatisticItemDto | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/advert/AdvertStatistic/CreateOrUpdateDailyStatisticItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateDailyStatisticItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateDailyStatisticItem(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateDailyStatisticItem(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }
}

@Injectable()
export class AlipayPaymentServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 支付宝支付异步通知
     * @return Success
     */
    notify(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/AlipayPayment/Notify";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processNotify(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNotify(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processNotify(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取审计日志
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param userName (optional) 
     * @param serviceName (optional) 
     * @param methodName (optional) 
     * @param browserInfo (optional) 
     * @param hasException (optional) 
     * @param minExecutionDuration (optional) 
     * @param maxExecutionDuration (optional) 
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getAuditLogs(startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined, userName: string | null | undefined, serviceName: string | null | undefined, methodName: string | null | undefined, browserInfo: string | null | undefined, hasException: boolean | null | undefined, minExecutionDuration: number | null | undefined, maxExecutionDuration: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuditLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuditLogs(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuditLogs(response: HttpResponseBase): Observable<PagedResultDtoOfAuditLogListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfAuditLogListDto>(<any>null);
    }

    /**
     * 导入审计日志到Excel
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param userName (optional) 
     * @param serviceName (optional) 
     * @param methodName (optional) 
     * @param browserInfo (optional) 
     * @param hasException (optional) 
     * @param minExecutionDuration (optional) 
     * @param maxExecutionDuration (optional) 
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getAuditLogsToExcel(startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined, userName: string | null | undefined, serviceName: string | null | undefined, methodName: string | null | undefined, browserInfo: string | null | undefined, hasException: boolean | null | undefined, minExecutionDuration: number | null | undefined, maxExecutionDuration: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuditLogsToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuditLogsToExcel(<any>response_);
                } catch (e) {
                    return <Observable<FileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuditLogsToExcel(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileDto>(<any>null);
    }

    /**
     * 获取实体记录对象类型
     * @return Success
     */
    getEntityHistoryObjectTypes(): Observable<NameValueDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityHistoryObjectTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEntityHistoryObjectTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEntityHistoryObjectTypes(<any>response_);
                } catch (e) {
                    return <Observable<NameValueDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<NameValueDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEntityHistoryObjectTypes(response: HttpResponseBase): Observable<NameValueDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NameValueDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NameValueDto[]>(<any>null);
    }

    /**
     * 获取实体变更
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param userName (optional) 
     * @param entityTypeFullName (optional) 
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getEntityChanges(startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined, userName: string | null | undefined, entityTypeFullName: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfEntityChangeListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChanges?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (entityTypeFullName !== undefined)
            url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEntityChanges(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEntityChanges(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfEntityChangeListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfEntityChangeListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetEntityChanges(response: HttpResponseBase): Observable<PagedResultDtoOfEntityChangeListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfEntityChangeListDto.fromJS(resultData200) : new PagedResultDtoOfEntityChangeListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfEntityChangeListDto>(<any>null);
    }

    /**
     * 导出实体变更到Excel
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param userName (optional) 
     * @param entityTypeFullName (optional) 
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getEntityChangesToExcel(startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined, userName: string | null | undefined, entityTypeFullName: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChangesToExcel?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (entityTypeFullName !== undefined)
            url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEntityChangesToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEntityChangesToExcel(<any>response_);
                } catch (e) {
                    return <Observable<FileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetEntityChangesToExcel(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileDto>(<any>null);
    }

    /**
     * 获取字段变更
     * @param entityChangeId (optional) 
     * @return Success
     */
    getEntityPropertyChanges(entityChangeId: number | null | undefined): Observable<EntityPropertyChangeDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityPropertyChanges?";
        if (entityChangeId !== undefined)
            url_ += "entityChangeId=" + encodeURIComponent("" + entityChangeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEntityPropertyChanges(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEntityPropertyChanges(<any>response_);
                } catch (e) {
                    return <Observable<EntityPropertyChangeDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityPropertyChangeDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEntityPropertyChanges(response: HttpResponseBase): Observable<EntityPropertyChangeDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EntityPropertyChangeDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityPropertyChangeDto[]>(<any>null);
    }
}

@Injectable()
export class CachingServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有缓存
     * @return Success
     */
    getAllCaches(): Observable<ListResultDtoOfCacheDto> {
        let url_ = this.baseUrl + "/api/services/app/Caching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCaches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCaches(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCacheDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfCacheDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllCaches(response: HttpResponseBase): Observable<ListResultDtoOfCacheDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCacheDto.fromJS(resultData200) : new ListResultDtoOfCacheDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfCacheDto>(<any>null);
    }

    /**
     * 清理缓存
     * @param input (optional) 缓存Id
     * @return Success
     */
    clearCache(input: EntityDtoOfString | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearCache(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearCache(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processClearCache(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 清理所有缓存
     * @return Success
     */
    clearAllCaches(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearAllCaches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearAllCaches(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processClearAllCaches(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class CategoryServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有分类
     * @param name (optional) 分类名称
     * @param parentCategoryId (optional) 父分类Id(0为所有)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getCategorys(name: string | null | undefined, parentCategoryId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfCategoryListDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Category/GetCategorys?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (parentCategoryId !== undefined)
            url_ += "ParentCategoryId=" + encodeURIComponent("" + parentCategoryId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategorys(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategorys(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCategoryListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfCategoryListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategorys(response: HttpResponseBase): Observable<PagedResultDtoOfCategoryListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCategoryListDto.fromJS(resultData200) : new PagedResultDtoOfCategoryListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfCategoryListDto>(<any>null);
    }

    /**
     * 获取所有可用分类(下拉框)
     * @return Success
     */
    getCategorySelectList(): Observable<SelectListItemDtoOfInt64[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Category/GetCategorySelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategorySelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategorySelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategorySelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt64[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt64.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt64[]>(<any>null);
    }

    /**
     * 获取分类详情
     * @param id (optional) 
     * @return Success
     */
    getCategoryForEdit(id: number | null | undefined): Observable<GetCategoryForEditOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Category/GetCategoryForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCategoryForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCategoryForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetCategoryForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCategoryForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetCategoryForEdit(response: HttpResponseBase): Observable<GetCategoryForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCategoryForEditOutput.fromJS(resultData200) : new GetCategoryForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCategoryForEditOutput>(<any>null);
    }

    /**
     * 创建或更新分类
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateCategory(input: CreateOrUpdateCategoryInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Category/CreateOrUpdateCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateCategory(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除分类
     * @param ids (optional) id数组
     * @return Success
     */
    deleteCategory(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Category/DeleteCategory?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCategory(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取版本信息（Combobox数据源）
     * @param onlyFreeItems (optional) 
     * @return Success
     */
    getEditionsForCombobox(onlyFreeItems: boolean | null | undefined): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox?";
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionsForCombobox(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionsForCombobox(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditionsForCombobox(response: HttpResponseBase): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfSubscribableEditionComboboxItemDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfSubscribableEditionComboboxItemDto>(<any>null);
    }

    /**
     * 查找用户
     * @param input (optional) 
     * @return Success
     */
    findUsers(input: FindUsersInput | null | undefined): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindUsers(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>_observableThrow(response_);
        }));
    }

    protected processFindUsers(response: HttpResponseBase): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * 获取默认版本名称
     * @return Success
     */
    getDefaultEditionName(): Observable<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDefaultEditionName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDefaultEditionName(<any>response_);
                } catch (e) {
                    return <Observable<GetDefaultEditionNameOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetDefaultEditionNameOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetDefaultEditionName(response: HttpResponseBase): Observable<GetDefaultEditionNameOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetDefaultEditionNameOutput>(<any>null);
    }

    /**
     * 根据枚举名称获取下拉框数据源(值类型)
     * @param enumName (optional) 枚举类型名称
     * @return Success
     */
    getEnumSelectItem(enumName: string | null | undefined): Observable<SelectListItemDtoOfInt32[]> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEnumSelectItem?";
        if (enumName !== undefined)
            url_ += "enumName=" + encodeURIComponent("" + enumName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEnumSelectItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEnumSelectItem(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEnumSelectItem(response: HttpResponseBase): Observable<SelectListItemDtoOfInt32[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt32.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt32[]>(<any>null);
    }

    /**
     * 根据枚举名称获取下拉框数据源(字符串)
     * @param enumName (optional) 枚举类型名称
     * @return Success
     */
    getEnumSelectItemString(enumName: string | null | undefined): Observable<SelectListItemDtoOfString[]> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEnumSelectItemString?";
        if (enumName !== undefined)
            url_ += "enumName=" + encodeURIComponent("" + enumName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEnumSelectItemString(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEnumSelectItemString(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfString[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfString[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEnumSelectItemString(response: HttpResponseBase): Observable<SelectListItemDtoOfString[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfString.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfString[]>(<any>null);
    }
}

@Injectable()
export class CustomerServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有客户
     * @param name (optional) 名称
     * @param phoneNumber (optional) 电话号码
     * @param consumesForm (optional) 消费金额（起始）
     * @param consumesTo (optional) 消费金额（结束）
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getCustomers(name: string | null | undefined, phoneNumber: string | null | undefined, consumesForm: number | null | undefined, consumesTo: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfCustomerListDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Customer/GetCustomers?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (consumesForm !== undefined)
            url_ += "ConsumesForm=" + encodeURIComponent("" + consumesForm) + "&"; 
        if (consumesTo !== undefined)
            url_ += "ConsumesTo=" + encodeURIComponent("" + consumesTo) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCustomers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomers(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCustomerListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfCustomerListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCustomers(response: HttpResponseBase): Observable<PagedResultDtoOfCustomerListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCustomerListDto.fromJS(resultData200) : new PagedResultDtoOfCustomerListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfCustomerListDto>(<any>null);
    }

    /**
     * 获取客户详情
     * @param id (optional) 
     * @return Success
     */
    getCustomerForEdit(id: number | null | undefined): Observable<CustomerDetailDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Customer/GetCustomerForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCustomerForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomerForEdit(<any>response_);
                } catch (e) {
                    return <Observable<CustomerDetailDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomerDetailDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCustomerForEdit(response: HttpResponseBase): Observable<CustomerDetailDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomerDetailDto.fromJS(resultData200) : new CustomerDetailDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomerDetailDto>(<any>null);
    }

    /**
     * 创建或更新客户
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateCustomer(input: CreateOrUpdateCustomerInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Customer/CreateOrUpdateCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateCustomer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateCustomer(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateCustomer(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除客户
     * @param ids (optional) id数组
     * @return Success
     */
    deleteCustomer(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Customer/DeleteCustomer?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCustomer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCustomer(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCustomer(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取全部版本信息
     * @return Success
     */
    getEditions(): Observable<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditions(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEditionListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfEditionListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditions(response: HttpResponseBase): Observable<ListResultDtoOfEditionListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfEditionListDto>(<any>null);
    }

    /**
     * 获取版本信息
     * @param id (optional) 
     * @return Success
     */
    getEditionForEdit(id: number | null | undefined): Observable<GetEditionEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetEditionEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetEditionEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditionForEdit(response: HttpResponseBase): Observable<GetEditionEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionEditOutput.fromJS(resultData200) : new GetEditionEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetEditionEditOutput>(<any>null);
    }

    /**
     * 创建/更新版本
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateEdition(input: CreateOrUpdateEditionDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateEdition(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateEdition(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除版本
     * @param id (optional) 
     * @return Success
     */
    deleteEdition(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEdition(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEdition(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取版本信息(Combobox)
     * @param selectedEditionId (optional) 选择版本Id
     * @param addAllItem (optional) 添加所有
     * @param onlyFreeItems (optional) 只获取免费版
     * @return Success
     */
    getEditionComboboxItems(selectedEditionId: number | null | undefined, addAllItem: boolean | null | undefined, onlyFreeItems: boolean | null | undefined): Observable<SubscribableEditionComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId !== undefined)
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&"; 
        if (addAllItem !== undefined)
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&"; 
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionComboboxItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionComboboxItems(<any>response_);
                } catch (e) {
                    return <Observable<SubscribableEditionComboboxItemDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SubscribableEditionComboboxItemDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditionComboboxItems(response: HttpResponseBase): Observable<SubscribableEditionComboboxItemDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SubscribableEditionComboboxItemDto[]>(<any>null);
    }

    /**
     * 获取版本信息(下拉框选项)
     * @return Success
     */
    getEditionSelectList(): Observable<SelectListItemOfInt32[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemOfInt32[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemOfInt32[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditionSelectList(response: HttpResponseBase): Observable<SelectListItemOfInt32[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemOfInt32.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemOfInt32[]>(<any>null);
    }
}

@Injectable()
export class EditionSubscriptionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取版本展示信息
     * @return Success
     */
    getEditionsForSelect(): Observable<EditionsSelectOutput> {
        let url_ = this.baseUrl + "/api/services/app/EditionSubscription/GetEditionsForSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionsForSelect(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionsForSelect(<any>response_);
                } catch (e) {
                    return <Observable<EditionsSelectOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<EditionsSelectOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditionsForSelect(response: HttpResponseBase): Observable<EditionsSelectOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionsSelectOutput.fromJS(resultData200) : new EditionsSelectOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EditionsSelectOutput>(<any>null);
    }

    /**
     * 获取当前账号版本信息
     * @return Success
     */
    getCurrentEdition(): Observable<EditionsViewOutput> {
        let url_ = this.baseUrl + "/api/services/app/EditionSubscription/GetCurrentEdition";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentEdition(<any>response_);
                } catch (e) {
                    return <Observable<EditionsViewOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<EditionsViewOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentEdition(response: HttpResponseBase): Observable<EditionsViewOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionsViewOutput.fromJS(resultData200) : new EditionsViewOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EditionsViewOutput>(<any>null);
    }

    /**
     * 获取版本详情
     * @param editionId (optional) 
     * @return Success
     */
    getEdition(editionId: number | null | undefined): Observable<EditionSelectDto> {
        let url_ = this.baseUrl + "/api/services/app/EditionSubscription/GetEdition?";
        if (editionId !== undefined)
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEdition(<any>response_);
                } catch (e) {
                    return <Observable<EditionSelectDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<EditionSelectDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetEdition(response: HttpResponseBase): Observable<EditionSelectDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionSelectDto.fromJS(resultData200) : new EditionSelectDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EditionSelectDto>(<any>null);
    }

    /**
     * 版本试用
     * @param editionId (optional) 
     * @return Success
     */
    trialEdition(editionId: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EditionSubscription/TrialEdition?";
        if (editionId !== undefined)
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTrialEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTrialEdition(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTrialEdition(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 升级到等价版本(价格相等)
     * @param upgradeEditionId (optional) 
     * @return Success
     */
    upgradeTenantToEquivalentEdition(upgradeEditionId: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/EditionSubscription/UpgradeTenantToEquivalentEdition?";
        if (upgradeEditionId !== undefined)
            url_ += "upgradeEditionId=" + encodeURIComponent("" + upgradeEditionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpgradeTenantToEquivalentEdition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpgradeTenantToEquivalentEdition(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpgradeTenantToEquivalentEdition(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class FileServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 下载临时文件
     * @param fileName 文件名称
     * @param fileType 文件类型
     * @param fileToken 文件 Token
     * @return Success
     */
    downloadTempFile(fileName: string, fileType: string, fileToken: string): Observable<void> {
        let url_ = this.baseUrl + "/api/File/DownloadTempFile?";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined and cannot be null.");
        else
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&"; 
        if (fileType === undefined || fileType === null)
            throw new Error("The parameter 'fileType' must be defined and cannot be null.");
        else
            url_ += "FileType=" + encodeURIComponent("" + fileType) + "&"; 
        if (fileToken === undefined || fileToken === null)
            throw new Error("The parameter 'fileToken' must be defined and cannot be null.");
        else
            url_ += "FileToken=" + encodeURIComponent("" + fileToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadTempFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadTempFile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDownloadTempFile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 云存储回调
     * @param input (optional) 
     * @return Success
     */
    uploadPictureCallBack(input: UploadPictureInput | null | undefined): Observable<UploadPictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/File/UploadPictureCallBack";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadPictureCallBack(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadPictureCallBack(<any>response_);
                } catch (e) {
                    return <Observable<UploadPictureOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<UploadPictureOutput>><any>_observableThrow(response_);
        }));
    }

    protected processUploadPictureCallBack(response: HttpResponseBase): Observable<UploadPictureOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadPictureOutput.fromJS(resultData200) : new UploadPictureOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UploadPictureOutput>(<any>null);
    }
}

@Injectable()
export class HostDashboardServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param incomeStatisticsDateInterval (optional) 
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @return Success
     */
    getDashboardStatisticsData(incomeStatisticsDateInterval: IncomeStatisticsDateInterval | null | undefined, startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined): Observable<HostDashboardData> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetDashboardStatisticsData?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDashboardStatisticsData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDashboardStatisticsData(<any>response_);
                } catch (e) {
                    return <Observable<HostDashboardData>><any>_observableThrow(e);
                }
            } else
                return <Observable<HostDashboardData>><any>_observableThrow(response_);
        }));
    }

    protected processGetDashboardStatisticsData(response: HttpResponseBase): Observable<HostDashboardData> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostDashboardData.fromJS(resultData200) : new HostDashboardData();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HostDashboardData>(<any>null);
    }

    /**
     * @param incomeStatisticsDateInterval (optional) 
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @return Success
     */
    getIncomeStatistics(incomeStatisticsDateInterval: IncomeStatisticsDateInterval2 | null | undefined, startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined): Observable<GetIncomeStatisticsDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetIncomeStatistics?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIncomeStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIncomeStatistics(<any>response_);
                } catch (e) {
                    return <Observable<GetIncomeStatisticsDataOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetIncomeStatisticsDataOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetIncomeStatistics(response: HttpResponseBase): Observable<GetIncomeStatisticsDataOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetIncomeStatisticsDataOutput.fromJS(resultData200) : new GetIncomeStatisticsDataOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetIncomeStatisticsDataOutput>(<any>null);
    }

    /**
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @return Success
     */
    getEditionTenantStatistics(startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined): Observable<GetEditionTenantStatisticsOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetEditionTenantStatistics?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEditionTenantStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEditionTenantStatistics(<any>response_);
                } catch (e) {
                    return <Observable<GetEditionTenantStatisticsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetEditionTenantStatisticsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetEditionTenantStatistics(response: HttpResponseBase): Observable<GetEditionTenantStatisticsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionTenantStatisticsOutput.fromJS(resultData200) : new GetEditionTenantStatisticsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetEditionTenantStatisticsOutput>(<any>null);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取宿主所有设置
     * @return Success
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllSettings(<any>response_);
                } catch (e) {
                    return <Observable<HostSettingsEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<HostSettingsEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllSettings(response: HttpResponseBase): Observable<HostSettingsEditDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HostSettingsEditDto>(<any>null);
    }

    /**
     * 更新宿主所有设置
     * @param input (optional) 
     * @return Success
     */
    updateAllSettings(input: HostSettingsEditDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAllSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAllSettings(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAllSettings(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 更新第三方登陆配置(单条记录)
     * @param input (optional) 
     * @return Success
     */
    updateExternalAuthentication(input: ExternalAuthenticationProviderEditDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateExternalAuthentication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateExternalAuthentication(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateExternalAuthentication(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateExternalAuthentication(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取验证码设置
     * @return Success
     */
    getVerificationCodeSettingsAsync(): Observable<VerificationCodeSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetVerificationCodeSettingsAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVerificationCodeSettingsAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVerificationCodeSettingsAsync(<any>response_);
                } catch (e) {
                    return <Observable<VerificationCodeSettingsEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<VerificationCodeSettingsEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVerificationCodeSettingsAsync(response: HttpResponseBase): Observable<VerificationCodeSettingsEditDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VerificationCodeSettingsEditDto.fromJS(resultData200) : new VerificationCodeSettingsEditDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VerificationCodeSettingsEditDto>(<any>null);
    }

    /**
     * 发送测试邮件
     * @param input (optional) 
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendTestEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendTestEmail(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendTestEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class IncomeStatisticsServiceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取收入数据分析
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param dateInterval (optional) 
     * @return Success
     */
    getIncomeStatisticsData(startDate: moment.Moment | null | undefined, endDate: moment.Moment | null | undefined, dateInterval: DateInterval | null | undefined): Observable<IncomeStastistic[]> {
        let url_ = this.baseUrl + "/api/services/app/IncomeStatisticsService/GetIncomeStatisticsData?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&"; 
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&"; 
        if (dateInterval !== undefined)
            url_ += "dateInterval=" + encodeURIComponent("" + dateInterval) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetIncomeStatisticsData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetIncomeStatisticsData(<any>response_);
                } catch (e) {
                    return <Observable<IncomeStastistic[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<IncomeStastistic[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetIncomeStatisticsData(response: HttpResponseBase): Observable<IncomeStastistic[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IncomeStastistic.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IncomeStastistic[]>(<any>null);
    }
}

@Injectable()
export class InstallServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    setup(input: InstallDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Install/Setup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetup(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAppSettingsJson(): Observable<AppSettingsJsonDto> {
        let url_ = this.baseUrl + "/api/services/app/Install/GetAppSettingsJson";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppSettingsJson(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppSettingsJson(<any>response_);
                } catch (e) {
                    return <Observable<AppSettingsJsonDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AppSettingsJsonDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAppSettingsJson(response: HttpResponseBase): Observable<AppSettingsJsonDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppSettingsJsonDto.fromJS(resultData200) : new AppSettingsJsonDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AppSettingsJsonDto>(<any>null);
    }

    /**
     * @return Success
     */
    checkDatabase(): Observable<CheckDatabaseOutput> {
        let url_ = this.baseUrl + "/api/services/app/Install/CheckDatabase";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckDatabase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckDatabase(<any>response_);
                } catch (e) {
                    return <Observable<CheckDatabaseOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<CheckDatabaseOutput>><any>_observableThrow(response_);
        }));
    }

    protected processCheckDatabase(response: HttpResponseBase): Observable<CheckDatabaseOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CheckDatabaseOutput.fromJS(resultData200) : new CheckDatabaseOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CheckDatabaseOutput>(<any>null);
    }
}

@Injectable()
export class InvoiceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getInvoiceInfo(id: number | null | undefined): Observable<InvoiceDto> {
        let url_ = this.baseUrl + "/api/services/app/Invoice/GetInvoiceInfo?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInvoiceInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInvoiceInfo(<any>response_);
                } catch (e) {
                    return <Observable<InvoiceDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<InvoiceDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetInvoiceInfo(response: HttpResponseBase): Observable<InvoiceDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? InvoiceDto.fromJS(resultData200) : new InvoiceDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InvoiceDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createInvoice(input: CreateInvoiceDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Invoice/CreateInvoice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateInvoice(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateInvoice(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取语言
     * @return Success
     */
    getLanguages(): Observable<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLanguages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLanguages(<any>response_);
                } catch (e) {
                    return <Observable<GetLanguagesOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetLanguagesOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetLanguages(response: HttpResponseBase): Observable<GetLanguagesOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetLanguagesOutput>(<any>null);
    }

    /**
     * 获取语言详情
     * @param id (optional) 
     * @return Success
     */
    getLanguageForEdit(id: number | null | undefined): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLanguageForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLanguageForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetLanguageForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetLanguageForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetLanguageForEdit(response: HttpResponseBase): Observable<GetLanguageForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetLanguageForEditOutput>(<any>null);
    }

    /**
     * 创建/编辑语言
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateLanguage(input: CreateOrUpdateLanguageInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateLanguage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除语言
     * @param id (optional) 
     * @return Success
     */
    deleteLanguage(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteLanguage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 设置默认语言
     * @param input (optional) 
     * @return Success
     */
    setDefaultLanguage(input: SetDefaultLanguageInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetDefaultLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetDefaultLanguage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetDefaultLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取语言翻译
     * @param maxResultCount (optional) 结果数量(页大小)
     * @param skipCount (optional) 跳过数量(页大小 * 页码)
     * @param sorting (optional) 排序字段(eg : Key Desc )
     * @param sourceName 源名称(eg:Vapps,AbpZero,Abp)
     * @param baseLanguageName (optional) 基础语言名称
     * @param targetLanguageName 目标语言名称
     * @param targetValueFilter (optional) 目标值过滤
     * @param filterText (optional) 过滤文本
     * @return Success
     */
    getLanguageTexts(maxResultCount: number | null | undefined, skipCount: number | null | undefined, sorting: string | null | undefined, sourceName: string, baseLanguageName: string | null | undefined, targetLanguageName: string, targetValueFilter: string | null | undefined, filterText: string | null | undefined): Observable<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (sourceName === undefined || sourceName === null)
            throw new Error("The parameter 'sourceName' must be defined and cannot be null.");
        else
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&"; 
        if (targetLanguageName === undefined || targetLanguageName === null)
            throw new Error("The parameter 'targetLanguageName' must be defined and cannot be null.");
        else
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&"; 
        if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&"; 
        if (filterText !== undefined)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLanguageTexts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLanguageTexts(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLanguageTextListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfLanguageTextListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetLanguageTexts(response: HttpResponseBase): Observable<PagedResultDtoOfLanguageTextListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfLanguageTextListDto>(<any>null);
    }

    /**
     * 更新语言翻译
     * @param input (optional) 
     * @return Success
     */
    updateLanguageText(input: UpdateLanguageTextInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateLanguageText(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateLanguageText(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateLanguageText(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class LogisticsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有物流（平台）
     * @param name (optional) 快递名称
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getLogisticses(name: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfLogisticsListDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/GetLogisticses?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLogisticses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLogisticses(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLogisticsListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfLogisticsListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetLogisticses(response: HttpResponseBase): Observable<PagedResultDtoOfLogisticsListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLogisticsListDto.fromJS(resultData200) : new PagedResultDtoOfLogisticsListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfLogisticsListDto>(<any>null);
    }

    /**
     * 获取所有可用物流(下拉框)
     * @return Success
     */
    getLogisticsSelectList(): Observable<SelectListItemDtoOfInt64[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/GetLogisticsSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLogisticsSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLogisticsSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetLogisticsSelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt64[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt64.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt64[]>(<any>null);
    }

    /**
     * 获取物流详情
     * @param id (optional) 
     * @return Success
     */
    getLogisticsForEdit(id: number | null | undefined): Observable<GetLogisticsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/GetLogisticsForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLogisticsForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLogisticsForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetLogisticsForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetLogisticsForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetLogisticsForEdit(response: HttpResponseBase): Observable<GetLogisticsForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLogisticsForEditOutput.fromJS(resultData200) : new GetLogisticsForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetLogisticsForEditOutput>(<any>null);
    }

    /**
     * 添加或更新物流
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateLogistics(input: CreateOrUpdateLogisticsInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/CreateOrUpdateLogistics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateLogistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateLogistics(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateLogistics(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除物流
     * @param ids (optional) id数组
     * @return Success
     */
    deleteLogistics(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/DeleteLogistics?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteLogistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteLogistics(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteLogistics(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有租户自选物流
     * @param name (optional) 快递名称
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getTenantLogisticses(name: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfTenantLogisticsDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/GetTenantLogisticses?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantLogisticses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantLogisticses(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantLogisticsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantLogisticsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenantLogisticses(response: HttpResponseBase): Observable<PagedResultDtoOfTenantLogisticsDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantLogisticsDto.fromJS(resultData200) : new PagedResultDtoOfTenantLogisticsDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTenantLogisticsDto>(<any>null);
    }

    /**
     * 获取所有可用自选物流(下拉框)
     * @return Success
     */
    getTenantLogisticsSelectList(): Observable<SelectListItemDtoOfInt64[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/GetTenantLogisticsSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantLogisticsSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantLogisticsSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenantLogisticsSelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt64[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt64.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt64[]>(<any>null);
    }

    /**
     * 获取物流详情
     * @param id (optional) 
     * @return Success
     */
    getTenantLogisticsForEdit(id: number | null | undefined): Observable<GetLogisticsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/GetTenantLogisticsForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantLogisticsForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantLogisticsForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetLogisticsForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetLogisticsForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenantLogisticsForEdit(response: HttpResponseBase): Observable<GetLogisticsForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLogisticsForEditOutput.fromJS(resultData200) : new GetLogisticsForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetLogisticsForEditOutput>(<any>null);
    }

    /**
     * 添加或更新自选物流
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateTenantLogistics(input: CreateOrUpdateTenantLogisticsInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/CreateOrUpdateTenantLogistics";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateTenantLogistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateTenantLogistics(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateTenantLogistics(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除租户物流
     * @param ids (optional) id数组
     * @return Success
     */
    deleteTenantLogistics(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Logistics/DeleteTenantLogistics?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTenantLogistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTenantLogistics(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTenantLogistics(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class MessageServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取可用指令
     * @return Success
     */
    getAvailableTokenList(): Observable<TokensListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Message/GetAvailableTokenList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvailableTokenList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvailableTokenList(<any>response_);
                } catch (e) {
                    return <Observable<TokensListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TokensListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAvailableTokenList(response: HttpResponseBase): Observable<TokensListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TokensListDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TokensListDto[]>(<any>null);
    }
}

@Injectable()
export class NotificationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取用户通知
     * @param state (optional) 通知状态（可空）
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getUserNotifications(state: State | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetUserNotifications?";
        if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserNotifications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserNotifications(<any>response_);
                } catch (e) {
                    return <Observable<GetNotificationsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetNotificationsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserNotifications(response: HttpResponseBase): Observable<GetNotificationsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetNotificationsOutput>(<any>null);
    }

    /**
     * 设置所有通知为已读
     * @return Success
     */
    setAllNotificationsAsRead(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetAllNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAllNotificationsAsRead(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAllNotificationsAsRead(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetAllNotificationsAsRead(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 设置通知为已读
     * @param input (optional) 
     * @return Success
     */
    setNotificationAsRead(input: EntityDtoOfGuid | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetNotificationAsRead(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetNotificationAsRead(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSetNotificationAsRead(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取通知设置
     * @return Success
     */
    getNotificationSettings(): Observable<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNotificationSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNotificationSettings(<any>response_);
                } catch (e) {
                    return <Observable<GetNotificationSettingsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetNotificationSettingsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetNotificationSettings(response: HttpResponseBase): Observable<GetNotificationSettingsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetNotificationSettingsOutput>(<any>null);
    }

    /**
     * 更新通知设置
     * @param input (optional) 
     * @return Success
     */
    updateNotificationSettings(input: UpdateNotificationSettingsInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateNotificationSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateNotificationSettings(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateNotificationSettings(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除通知
     * @param id (optional) 
     * @return Success
     */
    deleteNotification(id: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/DeleteNotification?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteNotification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteNotification(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteNotification(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class OrderServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有订单
     * @param logisticsNumber (optional) 快递单号
     * @param receivedOn_FormDate (optional) 开始时间
     * @param receivedOn_ToDate (optional) 结束时间
     * @param orderStatuses (optional) 订单状态
     * @param paymentStatuses (optional) 付款状态
     * @param shippingStatuses (optional) 发货状态
     * @param storeIds (optional) 店铺Id
     * @param productIds (optional) 商品Id
     * @param orderNumber (optional) 订单号
     * @param createdOn_FormDate (optional) 开始时间
     * @param createdOn_ToDate (optional) 结束时间
     * @param shippingName (optional) 收件人姓名
     * @param phoneNumber (optional) 电话号码
     * @param provinceId (optional) 省份Id
     * @param cityId (optional) 城市Id
     * @param districtId (optional) 区域Id
     * @param orderTypes (optional) 订单类型
     * @param orderSources (optional) 订单来源
     * @param adminComment (optional) 管理员备注
     * @param customerComment (optional) 用户备注
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOrders(logisticsNumber: string | null | undefined, receivedOn_FormDate: moment.Moment | null | undefined, receivedOn_ToDate: moment.Moment | null | undefined, orderStatuses: OrderStatuses[] | null | undefined, paymentStatuses: PaymentStatuses[] | null | undefined, shippingStatuses: ShippingStatuses[] | null | undefined, storeIds: number[] | null | undefined, productIds: number[] | null | undefined, orderNumber: string | null | undefined, createdOn_FormDate: moment.Moment | null | undefined, createdOn_ToDate: moment.Moment | null | undefined, shippingName: string | null | undefined, phoneNumber: string | null | undefined, provinceId: number | null | undefined, cityId: number | null | undefined, districtId: number | null | undefined, orderTypes: OrderTypes[] | null | undefined, orderSources: OrderSources[] | null | undefined, adminComment: string | null | undefined, customerComment: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfOrderListDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/GetOrders?";
        if (logisticsNumber !== undefined)
            url_ += "LogisticsNumber=" + encodeURIComponent("" + logisticsNumber) + "&"; 
        if (receivedOn_FormDate !== undefined)
            url_ += "ReceivedOn.FormDate=" + encodeURIComponent(receivedOn_FormDate ? "" + receivedOn_FormDate.toJSON() : "") + "&"; 
        if (receivedOn_ToDate !== undefined)
            url_ += "ReceivedOn.ToDate=" + encodeURIComponent(receivedOn_ToDate ? "" + receivedOn_ToDate.toJSON() : "") + "&"; 
        if (orderStatuses !== undefined)
            orderStatuses && orderStatuses.forEach(item => { url_ += "OrderStatuses=" + encodeURIComponent("" + item) + "&"; });
        if (paymentStatuses !== undefined)
            paymentStatuses && paymentStatuses.forEach(item => { url_ += "PaymentStatuses=" + encodeURIComponent("" + item) + "&"; });
        if (shippingStatuses !== undefined)
            shippingStatuses && shippingStatuses.forEach(item => { url_ += "ShippingStatuses=" + encodeURIComponent("" + item) + "&"; });
        if (storeIds !== undefined)
            storeIds && storeIds.forEach(item => { url_ += "StoreIds=" + encodeURIComponent("" + item) + "&"; });
        if (productIds !== undefined)
            productIds && productIds.forEach(item => { url_ += "ProductIds=" + encodeURIComponent("" + item) + "&"; });
        if (orderNumber !== undefined)
            url_ += "OrderNumber=" + encodeURIComponent("" + orderNumber) + "&"; 
        if (createdOn_FormDate !== undefined)
            url_ += "CreatedOn.FormDate=" + encodeURIComponent(createdOn_FormDate ? "" + createdOn_FormDate.toJSON() : "") + "&"; 
        if (createdOn_ToDate !== undefined)
            url_ += "CreatedOn.ToDate=" + encodeURIComponent(createdOn_ToDate ? "" + createdOn_ToDate.toJSON() : "") + "&"; 
        if (shippingName !== undefined)
            url_ += "ShippingName=" + encodeURIComponent("" + shippingName) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (provinceId !== undefined)
            url_ += "ProvinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        if (cityId !== undefined)
            url_ += "CityId=" + encodeURIComponent("" + cityId) + "&"; 
        if (districtId !== undefined)
            url_ += "DistrictId=" + encodeURIComponent("" + districtId) + "&"; 
        if (orderTypes !== undefined)
            orderTypes && orderTypes.forEach(item => { url_ += "OrderTypes=" + encodeURIComponent("" + item) + "&"; });
        if (orderSources !== undefined)
            orderSources && orderSources.forEach(item => { url_ += "OrderSources=" + encodeURIComponent("" + item) + "&"; });
        if (adminComment !== undefined)
            url_ += "AdminComment=" + encodeURIComponent("" + adminComment) + "&"; 
        if (customerComment !== undefined)
            url_ += "CustomerComment=" + encodeURIComponent("" + customerComment) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrders(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrderListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrderListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrders(response: HttpResponseBase): Observable<PagedResultDtoOfOrderListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrderListDto.fromJS(resultData200) : new PagedResultDtoOfOrderListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfOrderListDto>(<any>null);
    }

    /**
     * 获取订单详情
     * @param orderId (optional) 
     * @return Success
     */
    getOrderDetail(orderId: number | null | undefined): Observable<OrderDetailDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/GetOrderDetail?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrderDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderDetail(<any>response_);
                } catch (e) {
                    return <Observable<OrderDetailDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDetailDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrderDetail(response: HttpResponseBase): Observable<OrderDetailDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrderDetailDto.fromJS(resultData200) : new OrderDetailDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDetailDto>(<any>null);
    }

    /**
     * 获取订单详情(包含商品属性)
     * @param orderId (optional) 
     * @return Success
     */
    getOrderForEdit(orderId: number | null | undefined): Observable<GetOrderForEditOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/GetOrderForEdit?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrderForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetOrderForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetOrderForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrderForEdit(response: HttpResponseBase): Observable<GetOrderForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetOrderForEditOutput.fromJS(resultData200) : new GetOrderForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetOrderForEditOutput>(<any>null);
    }

    /**
     * 创建或更新订单
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateOrder(input: CreateOrUpdateOrderInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/CreateOrUpdateOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateOrder(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateOrder(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 修改订单状态
     * @param input (optional) 
     * @return Success
     */
    changeOrderStatus(input: ChangeOrderStatusInputOfOrderStatus | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/ChangeOrderStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeOrderStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeOrderStatus(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeOrderStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 修改物流状态
     * @param input (optional) 
     * @return Success
     */
    changeShippingStatus(input: ChangeOrderStatusInputOfShippingStatus | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/ChangeShippingStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeShippingStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeShippingStatus(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeShippingStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 修改付款状态
     * @param input (optional) 
     * @return Success
     */
    changePaymentStatus(input: ChangeOrderStatusInputOfPaymentStatus | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/ChangePaymentStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePaymentStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePaymentStatus(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangePaymentStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除订单
     * @param ids (optional) id数组
     * @return Success
     */
    deleteOrder(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/DeleteOrder?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteOrder(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteOrder(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 导出待发货订单到Excel
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @param storeIds (optional) 店铺Id
     * @param productIds (optional) 商品Id
     * @param orderNumber (optional) 订单号
     * @param createdOn_FormDate (optional) 开始时间
     * @param createdOn_ToDate (optional) 结束时间
     * @param shippingName (optional) 收件人姓名
     * @param phoneNumber (optional) 电话号码
     * @param provinceId (optional) 省份Id
     * @param cityId (optional) 城市Id
     * @param districtId (optional) 区域Id
     * @param orderTypes (optional) 订单类型
     * @param orderSources (optional) 订单来源
     * @param adminComment (optional) 管理员备注
     * @param customerComment (optional) 用户备注
     * @return Success
     */
    getWaitShippingToExcel(sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined, storeIds: number[] | null | undefined, productIds: number[] | null | undefined, orderNumber: string | null | undefined, createdOn_FormDate: moment.Moment | null | undefined, createdOn_ToDate: moment.Moment | null | undefined, shippingName: string | null | undefined, phoneNumber: string | null | undefined, provinceId: number | null | undefined, cityId: number | null | undefined, districtId: number | null | undefined, orderTypes: OrderTypes2[] | null | undefined, orderSources: OrderSources2[] | null | undefined, adminComment: string | null | undefined, customerComment: string | null | undefined): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/GetWaitShippingToExcel?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (storeIds !== undefined)
            storeIds && storeIds.forEach(item => { url_ += "StoreIds=" + encodeURIComponent("" + item) + "&"; });
        if (productIds !== undefined)
            productIds && productIds.forEach(item => { url_ += "ProductIds=" + encodeURIComponent("" + item) + "&"; });
        if (orderNumber !== undefined)
            url_ += "OrderNumber=" + encodeURIComponent("" + orderNumber) + "&"; 
        if (createdOn_FormDate !== undefined)
            url_ += "CreatedOn.FormDate=" + encodeURIComponent(createdOn_FormDate ? "" + createdOn_FormDate.toJSON() : "") + "&"; 
        if (createdOn_ToDate !== undefined)
            url_ += "CreatedOn.ToDate=" + encodeURIComponent(createdOn_ToDate ? "" + createdOn_ToDate.toJSON() : "") + "&"; 
        if (shippingName !== undefined)
            url_ += "ShippingName=" + encodeURIComponent("" + shippingName) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (provinceId !== undefined)
            url_ += "ProvinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        if (cityId !== undefined)
            url_ += "CityId=" + encodeURIComponent("" + cityId) + "&"; 
        if (districtId !== undefined)
            url_ += "DistrictId=" + encodeURIComponent("" + districtId) + "&"; 
        if (orderTypes !== undefined)
            orderTypes && orderTypes.forEach(item => { url_ += "OrderTypes=" + encodeURIComponent("" + item) + "&"; });
        if (orderSources !== undefined)
            orderSources && orderSources.forEach(item => { url_ += "OrderSources=" + encodeURIComponent("" + item) + "&"; });
        if (adminComment !== undefined)
            url_ += "AdminComment=" + encodeURIComponent("" + adminComment) + "&"; 
        if (customerComment !== undefined)
            url_ += "CustomerComment=" + encodeURIComponent("" + customerComment) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWaitShippingToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWaitShippingToExcel(<any>response_);
                } catch (e) {
                    return <Observable<FileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetWaitShippingToExcel(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileDto>(<any>null);
    }

    /**
     * 导出选中订单到Excel
     * @param orderIds (optional) 订单Id
     * @return Success
     */
    getSelectedToExcel(orderIds: number[] | null | undefined): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Order/GetSelectedToExcel?";
        if (orderIds !== undefined)
            orderIds && orderIds.forEach(item => { url_ += "OrderIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSelectedToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSelectedToExcel(<any>response_);
                } catch (e) {
                    return <Observable<FileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSelectedToExcel(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileDto>(<any>null);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取组织单位
     * @return Success
     */
    getOrganizationUnits(): Observable<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrganizationUnits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrganizationUnits(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfOrganizationUnitDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfOrganizationUnitDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrganizationUnits(response: HttpResponseBase): Observable<ListResultDtoOfOrganizationUnitDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrganizationUnitDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfOrganizationUnitDto>(<any>null);
    }

    /**
     * 获取组织单位成员
     * @param id (optional) 组织单位Id(大于0)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getOrganizationUnitUsers(id: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrganizationUnitUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrganizationUnitUsers(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrganizationUnitUsers(response: HttpResponseBase): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfOrganizationUnitUserListDto>(<any>null);
    }

    /**
     * 创建组织单位
     * @param input (optional) 
     * @return Success
     */
    createOrganizationUnit(input: CreateOrganizationUnitInput | null | undefined): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrganizationUnit(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrganizationUnit(response: HttpResponseBase): Observable<OrganizationUnitDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationUnitDto>(<any>null);
    }

    /**
     * 更新组织单位
     * @param input (optional) 
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput | null | undefined): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOrganizationUnit(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateOrganizationUnit(response: HttpResponseBase): Observable<OrganizationUnitDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationUnitDto>(<any>null);
    }

    /**
     * 移动组织单位
     * @param input (optional) 
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput | null | undefined): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMoveOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMoveOrganizationUnit(<any>response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>_observableThrow(response_);
        }));
    }

    protected processMoveOrganizationUnit(response: HttpResponseBase): Observable<OrganizationUnitDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrganizationUnitDto>(<any>null);
    }

    /**
     * 删除组织单位
     * @param id (optional) 
     * @return Success
     */
    deleteOrganizationUnit(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteOrganizationUnit(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteOrganizationUnit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 添加成员到组织单位
     * @param input (optional) 
     * @return Success
     */
    addUsersToOrganizationUnit(input: UsersToOrganizationUnitInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddUsersToOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddUsersToOrganizationUnit(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddUsersToOrganizationUnit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 把成员从组织单位移除
     * @param userId (optional) 用户 Id(大于0)
     * @param organizationUnitId (optional) 组织单位 Id(大于0)
     * @return Success
     */
    removeUserFromOrganizationUnit(userId: number | null | undefined, organizationUnitId: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (organizationUnitId !== undefined)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveUserFromOrganizationUnit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveUserFromOrganizationUnit(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveUserFromOrganizationUnit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 查找组织机构用户
     * @param input (optional) 
     * @return Success
     */
    findUsers(input: FindOrganizationUnitUsersInput | null | undefined): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindUsers(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>_observableThrow(response_);
        }));
    }

    protected processFindUsers(response: HttpResponseBase): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfNameValueDto>(<any>null);
    }
}

@Injectable()
export class PaymentServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取支付信息
     * @param upgradeEditionId (optional) 升级版本Id
     * @return Success
     */
    getPaymentInfo(upgradeEditionId: number | null | undefined): Observable<PaymentInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentInfo?";
        if (upgradeEditionId !== undefined)
            url_ += "UpgradeEditionId=" + encodeURIComponent("" + upgradeEditionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPaymentInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPaymentInfo(<any>response_);
                } catch (e) {
                    return <Observable<PaymentInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaymentInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPaymentInfo(response: HttpResponseBase): Observable<PaymentInfoDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentInfoDto.fromJS(resultData200) : new PaymentInfoDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaymentInfoDto>(<any>null);
    }

    /**
     * 创建支付
     * @param input (optional) 
     * @return Success
     */
    createPayment(input: CreatePaymentDto | null | undefined): Observable<CreatePaymentResponse> {
        let url_ = this.baseUrl + "/api/services/app/Payment/CreatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePayment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePayment(<any>response_);
                } catch (e) {
                    return <Observable<CreatePaymentResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreatePaymentResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreatePayment(response: HttpResponseBase): Observable<CreatePaymentResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreatePaymentResponse.fromJS(resultData200) : new CreatePaymentResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreatePaymentResponse>(<any>null);
    }

    /**
     * 取消支付
     * @param input (optional) 
     * @return Success
     */
    cancelPayment(input: CancelPaymentDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Payment/CancelPayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelPayment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelPayment(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCancelPayment(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 创建Js支付
     * @param input (optional) 
     * @return Success
     */
    createJsPayment(input: CreatePaymentDto | null | undefined): Observable<CreatePaymentResponse> {
        let url_ = this.baseUrl + "/api/services/app/Payment/CreateJsPayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateJsPayment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateJsPayment(<any>response_);
                } catch (e) {
                    return <Observable<CreatePaymentResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreatePaymentResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateJsPayment(response: HttpResponseBase): Observable<CreatePaymentResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreatePaymentResponse.fromJS(resultData200) : new CreatePaymentResponse();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreatePaymentResponse>(<any>null);
    }

    /**
     * 查询支付状态
     * @param paymentId (optional) 
     * @return Success
     */
    queryPayment(paymentId: string | null | undefined): Observable<QueryPaymentOutput> {
        let url_ = this.baseUrl + "/api/services/app/Payment/QueryPayment?";
        if (paymentId !== undefined)
            url_ += "paymentId=" + encodeURIComponent("" + paymentId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processQueryPayment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processQueryPayment(<any>response_);
                } catch (e) {
                    return <Observable<QueryPaymentOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<QueryPaymentOutput>><any>_observableThrow(response_);
        }));
    }

    protected processQueryPayment(response: HttpResponseBase): Observable<QueryPaymentOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? QueryPaymentOutput.fromJS(resultData200) : new QueryPaymentOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<QueryPaymentOutput>(<any>null);
    }

    /**
     * 获取支付记录
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getPaymentHistory(sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentHistory?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPaymentHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPaymentHistory(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPaymentHistory(response: HttpResponseBase): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSubscriptionPaymentListDto.fromJS(resultData200) : new PagedResultDtoOfSubscriptionPaymentListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfSubscriptionPaymentListDto>(<any>null);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有权限
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPermissions(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPermissions(response: HttpResponseBase): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfFlatPermissionWithLevelDto>(<any>null);
    }
}

@Injectable()
export class PictureServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取分组下的图片
     * @param groupId (optional) 图片分组Id，-1 获取全部
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getPictureAsync(groupId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfPictureListDto> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureAsync?";
        if (groupId !== undefined)
            url_ += "GroupId=" + encodeURIComponent("" + groupId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPictureAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPictureAsync(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfPictureListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfPictureListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPictureAsync(response: HttpResponseBase): Observable<PagedResultDtoOfPictureListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfPictureListDto.fromJS(resultData200) : new PagedResultDtoOfPictureListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfPictureListDto>(<any>null);
    }

    /**
     * 获取当前用户上传图片凭证
     * @return Success
     */
    getPictureUploadToken(): Observable<UploadTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureUploadToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPictureUploadToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPictureUploadToken(<any>response_);
                } catch (e) {
                    return <Observable<UploadTokenOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<UploadTokenOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetPictureUploadToken(response: HttpResponseBase): Observable<UploadTokenOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UploadTokenOutput.fromJS(resultData200) : new UploadTokenOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UploadTokenOutput>(<any>null);
    }

    /**
     * 上传图片
     * @param groupId (optional) 
     * @return Success
     */
    uploadAsync(groupId: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/UploadAsync?";
        if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadAsync(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUploadAsync(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 更新图片
     * @param input (optional) 
     * @return Success
     */
    updatePicture(input: UpdatePictureInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/UpdatePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePicture(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePicture(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdatePicture(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 批量删除图片
     * @param ids (optional) id数组
     * @return Success
     */
    deleteAsync(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/DeleteAsync?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAsync(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAsync(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 批量移动图片
     * @param input (optional) 
     * @return Success
     */
    batchMove2Group(input: BatchMove2GroupInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/BatchMove2Group";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchMove2Group(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchMove2Group(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBatchMove2Group(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 根据Url批量删除图片
     * @param urls (optional) 
     * @return Success
     */
    deleteByUrlAsync(urls: string[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/DeleteByUrlAsync?";
        if (urls !== undefined)
            urls && urls.forEach(item => { url_ += "Urls=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteByUrlAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteByUrlAsync(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteByUrlAsync(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有的图片分组
     * @return Success
     */
    getPictureGroupAsync(): Observable<PictureGroupListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Picture/GetPictureGroupAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPictureGroupAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPictureGroupAsync(<any>response_);
                } catch (e) {
                    return <Observable<PictureGroupListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PictureGroupListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPictureGroupAsync(response: HttpResponseBase): Observable<PictureGroupListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PictureGroupListDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PictureGroupListDto[]>(<any>null);
    }

    /**
     * 创建或更新图片分组
     * @param input (optional) 
     * @return Success
     */
    createOrUpdatePictureGroup(input: CreateOrUpdatePictureGroupInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/CreateOrUpdatePictureGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdatePictureGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdatePictureGroup(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdatePictureGroup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除图片分组
     * @param id (optional) 
     * @return Success
     */
    deleteGroupAsync(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Picture/DeleteGroupAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteGroupAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteGroupAsync(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteGroupAsync(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class ProductServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 商品信息同步
     * @return Success
     */
    productSync(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Product/ProductSync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProductSync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProductSync(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processProductSync(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有商品
     * @param name (optional) 商品名称
     * @param sku (optional) 商品Sku
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getProducts(name: string | null | undefined, sku: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfProductListDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Product/GetProducts?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (sku !== undefined)
            url_ += "Sku=" + encodeURIComponent("" + sku) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducts(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetProducts(response: HttpResponseBase): Observable<PagedResultDtoOfProductListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProductListDto.fromJS(resultData200) : new PagedResultDtoOfProductListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfProductListDto>(<any>null);
    }

    /**
     * 获取所有可用商品(下拉框)
     * @return Success
     */
    getProductSelectList(): Observable<SelectListItemDtoOfInt64[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Product/GetProductSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductSelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt64[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt64.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt64[]>(<any>null);
    }

    /**
     * 获取商品的属性及值
     * @param productId (optional) 
     * @return Success
     */
    getProductAttributeMapping(productId: number | null | undefined): Observable<GetProductAttributeMappingOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Product/GetProductAttributeMapping?";
        if (productId !== undefined)
            url_ += "productId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductAttributeMapping(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductAttributeMapping(<any>response_);
                } catch (e) {
                    return <Observable<GetProductAttributeMappingOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetProductAttributeMappingOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductAttributeMapping(response: HttpResponseBase): Observable<GetProductAttributeMappingOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductAttributeMappingOutput.fromJS(resultData200) : new GetProductAttributeMappingOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetProductAttributeMappingOutput>(<any>null);
    }

    /**
     * 获取商品详情
     * @param id (optional) 
     * @return Success
     */
    getProductForEdit(id: number | null | undefined): Observable<GetProductForEditOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Product/GetProductForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetProductForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetProductForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductForEdit(response: HttpResponseBase): Observable<GetProductForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductForEditOutput.fromJS(resultData200) : new GetProductForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetProductForEditOutput>(<any>null);
    }

    /**
     * 创建或更新商品
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateProduct(input: CreateOrUpdateProductInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Product/CreateOrUpdateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateProduct(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateProduct(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除商品
     * @param ids (optional) id数组
     * @return Success
     */
    deleteProduct(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Product/DeleteProduct?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteProduct(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteProduct(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class ProductAttributeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 创建或更新属性
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateAttribute(input: CreateOrUpdateAttributeInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/ProductAttribute/CreateOrUpdateAttribute";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateAttribute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateAttribute(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateAttribute(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 获取所有可用商品属性
     * @return Success
     */
    getAttributes(): Observable<ProductAttributeListDto[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/ProductAttribute/GetAttributes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAttributes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAttributes(<any>response_);
                } catch (e) {
                    return <Observable<ProductAttributeListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductAttributeListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAttributes(response: HttpResponseBase): Observable<ProductAttributeListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductAttributeListDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductAttributeListDto[]>(<any>null);
    }

    /**
     * 获取所有可用商品属性值
     * @param attributeId (optional) 
     * @return Success
     */
    getAttributeValues(attributeId: number | null | undefined): Observable<PredefinedProductAttributeValueDto[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/ProductAttribute/GetAttributeValues?";
        if (attributeId !== undefined)
            url_ += "attributeId=" + encodeURIComponent("" + attributeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAttributeValues(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAttributeValues(<any>response_);
                } catch (e) {
                    return <Observable<PredefinedProductAttributeValueDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PredefinedProductAttributeValueDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAttributeValues(response: HttpResponseBase): Observable<PredefinedProductAttributeValueDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PredefinedProductAttributeValueDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PredefinedProductAttributeValueDto[]>(<any>null);
    }

    /**
     * 创建或更新属性值
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateAttributeValue(input: CreateOrUpdateAttributeValueInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/ProductAttribute/CreateOrUpdateAttributeValue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateAttributeValue(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateAttributeValue(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateAttributeValue(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取当前用户资料
     * @return Success
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUserProfileForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUserProfileForEdit(<any>response_);
                } catch (e) {
                    return <Observable<CurrentUserProfileEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CurrentUserProfileEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUserProfileForEdit(response: HttpResponseBase): Observable<CurrentUserProfileEditDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CurrentUserProfileEditDto>(<any>null);
    }

    /**
     * 更新当前用户资料
     * @param input (optional) 
     * @return Success
     */
    updateCurrentUserProfile(input: CurrentUserProfileEditDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCurrentUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCurrentUserProfile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCurrentUserProfile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 修改密码
     * @param input (optional) 
     * @return Success
     */
    changePassword(input: ChangePasswordInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 使用手机修改密码
     * @param input (optional) 
     * @return Success
     */
    changePasswordByPhone(input: ChangePasswordByPhoneInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePasswordByPhone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePasswordByPhone(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePasswordByPhone(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangePasswordByPhone(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 绑定手机
     * @param input (optional) 
     * @return Success
     */
    bindingPhoneNum(input: BindingPhoneNumInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/BindingPhoneNum";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBindingPhoneNum(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBindingPhoneNum(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBindingPhoneNum(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 修改绑定手机
     * @param input (optional) 
     * @return Success
     */
    changeBindingPhoneNum(input: ChangeBindingPhoneNumInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeBindingPhoneNum";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeBindingPhoneNum(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeBindingPhoneNum(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeBindingPhoneNum(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 解绑手机
     * @param code (optional) 
     * @return Success
     */
    unBindingPhoneNum(code: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UnBindingPhoneNum?";
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnBindingPhoneNum(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnBindingPhoneNum(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUnBindingPhoneNum(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 更新头像
     * @param input (optional) 
     * @return Success
     */
    updateProfilePicture(input: UpdateProfilePictureInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateProfilePicture(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProfilePicture(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateProfilePicture(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取密码复杂性
     * @return Success
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetPasswordComplexitySetting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPasswordComplexitySetting(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPasswordComplexitySetting(<any>response_);
                } catch (e) {
                    return <Observable<GetPasswordComplexitySettingOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetPasswordComplexitySettingOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetPasswordComplexitySetting(response: HttpResponseBase): Observable<GetPasswordComplexitySettingOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPasswordComplexitySettingOutput.fromJS(resultData200) : new GetPasswordComplexitySettingOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetPasswordComplexitySettingOutput>(<any>null);
    }

    /**
     * 获取当前用户头像
     * @return Success
     */
    getProfilePicture(): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProfilePicture(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProfilePicture(<any>response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetProfilePicture(response: HttpResponseBase): Observable<GetProfilePictureOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetProfilePictureOutput>(<any>null);
    }

    /**
     * 根据 Id 获取头像
     * @param profilePictureId (optional) 头像文件Id
     * @return Success
     */
    getProfilePictureById(profilePictureId: number | null | undefined): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProfilePictureById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProfilePictureById(<any>response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetProfilePictureById(response: HttpResponseBase): Observable<GetProfilePictureOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetProfilePictureOutput>(<any>null);
    }

    /**
     * 修改语言
     * @param input (optional) 
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeLanguage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeLanguage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeLanguage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取当前用户安全信息
     * @return Success
     */
    getCurrentUserSecurityInfo(): Observable<UserSecurityInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserSecurityInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUserSecurityInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUserSecurityInfo(<any>response_);
                } catch (e) {
                    return <Observable<UserSecurityInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserSecurityInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUserSecurityInfo(response: HttpResponseBase): Observable<UserSecurityInfoDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserSecurityInfoDto.fromJS(resultData200) : new UserSecurityInfoDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserSecurityInfoDto>(<any>null);
    }

    /**
     * 绑定邮箱
     * @param input (optional) 
     * @return Success
     */
    bindingEmailAddress(input: BindingEmailInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/BindingEmailAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBindingEmailAddress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBindingEmailAddress(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processBindingEmailAddress(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 修改绑定邮箱
     * @param input (optional) 
     * @return Success
     */
    changeBindingEmail(input: ChangeBindingEmailInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeBindingEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeBindingEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeBindingEmail(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeBindingEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 解绑邮箱
     * @param code (optional) 
     * @return Success
     */
    unBindingEmailAddress(code: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UnBindingEmailAddress?";
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnBindingEmailAddress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnBindingEmailAddress(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUnBindingEmailAddress(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有角色
     * @param displayName (optional) 显示名
     * @param permission (optional) 权限
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getRoles(displayName: string | null | undefined, permission: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (displayName !== undefined)
            url_ += "DisplayName=" + encodeURIComponent("" + displayName) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRoleListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRoleListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<PagedResultDtoOfRoleListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfRoleListDto.fromJS(resultData200) : new PagedResultDtoOfRoleListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRoleListDto>(<any>null);
    }

    /**
     * 获取角色详情
     * @param id (optional) 
     * @return Success
     */
    getRoleForEdit(id: number | null | undefined): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRoleForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRoleForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoleForEdit(response: HttpResponseBase): Observable<GetRoleForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRoleForEditOutput>(<any>null);
    }

    /**
     * 创建或更新角色
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateRole(input: CreateOrUpdateRoleInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateRole(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除角色
     * @param id (optional) 
     * @return Success
     */
    deleteRole(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/DeleteRole?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRole(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class SaleStatisticServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取销售统计
     * @param sources (optional) 来源
     * @param productIds (optional) 产品Id
     * @param storeIds (optional) 店铺Id
     * @param searchMonth (optional) 统计月份（Utc时间）
     * @param statisticRange_FormDate (optional) 开始时间
     * @param statisticRange_ToDate (optional) 结束时间
     * @return Success
     */
    getSaleStatistics(sources: Sources[] | null | undefined, productIds: number[] | null | undefined, storeIds: number[] | null | undefined, searchMonth: moment.Moment | null | undefined, statisticRange_FormDate: moment.Moment | null | undefined, statisticRange_ToDate: moment.Moment | null | undefined): Observable<SaleStatisticDto[]> {
        let url_ = this.baseUrl + "/api/services/statistic/SaleStatistic/GetSaleStatistics?";
        if (sources !== undefined)
            sources && sources.forEach(item => { url_ += "Sources=" + encodeURIComponent("" + item) + "&"; });
        if (productIds !== undefined)
            productIds && productIds.forEach(item => { url_ += "ProductIds=" + encodeURIComponent("" + item) + "&"; });
        if (storeIds !== undefined)
            storeIds && storeIds.forEach(item => { url_ += "StoreIds=" + encodeURIComponent("" + item) + "&"; });
        if (searchMonth !== undefined)
            url_ += "SearchMonth=" + encodeURIComponent(searchMonth ? "" + searchMonth.toJSON() : "") + "&"; 
        if (statisticRange_FormDate !== undefined)
            url_ += "StatisticRange.FormDate=" + encodeURIComponent(statisticRange_FormDate ? "" + statisticRange_FormDate.toJSON() : "") + "&"; 
        if (statisticRange_ToDate !== undefined)
            url_ += "StatisticRange.ToDate=" + encodeURIComponent(statisticRange_ToDate ? "" + statisticRange_ToDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSaleStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSaleStatistics(<any>response_);
                } catch (e) {
                    return <Observable<SaleStatisticDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SaleStatisticDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSaleStatistics(response: HttpResponseBase): Observable<SaleStatisticDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SaleStatisticDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SaleStatisticDto[]>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取最近登录信息
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentLoginInformations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentLoginInformations(<any>response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentLoginInformations(response: HttpResponseBase): Observable<GetCurrentLoginInformationsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCurrentLoginInformationsOutput>(<any>null);
    }

    /**
     * 更新登录状态
     * @return Success
     */
    updateUserSignInToken(): Observable<UpdateUserSignInTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/UpdateUserSignInToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserSignInToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserSignInToken(<any>response_);
                } catch (e) {
                    return <Observable<UpdateUserSignInTokenOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<UpdateUserSignInTokenOutput>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUserSignInToken(response: HttpResponseBase): Observable<UpdateUserSignInTokenOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateUserSignInTokenOutput.fromJS(resultData200) : new UpdateUserSignInTokenOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UpdateUserSignInTokenOutput>(<any>null);
    }
}

@Injectable()
export class ShipmentServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 从Excel导入订单
     * @param tenantLogisticsId (optional) 自选物流Id，后期改成模板Id
     * @return Success
     */
    importFromExcel(tenantLogisticsId: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Shipment/ImportFromExcel?";
        if (tenantLogisticsId !== undefined)
            url_ += "tenantLogisticsId=" + encodeURIComponent("" + tenantLogisticsId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportFromExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportFromExcel(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processImportFromExcel(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有发货记录
     * @param status (optional) 空(全部)
     * @param trackingNumber (optional) 物流单号
     * @param deliveriedOn_FormDate (optional) 开始时间
     * @param deliveriedOn_ToDate (optional) 结束时间
     * @param receivedOn_FormDate (optional) 开始时间
     * @param receivedOn_ToDate (optional) 结束时间
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getShipments(status: Status | null | undefined, trackingNumber: string | null | undefined, deliveriedOn_FormDate: moment.Moment | null | undefined, deliveriedOn_ToDate: moment.Moment | null | undefined, receivedOn_FormDate: moment.Moment | null | undefined, receivedOn_ToDate: moment.Moment | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfShipmentListDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Shipment/GetShipments?";
        if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&"; 
        if (trackingNumber !== undefined)
            url_ += "TrackingNumber=" + encodeURIComponent("" + trackingNumber) + "&"; 
        if (deliveriedOn_FormDate !== undefined)
            url_ += "DeliveriedOn.FormDate=" + encodeURIComponent(deliveriedOn_FormDate ? "" + deliveriedOn_FormDate.toJSON() : "") + "&"; 
        if (deliveriedOn_ToDate !== undefined)
            url_ += "DeliveriedOn.ToDate=" + encodeURIComponent(deliveriedOn_ToDate ? "" + deliveriedOn_ToDate.toJSON() : "") + "&"; 
        if (receivedOn_FormDate !== undefined)
            url_ += "ReceivedOn.FormDate=" + encodeURIComponent(receivedOn_FormDate ? "" + receivedOn_FormDate.toJSON() : "") + "&"; 
        if (receivedOn_ToDate !== undefined)
            url_ += "ReceivedOn.ToDate=" + encodeURIComponent(receivedOn_ToDate ? "" + receivedOn_ToDate.toJSON() : "") + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetShipments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShipments(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfShipmentListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfShipmentListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetShipments(response: HttpResponseBase): Observable<PagedResultDtoOfShipmentListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfShipmentListDto.fromJS(resultData200) : new PagedResultDtoOfShipmentListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfShipmentListDto>(<any>null);
    }

    /**
     * 获取订单的发货记录
     * @param orderId (optional) 
     * @return Success
     */
    getOrderShipments(orderId: number | null | undefined): Observable<ShipmentDto[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Shipment/GetOrderShipments?";
        if (orderId !== undefined)
            url_ += "orderId=" + encodeURIComponent("" + orderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrderShipments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderShipments(<any>response_);
                } catch (e) {
                    return <Observable<ShipmentDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ShipmentDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrderShipments(response: HttpResponseBase): Observable<ShipmentDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShipmentDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShipmentDto[]>(<any>null);
    }

    /**
     * 获取发货记录详情
     * @param id (optional) 
     * @return Success
     */
    getShipmentForEdit(id: number | null | undefined): Observable<GetShipmentForEditOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Shipment/GetShipmentForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetShipmentForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShipmentForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetShipmentForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetShipmentForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetShipmentForEdit(response: HttpResponseBase): Observable<GetShipmentForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetShipmentForEditOutput.fromJS(resultData200) : new GetShipmentForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetShipmentForEditOutput>(<any>null);
    }

    /**
     * 创建或更新发货记录
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateShipment(input: CreateOrUpdateShipmentInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Shipment/CreateOrUpdateShipment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateShipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateShipment(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateShipment(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除发货记录
     * @param ids (optional) id数组
     * @return Success
     */
    deleteShipment(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Shipment/DeleteShipment?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteShipment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteShipment(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteShipment(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 快速发货
     * @param input (optional) 
     * @return Success
     */
    quickDelivery(input: QuickDeliveryInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Shipment/QuickDelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processQuickDelivery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processQuickDelivery(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processQuickDelivery(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class ShipmentStatisticServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取物流统计
     * @param sources (optional) 来源
     * @param productIds (optional) 产品Id
     * @param logisticsIds (optional) 自选物流Id
     * @param searchMonth (optional) 统计月份（Utc时间）
     * @param statisticRange_FormDate (optional) 开始时间
     * @param statisticRange_ToDate (optional) 结束时间
     * @return Success
     */
    getSaleStatistics(sources: Sources2[] | null | undefined, productIds: number[] | null | undefined, logisticsIds: number[] | null | undefined, searchMonth: moment.Moment | null | undefined, statisticRange_FormDate: moment.Moment | null | undefined, statisticRange_ToDate: moment.Moment | null | undefined): Observable<ShipmentStatisticDto[]> {
        let url_ = this.baseUrl + "/api/services/statistic/ShipmentStatistic/GetSaleStatistics?";
        if (sources !== undefined)
            sources && sources.forEach(item => { url_ += "Sources=" + encodeURIComponent("" + item) + "&"; });
        if (productIds !== undefined)
            productIds && productIds.forEach(item => { url_ += "ProductIds=" + encodeURIComponent("" + item) + "&"; });
        if (logisticsIds !== undefined)
            logisticsIds && logisticsIds.forEach(item => { url_ += "LogisticsIds=" + encodeURIComponent("" + item) + "&"; });
        if (searchMonth !== undefined)
            url_ += "SearchMonth=" + encodeURIComponent(searchMonth ? "" + searchMonth.toJSON() : "") + "&"; 
        if (statisticRange_FormDate !== undefined)
            url_ += "StatisticRange.FormDate=" + encodeURIComponent(statisticRange_FormDate ? "" + statisticRange_FormDate.toJSON() : "") + "&"; 
        if (statisticRange_ToDate !== undefined)
            url_ += "StatisticRange.ToDate=" + encodeURIComponent(statisticRange_ToDate ? "" + statisticRange_ToDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSaleStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSaleStatistics(<any>response_);
                } catch (e) {
                    return <Observable<ShipmentStatisticDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ShipmentStatisticDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSaleStatistics(response: HttpResponseBase): Observable<ShipmentStatisticDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShipmentStatisticDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShipmentStatisticDto[]>(<any>null);
    }
}

@Injectable()
export class ShippingTrackerServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取物流跟踪详情
     * @param orderId (optional) 订单Id(订单/物流Id二传一)
     * @param shipmentId (optional) 发货记录Id(订单/物流Id二传一)
     * @param refresh (optional) 强制刷新(请求第三方)
     * @return Success
     */
    getShipmentTracking(orderId: number | null | undefined, shipmentId: number | null | undefined, refresh: boolean | null | undefined): Observable<TrackingDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/ShippingTracker/GetShipmentTracking?";
        if (orderId !== undefined)
            url_ += "OrderId=" + encodeURIComponent("" + orderId) + "&"; 
        if (shipmentId !== undefined)
            url_ += "ShipmentId=" + encodeURIComponent("" + shipmentId) + "&"; 
        if (refresh !== undefined)
            url_ += "Refresh=" + encodeURIComponent("" + refresh) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetShipmentTracking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShipmentTracking(<any>response_);
                } catch (e) {
                    return <Observable<TrackingDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TrackingDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetShipmentTracking(response: HttpResponseBase): Observable<TrackingDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TrackingDto.fromJS(resultData200) : new TrackingDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TrackingDto>(<any>null);
    }
}

@Injectable()
export class SMSServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 发送(通知/内容)短信 (暂未实现)
     * @param input (optional) 
     * @return Success
     */
    batchSend(input: BatchSendSMSInput | null | undefined): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/BatchSend";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBatchSend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBatchSend(<any>response_);
                } catch (e) {
                    return <Observable<SendResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SendResult>><any>_observableThrow(response_);
        }));
    }

    protected processBatchSend(response: HttpResponseBase): Observable<SendResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SendResult>(<any>null);
    }

    /**
     * 给当前用户发送验证码
     * @param input (optional) 
     * @return Success
     */
    sendCodeByCurrentUser(input: UserCodeSendInput | null | undefined): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/SendCodeByCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendCodeByCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendCodeByCurrentUser(<any>response_);
                } catch (e) {
                    return <Observable<SendResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SendResult>><any>_observableThrow(response_);
        }));
    }

    protected processSendCodeByCurrentUser(response: HttpResponseBase): Observable<SendResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SendResult>(<any>null);
    }

    /**
     * 发送验证码
     * @param input (optional) 
     * @return Success
     */
    sendCode(input: CodeSendInput | null | undefined): Observable<SendResult> {
        let url_ = this.baseUrl + "/api/services/app/SMS/SendCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendCode(<any>response_);
                } catch (e) {
                    return <Observable<SendResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<SendResult>><any>_observableThrow(response_);
        }));
    }

    protected processSendCode(response: HttpResponseBase): Observable<SendResult> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SendResult.fromJS(resultData200) : new SendResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SendResult>(<any>null);
    }

    /**
     * 验证当前用户的验证码
     * @param input (optional) 
     * @return Success
     */
    checkCodeByCurrentUser(input: CheckUserCodeInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMS/CheckCodeByCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckCodeByCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckCodeByCurrentUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCheckCodeByCurrentUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class SMSTemplateServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有短信模板
     * @param name (optional) 短信模板名称
     * @param templateCode (optional) 短信模板编码
     * @param providerName (optional) 短信模板供应商
     * @param isActived (optional) 是否激活(Null代表所有)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getSMSTemplates(name: string | null | undefined, templateCode: string | null | undefined, providerName: string | null | undefined, isActived: boolean | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfSMSTemplateListDto> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSTemplates?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (templateCode !== undefined)
            url_ += "TemplateCode=" + encodeURIComponent("" + templateCode) + "&"; 
        if (providerName !== undefined)
            url_ += "ProviderName=" + encodeURIComponent("" + providerName) + "&"; 
        if (isActived !== undefined)
            url_ += "IsActived=" + encodeURIComponent("" + isActived) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSMSTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSMSTemplates(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSMSTemplateListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfSMSTemplateListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSMSTemplates(response: HttpResponseBase): Observable<PagedResultDtoOfSMSTemplateListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSMSTemplateListDto.fromJS(resultData200) : new PagedResultDtoOfSMSTemplateListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfSMSTemplateListDto>(<any>null);
    }

    /**
     * 获取所有可用短信模板(下拉框)
     * @return Success
     */
    getAvailableSMSTemplates(): Observable<SelectListItemDtoOfInt64[]> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetAvailableSMSTemplates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvailableSMSTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvailableSMSTemplates(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAvailableSMSTemplates(response: HttpResponseBase): Observable<SelectListItemDtoOfInt64[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt64.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt64[]>(<any>null);
    }

    /**
     * 获取短信模板详情
     * @param id (optional) 
     * @return Success
     */
    getSMSTemplateForEdit(id: number | null | undefined): Observable<GetSMSTemplateForEditDto> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSTemplateForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSMSTemplateForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSMSTemplateForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetSMSTemplateForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetSMSTemplateForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSMSTemplateForEdit(response: HttpResponseBase): Observable<GetSMSTemplateForEditDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSMSTemplateForEditDto.fromJS(resultData200) : new GetSMSTemplateForEditDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetSMSTemplateForEditDto>(<any>null);
    }

    /**
     * 新建/更新短信模板
     * @param input (optional) 
     * @return Success
     */
    createOrUpdate(input: CreateOrUpdateSMSTemplateInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除短信模板
     * @param id (optional) 
     * @return Success
     */
    deleteAsync(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/DeleteAsync?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAsync(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAsync(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取可用短信供应商
     * @return Success
     */
    getSMSProviders(): Observable<SMSProviderInfoDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SMSTemplate/GetSMSProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSMSProviders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSMSProviders(<any>response_);
                } catch (e) {
                    return <Observable<SMSProviderInfoDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SMSProviderInfoDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSMSProviders(response: HttpResponseBase): Observable<SMSProviderInfoDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SMSProviderInfoDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SMSProviderInfoDto[]>(<any>null);
    }
}

@Injectable()
export class StateServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有省份
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @return Success
     */
    getProvinces(maxResultCount: number | null | undefined, skipCount: number | null | undefined, sorting: string | null | undefined): Observable<PagedResultDtoOfProvinceListDto> {
        let url_ = this.baseUrl + "/api/services/app/State/GetProvinces?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProvinces(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProvinces(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProvinceListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfProvinceListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetProvinces(response: HttpResponseBase): Observable<PagedResultDtoOfProvinceListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProvinceListDto.fromJS(resultData200) : new PagedResultDtoOfProvinceListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfProvinceListDto>(<any>null);
    }

    /**
     * 获取所有可用省份(下拉框)
     * @return Success
     */
    getProvinceSelectList(): Observable<SelectListItemDtoOfInt32[]> {
        let url_ = this.baseUrl + "/api/services/app/State/GetProvinceSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProvinceSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProvinceSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetProvinceSelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt32[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt32.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt32[]>(<any>null);
    }

    /**
     * 创建或更新省份
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateProvince(input: CreateOrUpdateProvinceInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/State/CreateOrUpdateProvince";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateProvince(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateProvince(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateProvince(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除省份
     * @param id (optional) 
     * @return Success
     */
    deleteProvince(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/State/DeleteProvince?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteProvince(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteProvince(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteProvince(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有城市
     * @param provinceId (optional) 省份Id(必须大于0)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getCitys(provinceId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfCityListDto> {
        let url_ = this.baseUrl + "/api/services/app/State/GetCitys?";
        if (provinceId !== undefined)
            url_ += "ProvinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCitys(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCitys(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCityListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfCityListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetCitys(response: HttpResponseBase): Observable<PagedResultDtoOfCityListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCityListDto.fromJS(resultData200) : new PagedResultDtoOfCityListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfCityListDto>(<any>null);
    }

    /**
     * 获取所有可用城市(下拉框)
     * @param provinceId (optional) 省份id
     * @return Success
     */
    getCitySelectList(provinceId: number | null | undefined): Observable<SelectListItemDtoOfInt32[]> {
        let url_ = this.baseUrl + "/api/services/app/State/GetCitySelectList?";
        if (provinceId !== undefined)
            url_ += "provinceId=" + encodeURIComponent("" + provinceId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCitySelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCitySelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCitySelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt32[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt32.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt32[]>(<any>null);
    }

    /**
     * 创建或更新城市
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateCity(input: CreateOrUpdateCityInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/State/CreateOrUpdateCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateCity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateCity(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateCity(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除城市
     * @param id (optional) 
     * @return Success
     */
    deleteCity(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/State/DeleteCity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCity(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCity(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有区域
     * @param ctyId (optional) 城市Id(必须大于0)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getDistricts(ctyId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfDistrictListDto> {
        let url_ = this.baseUrl + "/api/services/app/State/GetDistricts?";
        if (ctyId !== undefined)
            url_ += "CtyId=" + encodeURIComponent("" + ctyId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDistricts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDistricts(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfDistrictListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfDistrictListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDistricts(response: HttpResponseBase): Observable<PagedResultDtoOfDistrictListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDistrictListDto.fromJS(resultData200) : new PagedResultDtoOfDistrictListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfDistrictListDto>(<any>null);
    }

    /**
     * 获取所有可用区域(下拉框)
     * @param cityId (optional) 城市id
     * @return Success
     */
    getDistrictSelectList(cityId: number | null | undefined): Observable<SelectListItemDtoOfInt32[]> {
        let url_ = this.baseUrl + "/api/services/app/State/GetDistrictSelectList?";
        if (cityId !== undefined)
            url_ += "cityId=" + encodeURIComponent("" + cityId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDistrictSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDistrictSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt32[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDistrictSelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt32[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt32.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt32[]>(<any>null);
    }

    /**
     * 创建或更新区域
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateDistrict(input: CreateOrUpdateDistrictInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/State/CreateOrUpdateDistrict";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateDistrict(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateDistrict(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateDistrict(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除区域
     * @param id (optional) 
     * @return Success
     */
    deleteDistrict(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/State/DeleteDistrict?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDistrict(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDistrict(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDistrict(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class StoreServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有店铺
     * @param name (optional) 店铺名称
     * @param source (optional) 渠道来源(空-获取所有)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getStores(name: string | null | undefined, source: Source | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfStoreListDto> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Store/GetStores?";
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (source !== undefined)
            url_ += "Source=" + encodeURIComponent("" + source) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStores(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStores(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfStoreListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfStoreListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetStores(response: HttpResponseBase): Observable<PagedResultDtoOfStoreListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfStoreListDto.fromJS(resultData200) : new PagedResultDtoOfStoreListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfStoreListDto>(<any>null);
    }

    /**
     * 获取所有可用店铺(下拉框)
     * @return Success
     */
    getStoreSelectList(): Observable<SelectListItemDtoOfInt64[]> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Store/GetStoreSelectList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoreSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoreSelectList(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItemDtoOfInt64[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoreSelectList(response: HttpResponseBase): Observable<SelectListItemDtoOfInt64[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListItemDtoOfInt64.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItemDtoOfInt64[]>(<any>null);
    }

    /**
     * 获取店铺详情
     * @param id (optional) 
     * @return Success
     */
    getStoreForEdit(id: number | null | undefined): Observable<GetStoreForEditOutput> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Store/GetStoreForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStoreForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStoreForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetStoreForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetStoreForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetStoreForEdit(response: HttpResponseBase): Observable<GetStoreForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetStoreForEditOutput.fromJS(resultData200) : new GetStoreForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetStoreForEditOutput>(<any>null);
    }

    /**
     * 创建或更新店铺
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateStore(input: CreateOrUpdateStoreInput | null | undefined): Observable<EntityDtoOfInt64> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Store/CreateOrUpdateStore";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateStore(<any>response_);
                } catch (e) {
                    return <Observable<EntityDtoOfInt64>><any>_observableThrow(e);
                }
            } else
                return <Observable<EntityDtoOfInt64>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateStore(response: HttpResponseBase): Observable<EntityDtoOfInt64> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EntityDtoOfInt64.fromJS(resultData200) : new EntityDtoOfInt64();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EntityDtoOfInt64>(<any>null);
    }

    /**
     * 删除店铺
     * @param ids (optional) id数组
     * @return Success
     */
    deleteStore(ids: number[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/ecommerce/Store/DeleteStore?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteStore(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteStore(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteStore(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有租户
     * @param tenancyName (optional) 租户系统名称
     * @param name (optional) 租户名称
     * @param subscriptionEndDateStart (optional) 订阅(购买)时间-开始
     * @param subscriptionEndDateEnd (optional) 订阅(购买)时间-结束
     * @param creationDateStart (optional) 创建时间-开始
     * @param creationDateEnd (optional) 创建时间-结束
     * @param editionId (optional) 版本
     * @param editionIdSpecified (optional) 指定版本
     * @param isActive (optional) 是否启用(空代表全部)
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getTenants(tenancyName: string | null | undefined, name: string | null | undefined, subscriptionEndDateStart: moment.Moment | null | undefined, subscriptionEndDateEnd: moment.Moment | null | undefined, creationDateStart: moment.Moment | null | undefined, creationDateEnd: moment.Moment | null | undefined, editionId: number | null | undefined, editionIdSpecified: boolean | null | undefined, isActive: boolean | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants?";
        if (tenancyName !== undefined)
            url_ += "TenancyName=" + encodeURIComponent("" + tenancyName) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (subscriptionEndDateStart !== undefined)
            url_ += "SubscriptionEndDateStart=" + encodeURIComponent(subscriptionEndDateStart ? "" + subscriptionEndDateStart.toJSON() : "") + "&"; 
        if (subscriptionEndDateEnd !== undefined)
            url_ += "SubscriptionEndDateEnd=" + encodeURIComponent(subscriptionEndDateEnd ? "" + subscriptionEndDateEnd.toJSON() : "") + "&"; 
        if (creationDateStart !== undefined)
            url_ += "CreationDateStart=" + encodeURIComponent(creationDateStart ? "" + creationDateStart.toJSON() : "") + "&"; 
        if (creationDateEnd !== undefined)
            url_ += "CreationDateEnd=" + encodeURIComponent(creationDateEnd ? "" + creationDateEnd.toJSON() : "") + "&"; 
        if (editionId !== undefined)
            url_ += "EditionId=" + encodeURIComponent("" + editionId) + "&"; 
        if (editionIdSpecified !== undefined)
            url_ += "EditionIdSpecified=" + encodeURIComponent("" + editionIdSpecified) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenants(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenants(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenants(response: HttpResponseBase): Observable<PagedResultDtoOfTenantListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTenantListDto>(<any>null);
    }

    /**
     * 创建租户
     * @param input (optional) 
     * @return Success
     */
    createTenant(input: CreateTenantInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateTenant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateTenant(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateTenant(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取租户详情
     * @param id (optional) 
     * @return Success
     */
    getTenantForEdit(id: number | null | undefined): Observable<GetTenantForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTenantForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTenantForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenantForEdit(response: HttpResponseBase): Observable<GetTenantForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantForEditOutput.fromJS(resultData200) : new GetTenantForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTenantForEditOutput>(<any>null);
    }

    /**
     * 更新租户
     * @param input (optional) 
     * @return Success
     */
    updateTenant(input: TenantEditDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTenant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTenant(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTenant(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除租户
     * @param id (optional) 
     * @return Success
     */
    deleteTenant(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeleteTenant?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTenant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTenant(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteTenant(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取租户特性详情
     * @param id (optional) 
     * @return Success
     */
    getTenantFeaturesForEdit(id: number | null | undefined): Observable<GetTenantFeaturesEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantFeaturesForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantFeaturesForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTenantFeaturesEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTenantFeaturesEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenantFeaturesForEdit(response: HttpResponseBase): Observable<GetTenantFeaturesEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantFeaturesEditOutput.fromJS(resultData200) : new GetTenantFeaturesEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTenantFeaturesEditOutput>(<any>null);
    }

    /**
     * 更新租户特性
     * @param input (optional) 
     * @return Success
     */
    updateTenantFeatures(input: UpdateTenantFeaturesInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTenantFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTenantFeatures(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTenantFeatures(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 重置租户详情
     * @param input (optional) 
     * @return Success
     */
    resetTenantSpecificFeatures(input: EntityDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetTenantSpecificFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetTenantSpecificFeatures(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processResetTenantSpecificFeatures(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 解锁租户
     * @param input (optional) 
     * @return Success
     */
    unlockTenantAdmin(input: EntityDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnlockTenantAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlockTenantAdmin(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUnlockTenantAdmin(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class TenantDashboardServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMemberActivity(): Observable<GetMemberActivityOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetMemberActivity";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMemberActivity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMemberActivity(<any>response_);
                } catch (e) {
                    return <Observable<GetMemberActivityOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMemberActivityOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetMemberActivity(response: HttpResponseBase): Observable<GetMemberActivityOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMemberActivityOutput.fromJS(resultData200) : new GetMemberActivityOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMemberActivityOutput>(<any>null);
    }

    /**
     * @param salesSummaryDatePeriod (optional) 
     * @return Success
     */
    getDashboardData(salesSummaryDatePeriod: SalesSummaryDatePeriod | null | undefined): Observable<GetDashboardDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetDashboardData?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDashboardData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDashboardData(<any>response_);
                } catch (e) {
                    return <Observable<GetDashboardDataOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetDashboardDataOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetDashboardData(response: HttpResponseBase): Observable<GetDashboardDataOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDashboardDataOutput.fromJS(resultData200) : new GetDashboardDataOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetDashboardDataOutput>(<any>null);
    }

    /**
     * @param salesSummaryDatePeriod (optional) 
     * @return Success
     */
    getSalesSummary(salesSummaryDatePeriod: SalesSummaryDatePeriod2 | null | undefined): Observable<GetSalesSummaryOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetSalesSummary?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesSummary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesSummary(<any>response_);
                } catch (e) {
                    return <Observable<GetSalesSummaryOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetSalesSummaryOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetSalesSummary(response: HttpResponseBase): Observable<GetSalesSummaryOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSalesSummaryOutput.fromJS(resultData200) : new GetSalesSummaryOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetSalesSummaryOutput>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    getRegionalStats(input: any | null | undefined): Observable<GetRegionalStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetRegionalStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRegionalStats(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRegionalStats(<any>response_);
                } catch (e) {
                    return <Observable<GetRegionalStatsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRegionalStatsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetRegionalStats(response: HttpResponseBase): Observable<GetRegionalStatsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRegionalStatsOutput.fromJS(resultData200) : new GetRegionalStatsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRegionalStatsOutput>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    getGeneralStats(input: any | null | undefined): Observable<GetGeneralStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetGeneralStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGeneralStats(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGeneralStats(<any>response_);
                } catch (e) {
                    return <Observable<GetGeneralStatsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetGeneralStatsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetGeneralStats(response: HttpResponseBase): Observable<GetGeneralStatsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetGeneralStatsOutput.fromJS(resultData200) : new GetGeneralStatsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetGeneralStatsOutput>(<any>null);
    }
}

@Injectable()
export class TenantInfoServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取租户基本信息
     * @return Success
     */
    getTenantInfoForEdit(): Observable<TenantInfoEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantInfo/GetTenantInfoForEdit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenantInfoForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenantInfoForEdit(<any>response_);
                } catch (e) {
                    return <Observable<TenantInfoEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TenantInfoEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenantInfoForEdit(response: HttpResponseBase): Observable<TenantInfoEditDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantInfoEditDto.fromJS(resultData200) : new TenantInfoEditDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TenantInfoEditDto>(<any>null);
    }

    /**
     * 更新租户资料
     * @param input (optional) 
     * @return Success
     */
    updateTenantInfo(input: TenantInfoEditDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantInfo/UpdateTenantInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTenantInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTenantInfo(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTenantInfo(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class TenantRegistrationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 租户注册
     * @param input (optional) 
     * @return Success
     */
    registerTenant(input: RegisterTenantInput | null | undefined): Observable<RegisterTenantOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterTenant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterTenant(<any>response_);
                } catch (e) {
                    return <Observable<RegisterTenantOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterTenantOutput>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterTenant(response: HttpResponseBase): Observable<RegisterTenantOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterTenantOutput.fromJS(resultData200) : new RegisterTenantOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterTenantOutput>(<any>null);
    }

    /**
     * 权限重置
     * @return Success
     */
    grantAllPermissionsAsync(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GrantAllPermissionsAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGrantAllPermissionsAsync(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGrantAllPermissionsAsync(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGrantAllPermissionsAsync(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class TenantSettingsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有设置
     * @return Success
     */
    getAllSettings(): Observable<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllSettings(<any>response_);
                } catch (e) {
                    return <Observable<TenantSettingsEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TenantSettingsEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllSettings(response: HttpResponseBase): Observable<TenantSettingsEditDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TenantSettingsEditDto>(<any>null);
    }

    /**
     * 更新设置
     * @param input (optional) 
     * @return Success
     */
    updateAllSettings(input: TenantSettingsEditDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAllSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAllSettings(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAllSettings(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 清除Logo
     * @return Success
     */
    clearLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearLogo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearLogo(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processClearLogo(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 清除 Backgroud
     * @return Success
     */
    clearBackgroundPicture(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearBackgroundPicture";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearBackgroundPicture(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearBackgroundPicture(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processClearBackgroundPicture(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 发送测试邮件
     * @param input (optional) 
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendTestEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendTestEmail(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendTestEmail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有时区
     * @param defaultTimezoneScope (optional) 默认时区有效范围
     * @return Success
     */
    getTimezones(defaultTimezoneScope: DefaultTimezoneScope | null | undefined): Observable<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope !== undefined)
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimezones(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimezones(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfNameValueDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfNameValueDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTimezones(response: HttpResponseBase): Observable<ListResultDtoOfNameValueDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * 获取所有时区(下拉框)
     * @param selectedTimezoneId (optional) 选择时区Id
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string | null | undefined): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimezoneComboboxItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimezoneComboboxItems(<any>response_);
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetTimezoneComboboxItems(response: HttpResponseBase): Observable<ComboboxItemDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ComboboxItemDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 认证登陆
     * @param model (optional) 
     * @return Success
     */
    authenticate(model: AuthenticateModel | null | undefined): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModel>(<any>null);
    }

    /**
     * 手机验证码认证登陆
     * @param model (optional) 
     * @return Success
     */
    phoneNumAuthenticate(model: PhoneAuthenticateModel | null | undefined): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/PhoneNumAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPhoneNumAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPhoneNumAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processPhoneNumAuthenticate(response: HttpResponseBase): Observable<AuthenticateResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModel>(<any>null);
    }

    /**
     * 注销登录
     * @return Success
     */
    logOut(): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/LogOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogOut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogOut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processLogOut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 发送双重认证码
     * @param model (optional) 
     * @return Success
     */
    sendTwoFactorAuthCode(model: SendTwoFactorAuthCodeModel | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/SendTwoFactorAuthCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendTwoFactorAuthCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendTwoFactorAuthCode(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSendTwoFactorAuthCode(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 模拟(用户)认证
     * @param impersonationToken (optional) 
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string | null | undefined): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImpersonatedAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImpersonatedAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<ImpersonatedAuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImpersonatedAuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processImpersonatedAuthenticate(response: HttpResponseBase): Observable<ImpersonatedAuthenticateResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImpersonatedAuthenticateResultModel>(<any>null);
    }

    /**
     * 关联用户认证
     * @param switchAccountToken (optional) 
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string | null | undefined): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLinkedAccountAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLinkedAccountAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<SwitchedAccountAuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwitchedAccountAuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processLinkedAccountAuthenticate(response: HttpResponseBase): Observable<SwitchedAccountAuthenticateResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwitchedAccountAuthenticateResultModel>(<any>null);
    }

    /**
     * 获取第三方登陆供应商
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExternalAuthenticationProviders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExternalAuthenticationProviders(<any>response_);
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetExternalAuthenticationProviders(response: HttpResponseBase): Observable<ExternalLoginProviderInfoModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExternalLoginProviderInfoModel[]>(<any>null);
    }

    /**
     * 第三方登陆认证
     * @param model (optional) 
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel | null | undefined): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExternalAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExternalAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processExternalAuthenticate(response: HttpResponseBase): Observable<ExternalAuthenticateResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExternalAuthenticateResultModel>(<any>null);
    }

    /**
     * 第三方账号绑定
     * @param model (optional) 
     * @return Success
     */
    externalBinding(model: ExternalBindingModel | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalBinding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExternalBinding(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExternalBinding(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processExternalBinding(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 第三方账号解绑
     * @param model (optional) 
     * @return Success
     */
    externalUnBinding(model: ExternalUnBindingModel | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalUnBinding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExternalUnBinding(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExternalUnBinding(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processExternalUnBinding(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 补充注册(机构用户,需要登录)
     * @param model (optional) 
     * @return Success
     */
    supplementAuth(model: SupplementAuthModel | null | undefined): Observable<SupplementAuthResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/SupplementAuth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSupplementAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSupplementAuth(<any>response_);
                } catch (e) {
                    return <Observable<SupplementAuthResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<SupplementAuthResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processSupplementAuth(response: HttpResponseBase): Observable<SupplementAuthResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? SupplementAuthResultModel.fromJS(resultData200) : new SupplementAuthResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SupplementAuthResultModel>(<any>null);
    }

    /**
     * 获取登录凭证短链
     * @return Success
     */
    getShortAuthToken(): Observable<ShortAuthTokenModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetShortAuthToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetShortAuthToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetShortAuthToken(<any>response_);
                } catch (e) {
                    return <Observable<ShortAuthTokenModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ShortAuthTokenModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetShortAuthToken(response: HttpResponseBase): Observable<ShortAuthTokenModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ShortAuthTokenModel.fromJS(resultData200) : new ShortAuthTokenModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ShortAuthTokenModel>(<any>null);
    }

    /**
     * 使用短链凭证登陆
     * @param model (optional) 
     * @return Success
     */
    authenticateByShortAuth(model: ShortAuthTokenModel | null | undefined): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/AuthenticateByShortAuth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticateByShortAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticateByShortAuth(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticateByShortAuth(response: HttpResponseBase): Observable<AuthenticateResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModel>(<any>null);
    }

    /**
     * 测试通知
     * @param message (optional) 通知内容
     * @param severity (optional) 通知类型
     * @return Success
     */
    testNotification(message: string | null | undefined, severity: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/TestNotification?";
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        if (severity !== undefined)
            url_ += "severity=" + encodeURIComponent("" + severity) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTestNotification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTestNotification(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processTestNotification(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有用户
     * @param userName (optional) 用户名称
     * @param surname (optional) 姓
     * @param email (optional) 邮箱
     * @param isEmailConfirmed (optional) 是否确认邮箱(可空)
     * @param phoneNumber (optional) 电话号码
     * @param isPhoneConfirmed (optional) 是否确认手机(可空)
     * @param isActive (optional) 激活(可空)
     * @param permission (optional) 权限
     * @param roleIds (optional) 角色
     * @param onlyLockedUsers (optional) 只获取锁定用户
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getUsers(userName: string | null | undefined, surname: string | null | undefined, email: string | null | undefined, isEmailConfirmed: boolean | null | undefined, phoneNumber: string | null | undefined, isPhoneConfirmed: boolean | null | undefined, isActive: boolean | null | undefined, permission: string | null | undefined, roleIds: number[] | null | undefined, onlyLockedUsers: boolean | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (surname !== undefined)
            url_ += "Surname=" + encodeURIComponent("" + surname) + "&"; 
        if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (isEmailConfirmed !== undefined)
            url_ += "IsEmailConfirmed=" + encodeURIComponent("" + isEmailConfirmed) + "&"; 
        if (phoneNumber !== undefined)
            url_ += "PhoneNumber=" + encodeURIComponent("" + phoneNumber) + "&"; 
        if (isPhoneConfirmed !== undefined)
            url_ += "IsPhoneConfirmed=" + encodeURIComponent("" + isPhoneConfirmed) + "&"; 
        if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (roleIds !== undefined)
            roleIds && roleIds.forEach(item => { url_ += "RoleIds=" + encodeURIComponent("" + item) + "&"; });
        if (onlyLockedUsers !== undefined)
            url_ += "OnlyLockedUsers=" + encodeURIComponent("" + onlyLockedUsers) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<PagedResultDtoOfUserListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfUserListDto>(<any>null);
    }

    /**
     * 导出用户到Excel
     * @return Success
     */
    getUsersToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsersToExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsersToExcel(<any>response_);
                } catch (e) {
                    return <Observable<FileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsersToExcel(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileDto>(<any>null);
    }

    /**
     * 获取用户详情
     * @param id (optional) 
     * @return Success
     */
    getUserForEdit(id: number | null | undefined): Observable<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetUserForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetUserForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserForEdit(response: HttpResponseBase): Observable<GetUserForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetUserForEditOutput>(<any>null);
    }

    /**
     * 获取用户权限详情
     * @param id (optional) 
     * @return Success
     */
    getUserPermissionsForEdit(id: number | null | undefined): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserPermissionsForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserPermissionsForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetUserPermissionsForEditOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetUserPermissionsForEditOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserPermissionsForEdit(response: HttpResponseBase): Observable<GetUserPermissionsForEditOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetUserPermissionsForEditOutput>(<any>null);
    }

    /**
     * 重置用户权限
     * @param input (optional) 
     * @return Success
     */
    resetUserSpecificPermissions(input: EntityDtoOfInt64 | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetUserSpecificPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetUserSpecificPermissions(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processResetUserSpecificPermissions(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 更新用户权限
     * @param input (optional) 
     * @return Success
     */
    updateUserPermissions(input: UpdateUserPermissionsInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserPermissions(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUserPermissions(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 创建/更新用户
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateUser(input: CreateOrUpdateUserInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 删除用户
     * @param id (optional) 
     * @return Success
     */
    deleteUser(id: number | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 解锁用户
     * @param input (optional) 
     * @return Success
     */
    unlockUser(input: EntityDtoOfInt64 | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UnlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnlockUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlockUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUnlockUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class UserConfigurationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有设置
     * @param sourceName (optional) 
     * @return Success
     */
    getAll(sourceName: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UserConfiguration/GetAll?";
        if (sourceName !== undefined)
            url_ += "sourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 关联用户
     * @param input (optional) 
     * @return Success
     */
    linkToUser(input: LinkToUserInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLinkToUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLinkToUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processLinkToUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取所有关联用户
     * @param sorting (optional) 排序字段 (eg:Id DESC)
     * @param maxResultCount (optional) 最大结果数量(等同:PageSize)
     * @param skipCount (optional) 列表跳过数量(等同: PageSize*PageIndex)
     * @return Success
     */
    getLinkedUsers(sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLinkedUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLinkedUsers(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLinkedUserDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfLinkedUserDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetLinkedUsers(response: HttpResponseBase): Observable<PagedResultDtoOfLinkedUserDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * 获取当前用户的关联用户列表
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Observable<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecentlyUsedLinkedUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecentlyUsedLinkedUsers(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLinkedUserDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfLinkedUserDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecentlyUsedLinkedUsers(response: HttpResponseBase): Observable<ListResultDtoOfLinkedUserDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * 取消关联
     * @param input (optional) 
     * @return Success
     */
    unlinkUser(input: UnlinkUserInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnlinkUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlinkUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUnlinkUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取最近登录尝试
     * @return Success
     */
    getRecentUserLoginAttempts(): Observable<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecentUserLoginAttempts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecentUserLoginAttempts(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecentUserLoginAttempts(response: HttpResponseBase): Observable<ListResultDtoOfUserLoginAttemptDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfUserLoginAttemptDto>(<any>null);
    }
}

@Injectable()
export class WebLogServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLatestWebLogs(): Observable<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLatestWebLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLatestWebLogs(<any>response_);
                } catch (e) {
                    return <Observable<GetLatestWebLogsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetLatestWebLogsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetLatestWebLogs(response: HttpResponseBase): Observable<GetLatestWebLogsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetLatestWebLogsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    downloadWebLogs(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadWebLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadWebLogs(<any>response_);
                } catch (e) {
                    return <Observable<FileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileDto>><any>_observableThrow(response_);
        }));
    }

    protected processDownloadWebLogs(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileDto>(<any>null);
    }
}

@Injectable()
export class WeChatJSServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取Js-sdk签名
     * @param sourceUrl 当前页面Url
     * @param nonceStr 随机字符串
     * @param timestamp 时间戳
     * @return Success
     */
    getJsApiSignature(sourceUrl: string, nonceStr: string, timestamp: string): Observable<GetJsApiSignatureOutput> {
        let url_ = this.baseUrl + "/api/services/app/WeChatJS/GetJsApiSignature?";
        if (sourceUrl === undefined || sourceUrl === null)
            throw new Error("The parameter 'sourceUrl' must be defined and cannot be null.");
        else
            url_ += "SourceUrl=" + encodeURIComponent("" + sourceUrl) + "&"; 
        if (nonceStr === undefined || nonceStr === null)
            throw new Error("The parameter 'nonceStr' must be defined and cannot be null.");
        else
            url_ += "NonceStr=" + encodeURIComponent("" + nonceStr) + "&"; 
        if (timestamp === undefined || timestamp === null)
            throw new Error("The parameter 'timestamp' must be defined and cannot be null.");
        else
            url_ += "Timestamp=" + encodeURIComponent("" + timestamp) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJsApiSignature(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJsApiSignature(<any>response_);
                } catch (e) {
                    return <Observable<GetJsApiSignatureOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetJsApiSignatureOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetJsApiSignature(response: HttpResponseBase): Observable<GetJsApiSignatureOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetJsApiSignatureOutput.fromJS(resultData200) : new GetJsApiSignatureOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetJsApiSignatureOutput>(<any>null);
    }
}

@Injectable()
export class WeChatPaymentServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 微信支付异步通知
     * @return Success
     */
    notify(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/WeChatPayment/Notify";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processNotify(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNotify(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processNotify(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    /** 租户系统名称 */
    tenancyName!: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IIsTenantAvailableInput {
    /** 租户系统名称 */
    tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    /** 状态1 = Available ; 2 = InActive ; 3 = NotFound */
    state!: IsTenantAvailableOutputState | undefined;
    /** 租户Id */
    tenantId!: number | undefined;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IIsTenantAvailableOutput {
    /** 状态1 = Available ; 2 = InActive ; 3 = NotFound */
    state: IsTenantAvailableOutputState | undefined;
    /** 租户Id */
    tenantId: number | undefined;
}

export class ResolveTenantIdInput implements IResolveTenantIdInput {
    /** 租户Id编码字符串 */
    c!: string | undefined;

    constructor(data?: IResolveTenantIdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.c = data["c"];
        }
    }

    static fromJS(data: any): ResolveTenantIdInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResolveTenantIdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["c"] = this.c;
        return data; 
    }
}

export interface IResolveTenantIdInput {
    /** 租户Id编码字符串 */
    c: string | undefined;
}

export class RegisterInput implements IRegisterInput {
    /** 名称 */
    name!: string | undefined;
    /** 手机号码 */
    phoneNumber!: string | undefined;
    /** 邮箱 */
    emailAddress!: string | undefined;
    /** 注册类型1 = Telephone ; 2 = Email */
    type!: RegisterInputType | undefined;
    /** 注册验证码 */
    registerCode!: string;
    /** 密码 */
    password!: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.phoneNumber = data["phoneNumber"];
            this.emailAddress = data["emailAddress"];
            this.type = data["type"];
            this.registerCode = data["registerCode"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["type"] = this.type;
        data["registerCode"] = this.registerCode;
        data["password"] = this.password;
        return data; 
    }
}

export interface IRegisterInput {
    /** 名称 */
    name: string | undefined;
    /** 手机号码 */
    phoneNumber: string | undefined;
    /** 邮箱 */
    emailAddress: string | undefined;
    /** 注册类型1 = Telephone ; 2 = Email */
    type: RegisterInputType | undefined;
    /** 注册验证码 */
    registerCode: string;
    /** 密码 */
    password: string | undefined;
}

export class RegisterOutput implements IRegisterOutput {
    /** 能否登陆 */
    canLogin!: boolean | undefined;
    /** 随机密码 */
    randomPassword!: string | undefined;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.randomPassword = data["randomPassword"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["randomPassword"] = this.randomPassword;
        return data; 
    }
}

export interface IRegisterOutput {
    /** 能否登陆 */
    canLogin: boolean | undefined;
    /** 随机密码 */
    randomPassword: string | undefined;
}

export class SendPasswordResetCodeInput implements ISendPasswordResetCodeInput {
    /** 需要重置密码的账号邮箱 */
    emailAddress!: string;

    constructor(data?: ISendPasswordResetCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendPasswordResetCodeInput {
    /** 需要重置密码的账号邮箱 */
    emailAddress: string;
}

export class ResetPasswordInput implements IResetPasswordInput {
    /** 用户Id */
    userId!: number | undefined;
    /** 重置密码 Code */
    resetCode!: string;
    /** 新密码 */
    password!: string;
    /** Encrypted values for {TenantId}, {UserId} and {ResetCode} */
    c!: string | undefined;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.resetCode = data["resetCode"];
            this.password = data["password"];
            this.c = data["c"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["resetCode"] = this.resetCode;
        data["password"] = this.password;
        data["c"] = this.c;
        return data; 
    }
}

export interface IResetPasswordInput {
    /** 用户Id */
    userId: number | undefined;
    /** 重置密码 Code */
    resetCode: string;
    /** 新密码 */
    password: string;
    /** Encrypted values for {TenantId}, {UserId} and {ResetCode} */
    c: string | undefined;
}

export class ResetPasswordOutput implements IResetPasswordOutput {
    /** 能否登陆 */
    canLogin!: boolean | undefined;
    /** 用户名 */
    userName!: string | undefined;

    constructor(data?: IResetPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IResetPasswordOutput {
    /** 能否登陆 */
    canLogin: boolean | undefined;
    /** 用户名 */
    userName: string | undefined;
}

export class SendEmailVerificationCodeInput implements ISendEmailVerificationCodeInput {
    /** 收件邮箱地址 */
    emailAddress!: string;
    /** 验证类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType!: SendEmailVerificationCodeInputCodeType | undefined;

    constructor(data?: ISendEmailVerificationCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
            this.codeType = data["codeType"];
        }
    }

    static fromJS(data: any): SendEmailVerificationCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendEmailVerificationCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["codeType"] = this.codeType;
        return data; 
    }
}

export interface ISendEmailVerificationCodeInput {
    /** 收件邮箱地址 */
    emailAddress: string;
    /** 验证类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType: SendEmailVerificationCodeInputCodeType | undefined;
}

export class CheckEmailCodeInput implements ICheckEmailCodeInput {
    /** 验证码 */
    code!: string;
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType!: CheckEmailCodeInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse!: string | undefined;

    constructor(data?: ICheckEmailCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.codeType = data["codeType"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): CheckEmailCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CheckEmailCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["codeType"] = this.codeType;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface ICheckEmailCodeInput {
    /** 验证码 */
    code: string;
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType: CheckEmailCodeInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse: string | undefined;
}

export class SendEmailActivationLinkInput implements ISendEmailActivationLinkInput {
    /** 待激活账号邮箱地址 */
    emailAddress!: string;

    constructor(data?: ISendEmailActivationLinkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendEmailActivationLinkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendEmailActivationLinkInput {
    /** 待激活账号邮箱地址 */
    emailAddress: string;
}

export class ActivateEmailInput implements IActivateEmailInput {
    /** 用户Id */
    userId!: number;
    /** 确认码 */
    confirmationCode!: string;
    /** Encrypted values for {TenantId}, {UserId} and {ConfirmationCode} */
    c!: string | undefined;

    constructor(data?: IActivateEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.confirmationCode = data["confirmationCode"];
            this.c = data["c"];
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        data = typeof data === 'object' ? data : {};
        let result = new ActivateEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["confirmationCode"] = this.confirmationCode;
        data["c"] = this.c;
        return data; 
    }
}

export interface IActivateEmailInput {
    /** 用户Id */
    userId: number;
    /** 确认码 */
    confirmationCode: string;
    /** Encrypted values for {TenantId}, {UserId} and {ConfirmationCode} */
    c: string | undefined;
}

export class ImpersonateInput implements IImpersonateInput {
    /** 租户Id(可空) */
    tenantId!: number | undefined;
    /** 用户Id(大于0) */
    userId!: number | undefined;

    constructor(data?: IImpersonateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateInput {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IImpersonateInput {
    /** 租户Id(可空) */
    tenantId: number | undefined;
    /** 用户Id(大于0) */
    userId: number | undefined;
}

export class ImpersonateOutput implements IImpersonateOutput {
    /** 模拟登陆凭证 */
    impersonationToken!: string | undefined;
    /** 租户系统名称 */
    tenancyName!: string | undefined;

    constructor(data?: IImpersonateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.impersonationToken = data["impersonationToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IImpersonateOutput {
    /** 模拟登陆凭证 */
    impersonationToken: string | undefined;
    /** 租户系统名称 */
    tenancyName: string | undefined;
}

export class SwitchToLinkedAccountInput implements ISwitchToLinkedAccountInput {
    /** 租户Id(可空) */
    targetTenantId!: number | undefined;
    /** 目标用户Id(大于0) */
    targetUserId!: number | undefined;

    constructor(data?: ISwitchToLinkedAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetTenantId = data["targetTenantId"];
            this.targetUserId = data["targetUserId"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data; 
    }
}

export interface ISwitchToLinkedAccountInput {
    /** 租户Id(可空) */
    targetTenantId: number | undefined;
    /** 目标用户Id(大于0) */
    targetUserId: number | undefined;
}

export class SwitchToLinkedAccountOutput implements ISwitchToLinkedAccountOutput {
    /** 切换账户令牌 */
    switchAccountToken!: string | undefined;
    /** 租户系统名称 */
    tenancyName!: string | undefined;

    constructor(data?: ISwitchToLinkedAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.switchAccountToken = data["switchAccountToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface ISwitchToLinkedAccountOutput {
    /** 切换账户令牌 */
    switchAccountToken: string | undefined;
    /** 租户系统名称 */
    tenancyName: string | undefined;
}

export class PagedResultDtoOfAdvertAccountListDto implements IPagedResultDtoOfAdvertAccountListDto {
    totalCount!: number | undefined;
    items!: AdvertAccountListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfAdvertAccountListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(AdvertAccountListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAdvertAccountListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfAdvertAccountListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfAdvertAccountListDto {
    totalCount: number | undefined;
    items: AdvertAccountListDto[] | undefined;
}

export class AdvertAccountListDto implements IAdvertAccountListDto {
    /** 店铺 */
    store!: string | undefined;
    /** 第三方Id */
    thirdpartyId!: string | undefined;
    /** 用户名 */
    username!: string | undefined;
    /** 显示名称 */
    displayName!: string | undefined;
    /** 产品 */
    product!: string | undefined;
    /** 渠道 */
    channel!: string | undefined;
    /** 数据自动同步 */
    dataAutoSync!: boolean | undefined;
    /** 历史消耗 */
    totalCost!: number | undefined;
    /** 总下单数 */
    totalOrder!: number | undefined;
    /** 余额 */
    balance!: number | undefined;
    /** 是否已授权 */
    isAuthed!: boolean | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IAdvertAccountListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.store = data["store"];
            this.thirdpartyId = data["thirdpartyId"];
            this.username = data["username"];
            this.displayName = data["displayName"];
            this.product = data["product"];
            this.channel = data["channel"];
            this.dataAutoSync = data["dataAutoSync"];
            this.totalCost = data["totalCost"];
            this.totalOrder = data["totalOrder"];
            this.balance = data["balance"];
            this.isAuthed = data["isAuthed"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AdvertAccountListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AdvertAccountListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["store"] = this.store;
        data["thirdpartyId"] = this.thirdpartyId;
        data["username"] = this.username;
        data["displayName"] = this.displayName;
        data["product"] = this.product;
        data["channel"] = this.channel;
        data["dataAutoSync"] = this.dataAutoSync;
        data["totalCost"] = this.totalCost;
        data["totalOrder"] = this.totalOrder;
        data["balance"] = this.balance;
        data["isAuthed"] = this.isAuthed;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAdvertAccountListDto {
    /** 店铺 */
    store: string | undefined;
    /** 第三方Id */
    thirdpartyId: string | undefined;
    /** 用户名 */
    username: string | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 产品 */
    product: string | undefined;
    /** 渠道 */
    channel: string | undefined;
    /** 数据自动同步 */
    dataAutoSync: boolean | undefined;
    /** 历史消耗 */
    totalCost: number | undefined;
    /** 总下单数 */
    totalOrder: number | undefined;
    /** 余额 */
    balance: number | undefined;
    /** 是否已授权 */
    isAuthed: boolean | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class SelectListItemDtoOfInt64 implements ISelectListItemDtoOfInt64 {
    /** 文本 */
    text!: string | undefined;
    /** 值 */
    value!: number | undefined;

    constructor(data?: ISelectListItemDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.text = data["text"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): SelectListItemDtoOfInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new SelectListItemDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["value"] = this.value;
        return data; 
    }
}

export interface ISelectListItemDtoOfInt64 {
    /** 文本 */
    text: string | undefined;
    /** 值 */
    value: number | undefined;
}

export class GetAdvertAccountForEditOutput implements IGetAdvertAccountForEditOutput {
    /** 店铺（必填） */
    storeId!: number | undefined;
    /** 第三方Id */
    thirdpartyId!: string | undefined;
    /** 用户名 */
    username!: string | undefined;
    /** 产品Id */
    productId!: number | undefined;
    /** 显示名称 */
    displayName!: string | undefined;
    /** 渠道20 = Toutiao ; 40 = Tencent */
    channel!: GetAdvertAccountForEditOutputChannel | undefined;
    /** 余额 */
    balance!: number | undefined;
    /** 数据自动同步 */
    dataAutoSync!: boolean | undefined;
    /** 是否已授权 */
    isAuthed!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: IGetAdvertAccountForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.storeId = data["storeId"];
            this.thirdpartyId = data["thirdpartyId"];
            this.username = data["username"];
            this.productId = data["productId"];
            this.displayName = data["displayName"];
            this.channel = data["channel"];
            this.balance = data["balance"];
            this.dataAutoSync = data["dataAutoSync"];
            this.isAuthed = data["isAuthed"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetAdvertAccountForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetAdvertAccountForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["thirdpartyId"] = this.thirdpartyId;
        data["username"] = this.username;
        data["productId"] = this.productId;
        data["displayName"] = this.displayName;
        data["channel"] = this.channel;
        data["balance"] = this.balance;
        data["dataAutoSync"] = this.dataAutoSync;
        data["isAuthed"] = this.isAuthed;
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetAdvertAccountForEditOutput {
    /** 店铺（必填） */
    storeId: number | undefined;
    /** 第三方Id */
    thirdpartyId: string | undefined;
    /** 用户名 */
    username: string | undefined;
    /** 产品Id */
    productId: number | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 渠道20 = Toutiao ; 40 = Tencent */
    channel: GetAdvertAccountForEditOutputChannel | undefined;
    /** 余额 */
    balance: number | undefined;
    /** 数据自动同步 */
    dataAutoSync: boolean | undefined;
    /** 是否已授权 */
    isAuthed: boolean | undefined;
    id: number | undefined;
}

export class CreateOrUpdateAdvertAccountInput implements ICreateOrUpdateAdvertAccountInput {
    /** 店铺（必填） */
    storeId!: number | undefined;
    /** 第三方Id */
    thirdpartyId!: string | undefined;
    /** 用户名 */
    username!: string | undefined;
    /** 产品Id */
    productId!: number | undefined;
    /** 显示名称 */
    displayName!: string | undefined;
    /** 渠道20 = Toutiao ; 40 = Tencent */
    channel!: CreateOrUpdateAdvertAccountInputChannel | undefined;
    /** 余额 */
    balance!: number | undefined;
    /** 数据自动同步 */
    dataAutoSync!: boolean | undefined;
    /** 是否已授权 */
    isAuthed!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateAdvertAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.storeId = data["storeId"];
            this.thirdpartyId = data["thirdpartyId"];
            this.username = data["username"];
            this.productId = data["productId"];
            this.displayName = data["displayName"];
            this.channel = data["channel"];
            this.balance = data["balance"];
            this.dataAutoSync = data["dataAutoSync"];
            this.isAuthed = data["isAuthed"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateAdvertAccountInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateAdvertAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["storeId"] = this.storeId;
        data["thirdpartyId"] = this.thirdpartyId;
        data["username"] = this.username;
        data["productId"] = this.productId;
        data["displayName"] = this.displayName;
        data["channel"] = this.channel;
        data["balance"] = this.balance;
        data["dataAutoSync"] = this.dataAutoSync;
        data["isAuthed"] = this.isAuthed;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateAdvertAccountInput {
    /** 店铺（必填） */
    storeId: number | undefined;
    /** 第三方Id */
    thirdpartyId: string | undefined;
    /** 用户名 */
    username: string | undefined;
    /** 产品Id */
    productId: number | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 渠道20 = Toutiao ; 40 = Tencent */
    channel: CreateOrUpdateAdvertAccountInputChannel | undefined;
    /** 余额 */
    balance: number | undefined;
    /** 数据自动同步 */
    dataAutoSync: boolean | undefined;
    /** 是否已授权 */
    isAuthed: boolean | undefined;
    id: number | undefined;
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id!: number | undefined;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfInt64 {
    id: number | undefined;
}

export class PagedResultDtoOfDailyStatisticDto implements IPagedResultDtoOfDailyStatisticDto {
    totalCount!: number | undefined;
    items!: DailyStatisticDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDailyStatisticDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(DailyStatisticDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDailyStatisticDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDailyStatisticDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfDailyStatisticDto {
    totalCount: number | undefined;
    items: DailyStatisticDto[] | undefined;
}

export class DailyStatisticDto implements IDailyStatisticDto {
    /** 商品名Id */
    productId!: number | undefined;
    /** 商品名 */
    productName!: string | undefined;
    /** 广告账户Id */
    advertAccountId!: number | undefined;
    /** 广告账户 */
    advertAccount!: string | undefined;
    /** 展现数 */
    displayNum!: number | undefined;
    /** 点击数 */
    clickNum!: number | undefined;
    /** 点击价格 */
    clickPrice!: number | undefined;
    /** 点记录 */
    clickRate!: number | undefined;
    /** 千次展现花费 */
    thDisplayCost!: number | undefined;
    /** 消耗金额 */
    totalCost!: number | undefined;
    /** 统计时间 */
    statisticOn!: string | undefined;
    /** 条目(每小时) */
    items!: DailyStatisticItemDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IDailyStatisticDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.advertAccountId = data["advertAccountId"];
            this.advertAccount = data["advertAccount"];
            this.displayNum = data["displayNum"];
            this.clickNum = data["clickNum"];
            this.clickPrice = data["clickPrice"];
            this.clickRate = data["clickRate"];
            this.thDisplayCost = data["thDisplayCost"];
            this.totalCost = data["totalCost"];
            this.statisticOn = data["statisticOn"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(DailyStatisticItemDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DailyStatisticDto {
        data = typeof data === 'object' ? data : {};
        let result = new DailyStatisticDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["advertAccountId"] = this.advertAccountId;
        data["advertAccount"] = this.advertAccount;
        data["displayNum"] = this.displayNum;
        data["clickNum"] = this.clickNum;
        data["clickPrice"] = this.clickPrice;
        data["clickRate"] = this.clickRate;
        data["thDisplayCost"] = this.thDisplayCost;
        data["totalCost"] = this.totalCost;
        data["statisticOn"] = this.statisticOn;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IDailyStatisticDto {
    /** 商品名Id */
    productId: number | undefined;
    /** 商品名 */
    productName: string | undefined;
    /** 广告账户Id */
    advertAccountId: number | undefined;
    /** 广告账户 */
    advertAccount: string | undefined;
    /** 展现数 */
    displayNum: number | undefined;
    /** 点击数 */
    clickNum: number | undefined;
    /** 点击价格 */
    clickPrice: number | undefined;
    /** 点记录 */
    clickRate: number | undefined;
    /** 千次展现花费 */
    thDisplayCost: number | undefined;
    /** 消耗金额 */
    totalCost: number | undefined;
    /** 统计时间 */
    statisticOn: string | undefined;
    /** 条目(每小时) */
    items: DailyStatisticItemDto[] | undefined;
    id: number | undefined;
}

export class DailyStatisticItemDto implements IDailyStatisticItemDto {
    /** 小时（24小时制） */
    hourOfDay!: number | undefined;
    /** 展示数量 */
    displayNum!: number | undefined;
    /** 点击数量 */
    clickNum!: number | undefined;
    /** 点击价格 */
    clickPrice!: number | undefined;
    /** 点记录 */
    clickRate!: number | undefined;
    /** 千次展示费用 */
    thDisplayCost!: number | undefined;
    /** 总消耗 */
    totalCost!: number | undefined;
    id!: number | undefined;

    constructor(data?: IDailyStatisticItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hourOfDay = data["hourOfDay"];
            this.displayNum = data["displayNum"];
            this.clickNum = data["clickNum"];
            this.clickPrice = data["clickPrice"];
            this.clickRate = data["clickRate"];
            this.thDisplayCost = data["thDisplayCost"];
            this.totalCost = data["totalCost"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DailyStatisticItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new DailyStatisticItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hourOfDay"] = this.hourOfDay;
        data["displayNum"] = this.displayNum;
        data["clickNum"] = this.clickNum;
        data["clickPrice"] = this.clickPrice;
        data["clickRate"] = this.clickRate;
        data["thDisplayCost"] = this.thDisplayCost;
        data["totalCost"] = this.totalCost;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDailyStatisticItemDto {
    /** 小时（24小时制） */
    hourOfDay: number | undefined;
    /** 展示数量 */
    displayNum: number | undefined;
    /** 点击数量 */
    clickNum: number | undefined;
    /** 点击价格 */
    clickPrice: number | undefined;
    /** 点记录 */
    clickRate: number | undefined;
    /** 千次展示费用 */
    thDisplayCost: number | undefined;
    /** 总消耗 */
    totalCost: number | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfAuditLogListDto implements IPagedResultDtoOfAuditLogListDto {
    totalCount!: number | undefined;
    items!: AuditLogListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfAuditLogListDto {
    totalCount: number | undefined;
    items: AuditLogListDto[] | undefined;
}

export class AuditLogListDto implements IAuditLogListDto {
    userId!: number | undefined;
    userName!: string | undefined;
    impersonatorTenantId!: number | undefined;
    impersonatorUserId!: number | undefined;
    serviceName!: string | undefined;
    methodName!: string | undefined;
    parameters!: string | undefined;
    executionTime!: moment.Moment | undefined;
    executionDuration!: number | undefined;
    clientIpAddress!: string | undefined;
    clientName!: string | undefined;
    browserInfo!: string | undefined;
    exception!: string | undefined;
    customData!: string | undefined;
    id!: number | undefined;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.serviceName = data["serviceName"];
            this.methodName = data["methodName"];
            this.parameters = data["parameters"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : <any>undefined;
            this.executionDuration = data["executionDuration"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.exception = data["exception"];
            this.customData = data["customData"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAuditLogListDto {
    userId: number | undefined;
    userName: string | undefined;
    impersonatorTenantId: number | undefined;
    impersonatorUserId: number | undefined;
    serviceName: string | undefined;
    methodName: string | undefined;
    parameters: string | undefined;
    executionTime: moment.Moment | undefined;
    executionDuration: number | undefined;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    exception: string | undefined;
    customData: string | undefined;
    id: number | undefined;
}

export class FileDto implements IFileDto {
    /** 文件名称 */
    fileName!: string;
    /** 文件类型 */
    fileType!: string;
    /** 文件 Token */
    fileToken!: string;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileType = data["fileType"];
            this.fileToken = data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data; 
    }
}

export interface IFileDto {
    /** 文件名称 */
    fileName: string;
    /** 文件类型 */
    fileType: string;
    /** 文件 Token */
    fileToken: string;
}

export class NameValueDto implements INameValueDto {
    name!: string | undefined;
    value!: string | undefined;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueDto {
    name: string | undefined;
    value: string | undefined;
}

export class PagedResultDtoOfEntityChangeListDto implements IPagedResultDtoOfEntityChangeListDto {
    totalCount!: number | undefined;
    items!: EntityChangeListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfEntityChangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(EntityChangeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfEntityChangeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfEntityChangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfEntityChangeListDto {
    totalCount: number | undefined;
    items: EntityChangeListDto[] | undefined;
}

export class EntityChangeListDto implements IEntityChangeListDto {
    userId!: number | undefined;
    userName!: string | undefined;
    changeTime!: moment.Moment | undefined;
    entityTypeFullName!: string | undefined;
    /** 0 = Created ; 1 = Updated ; 2 = Deleted */
    changeType!: EntityChangeListDtoChangeType | undefined;
    changeTypeName!: string | undefined;
    entityChangeSetId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IEntityChangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.changeTime = data["changeTime"] ? moment(data["changeTime"].toString()) : <any>undefined;
            this.entityTypeFullName = data["entityTypeFullName"];
            this.changeType = data["changeType"];
            this.changeTypeName = data["changeTypeName"];
            this.entityChangeSetId = data["entityChangeSetId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityChangeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityChangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["changeTime"] = this.changeTime ? this.changeTime.toISOString() : <any>undefined;
        data["entityTypeFullName"] = this.entityTypeFullName;
        data["changeType"] = this.changeType;
        data["changeTypeName"] = this.changeTypeName;
        data["entityChangeSetId"] = this.entityChangeSetId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityChangeListDto {
    userId: number | undefined;
    userName: string | undefined;
    changeTime: moment.Moment | undefined;
    entityTypeFullName: string | undefined;
    /** 0 = Created ; 1 = Updated ; 2 = Deleted */
    changeType: EntityChangeListDtoChangeType | undefined;
    changeTypeName: string | undefined;
    entityChangeSetId: number | undefined;
    id: number | undefined;
}

export class EntityPropertyChangeDto implements IEntityPropertyChangeDto {
    entityChangeId!: number | undefined;
    newValue!: string | undefined;
    originalValue!: string | undefined;
    propertyName!: string | undefined;
    propertyTypeFullName!: string | undefined;
    tenantId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IEntityPropertyChangeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.entityChangeId = data["entityChangeId"];
            this.newValue = data["newValue"];
            this.originalValue = data["originalValue"];
            this.propertyName = data["propertyName"];
            this.propertyTypeFullName = data["propertyTypeFullName"];
            this.tenantId = data["tenantId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityPropertyChangeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityPropertyChangeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityChangeId"] = this.entityChangeId;
        data["newValue"] = this.newValue;
        data["originalValue"] = this.originalValue;
        data["propertyName"] = this.propertyName;
        data["propertyTypeFullName"] = this.propertyTypeFullName;
        data["tenantId"] = this.tenantId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityPropertyChangeDto {
    entityChangeId: number | undefined;
    newValue: string | undefined;
    originalValue: string | undefined;
    propertyName: string | undefined;
    propertyTypeFullName: string | undefined;
    tenantId: number | undefined;
    id: number | undefined;
}

export class ListResultDtoOfCacheDto implements IListResultDtoOfCacheDto {
    items!: CacheDto[] | undefined;

    constructor(data?: IListResultDtoOfCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCacheDto {
    items: CacheDto[] | undefined;
}

export class CacheDto implements ICacheDto {
    /** 缓存名称 */
    name!: string | undefined;

    constructor(data?: ICacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CacheDto {
        data = typeof data === 'object' ? data : {};
        let result = new CacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICacheDto {
    /** 缓存名称 */
    name: string | undefined;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id!: string | undefined;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfString {
    id: string | undefined;
}

export class PagedResultDtoOfCategoryListDto implements IPagedResultDtoOfCategoryListDto {
    totalCount!: number | undefined;
    items!: CategoryListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCategoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CategoryListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCategoryListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCategoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfCategoryListDto {
    totalCount: number | undefined;
    items: CategoryListDto[] | undefined;
}

export class CategoryListDto implements ICategoryListDto {
    /** Id */
    id!: number | undefined;
    /** 分类名称 */
    name!: string | undefined;
    /** 分类名称:面包屑(父分 &gt;&gt; 子分类) */
    breadcrumb!: string | undefined;
    /** 父分类Id */
    parentCategoryId!: number | undefined;
    /** 图片Id */
    pictureId!: number | undefined;
    /** 图片Url(图片Id为0的话为空) */
    pictureUrl!: string | undefined;
    /** 是否启用 */
    isActive!: boolean | undefined;
    /** 排序Id */
    displayOrder!: number | undefined;

    constructor(data?: ICategoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.breadcrumb = data["breadcrumb"];
            this.parentCategoryId = data["parentCategoryId"];
            this.pictureId = data["pictureId"];
            this.pictureUrl = data["pictureUrl"];
            this.isActive = data["isActive"];
            this.displayOrder = data["displayOrder"];
        }
    }

    static fromJS(data: any): CategoryListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["breadcrumb"] = this.breadcrumb;
        data["parentCategoryId"] = this.parentCategoryId;
        data["pictureId"] = this.pictureId;
        data["pictureUrl"] = this.pictureUrl;
        data["isActive"] = this.isActive;
        data["displayOrder"] = this.displayOrder;
        return data; 
    }
}

export interface ICategoryListDto {
    /** Id */
    id: number | undefined;
    /** 分类名称 */
    name: string | undefined;
    /** 分类名称:面包屑(父分 &gt;&gt; 子分类) */
    breadcrumb: string | undefined;
    /** 父分类Id */
    parentCategoryId: number | undefined;
    /** 图片Id */
    pictureId: number | undefined;
    /** 图片Url(图片Id为0的话为空) */
    pictureUrl: string | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 排序Id */
    displayOrder: number | undefined;
}

export class GetCategoryForEditOutput implements IGetCategoryForEditOutput {
    /** Id */
    id!: number | undefined;
    /** 名称 */
    name!: string | undefined;
    /** 父分类Id */
    parentCategoryId!: number | undefined;
    /** 图片Id */
    pictureId!: number | undefined;
    /** 图片Url */
    pictureUrl!: string | undefined;
    /** 是否启用 */
    isActive!: boolean | undefined;
    /** 排序Id */
    displayOrder!: number | undefined;

    constructor(data?: IGetCategoryForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.parentCategoryId = data["parentCategoryId"];
            this.pictureId = data["pictureId"];
            this.pictureUrl = data["pictureUrl"];
            this.isActive = data["isActive"];
            this.displayOrder = data["displayOrder"];
        }
    }

    static fromJS(data: any): GetCategoryForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCategoryForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentCategoryId"] = this.parentCategoryId;
        data["pictureId"] = this.pictureId;
        data["pictureUrl"] = this.pictureUrl;
        data["isActive"] = this.isActive;
        data["displayOrder"] = this.displayOrder;
        return data; 
    }
}

export interface IGetCategoryForEditOutput {
    /** Id */
    id: number | undefined;
    /** 名称 */
    name: string | undefined;
    /** 父分类Id */
    parentCategoryId: number | undefined;
    /** 图片Id */
    pictureId: number | undefined;
    /** 图片Url */
    pictureUrl: string | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 排序Id */
    displayOrder: number | undefined;
}

export class CreateOrUpdateCategoryInput implements ICreateOrUpdateCategoryInput {
    /** Id，空或者为0时创建分类 */
    id!: number | undefined;
    /** 名称 */
    name!: string;
    /** 父分类Id */
    parentCategoryId!: number | undefined;
    /** 图片Id */
    pictureId!: number | undefined;
    /** 是否启用 */
    isActive!: boolean | undefined;
    /** 排序Id */
    displayOrder!: number | undefined;

    constructor(data?: ICreateOrUpdateCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.parentCategoryId = data["parentCategoryId"];
            this.pictureId = data["pictureId"];
            this.isActive = data["isActive"];
            this.displayOrder = data["displayOrder"];
        }
    }

    static fromJS(data: any): CreateOrUpdateCategoryInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentCategoryId"] = this.parentCategoryId;
        data["pictureId"] = this.pictureId;
        data["isActive"] = this.isActive;
        data["displayOrder"] = this.displayOrder;
        return data; 
    }
}

export interface ICreateOrUpdateCategoryInput {
    /** Id，空或者为0时创建分类 */
    id: number | undefined;
    /** 名称 */
    name: string;
    /** 父分类Id */
    parentCategoryId: number | undefined;
    /** 图片Id */
    pictureId: number | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 排序Id */
    displayOrder: number | undefined;
}

export class ListResultDtoOfSubscribableEditionComboboxItemDto implements IListResultDtoOfSubscribableEditionComboboxItemDto {
    items!: SubscribableEditionComboboxItemDto[] | undefined;

    constructor(data?: IListResultDtoOfSubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSubscribableEditionComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[] | undefined;
}

export class SubscribableEditionComboboxItemDto implements ISubscribableEditionComboboxItemDto {
    isFree!: boolean | undefined;
    value!: string | undefined;
    displayText!: string | undefined;
    isSelected!: boolean | undefined;

    constructor(data?: ISubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isFree = data["isFree"];
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): SubscribableEditionComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isFree"] = this.isFree;
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface ISubscribableEditionComboboxItemDto {
    isFree: boolean | undefined;
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean | undefined;
}

export class FindUsersInput implements IFindUsersInput {
    /** 租户Id */
    tenantId!: number | undefined;
    maxResultCount!: number | undefined;
    skipCount!: number | undefined;
    filter!: string | undefined;

    constructor(data?: IFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindUsersInput {
        data = typeof data === 'object' ? data : {};
        let result = new FindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindUsersInput {
    /** 租户Id */
    tenantId: number | undefined;
    maxResultCount: number | undefined;
    skipCount: number | undefined;
    filter: string | undefined;
}

export class PagedResultDtoOfNameValueDto implements IPagedResultDtoOfNameValueDto {
    totalCount!: number | undefined;
    items!: NameValueDto[] | undefined;

    constructor(data?: IPagedResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNameValueDto {
    totalCount: number | undefined;
    items: NameValueDto[] | undefined;
}

export class GetDefaultEditionNameOutput implements IGetDefaultEditionNameOutput {
    name!: string | undefined;

    constructor(data?: IGetDefaultEditionNameOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetDefaultEditionNameOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetDefaultEditionNameOutput {
    name: string | undefined;
}

export class SelectListItemDtoOfInt32 implements ISelectListItemDtoOfInt32 {
    /** 文本 */
    text!: string | undefined;
    /** 值 */
    value!: number | undefined;

    constructor(data?: ISelectListItemDtoOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.text = data["text"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): SelectListItemDtoOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new SelectListItemDtoOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["value"] = this.value;
        return data; 
    }
}

export interface ISelectListItemDtoOfInt32 {
    /** 文本 */
    text: string | undefined;
    /** 值 */
    value: number | undefined;
}

export class SelectListItemDtoOfString implements ISelectListItemDtoOfString {
    /** 文本 */
    text!: string | undefined;
    /** 值 */
    value!: string | undefined;

    constructor(data?: ISelectListItemDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.text = data["text"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): SelectListItemDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new SelectListItemDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["value"] = this.value;
        return data; 
    }
}

export interface ISelectListItemDtoOfString {
    /** 文本 */
    text: string | undefined;
    /** 值 */
    value: string | undefined;
}

export class PagedResultDtoOfCustomerListDto implements IPagedResultDtoOfCustomerListDto {
    totalCount!: number | undefined;
    items!: CustomerListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CustomerListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfCustomerListDto {
    totalCount: number | undefined;
    items: CustomerListDto[] | undefined;
}

export class CustomerListDto implements ICustomerListDto {
    /** 头像链接 */
    avatarUrl!: string | undefined;
    /** 客户名称 */
    name!: string | undefined;
    /** 电话号码 */
    phoneNumber!: string | undefined;
    /** 消费总额 */
    totalConsumes!: number | undefined;
    /** 购买频次 */
    totalOrderNum!: number | undefined;
    /** 备注 */
    remark!: string | undefined;
    /** 首次购买时间/创建时间 */
    createOn!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: ICustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.avatarUrl = data["avatarUrl"];
            this.name = data["name"];
            this.phoneNumber = data["phoneNumber"];
            this.totalConsumes = data["totalConsumes"];
            this.totalOrderNum = data["totalOrderNum"];
            this.remark = data["remark"];
            this.createOn = data["createOn"] ? moment(data["createOn"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["avatarUrl"] = this.avatarUrl;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["totalConsumes"] = this.totalConsumes;
        data["totalOrderNum"] = this.totalOrderNum;
        data["remark"] = this.remark;
        data["createOn"] = this.createOn ? this.createOn.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICustomerListDto {
    /** 头像链接 */
    avatarUrl: string | undefined;
    /** 客户名称 */
    name: string | undefined;
    /** 电话号码 */
    phoneNumber: string | undefined;
    /** 消费总额 */
    totalConsumes: number | undefined;
    /** 购买频次 */
    totalOrderNum: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 首次购买时间/创建时间 */
    createOn: moment.Moment | undefined;
    id: number | undefined;
}

export class CustomerDetailDto implements ICustomerDetailDto {
    /** 头像链接 */
    avatarUrl!: string | undefined;
    /** 客户名称 */
    name!: string | undefined;
    /** 电话号码 */
    phoneNumber!: string | undefined;
    /** 消费总额 */
    totalConsumes!: number | undefined;
    /** 购买频次 */
    totalOrderNum!: number | undefined;
    /** 备注 */
    remark!: string | undefined;
    /** 首次购买时间/创建时间 */
    createOn!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: ICustomerDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.avatarUrl = data["avatarUrl"];
            this.name = data["name"];
            this.phoneNumber = data["phoneNumber"];
            this.totalConsumes = data["totalConsumes"];
            this.totalOrderNum = data["totalOrderNum"];
            this.remark = data["remark"];
            this.createOn = data["createOn"] ? moment(data["createOn"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CustomerDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["avatarUrl"] = this.avatarUrl;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["totalConsumes"] = this.totalConsumes;
        data["totalOrderNum"] = this.totalOrderNum;
        data["remark"] = this.remark;
        data["createOn"] = this.createOn ? this.createOn.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICustomerDetailDto {
    /** 头像链接 */
    avatarUrl: string | undefined;
    /** 客户名称 */
    name: string | undefined;
    /** 电话号码 */
    phoneNumber: string | undefined;
    /** 消费总额 */
    totalConsumes: number | undefined;
    /** 购买频次 */
    totalOrderNum: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 首次购买时间/创建时间 */
    createOn: moment.Moment | undefined;
    id: number | undefined;
}

export class CreateOrUpdateCustomerInput implements ICreateOrUpdateCustomerInput {
    /** 头像Id */
    avatarPictureId!: number | undefined;
    /** 客户名称 */
    name!: string | undefined;
    /** 电话号码 */
    phoneNumber!: string | undefined;
    /** 消费总额 */
    totalConsumes!: number | undefined;
    /** 购买频次 */
    totalOrderNum!: number | undefined;
    /** 备注 */
    remark!: string | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateCustomerInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.avatarPictureId = data["avatarPictureId"];
            this.name = data["name"];
            this.phoneNumber = data["phoneNumber"];
            this.totalConsumes = data["totalConsumes"];
            this.totalOrderNum = data["totalOrderNum"];
            this.remark = data["remark"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateCustomerInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateCustomerInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["avatarPictureId"] = this.avatarPictureId;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["totalConsumes"] = this.totalConsumes;
        data["totalOrderNum"] = this.totalOrderNum;
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateCustomerInput {
    /** 头像Id */
    avatarPictureId: number | undefined;
    /** 客户名称 */
    name: string | undefined;
    /** 电话号码 */
    phoneNumber: string | undefined;
    /** 消费总额 */
    totalConsumes: number | undefined;
    /** 购买频次 */
    totalOrderNum: number | undefined;
    /** 备注 */
    remark: string | undefined;
    id: number | undefined;
}

export class ListResultDtoOfEditionListDto implements IListResultDtoOfEditionListDto {
    items!: EditionListDto[] | undefined;

    constructor(data?: IListResultDtoOfEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(EditionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfEditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEditionListDto {
    items: EditionListDto[] | undefined;
}

export class EditionListDto implements IEditionListDto {
    name!: string | undefined;
    displayName!: string | undefined;
    creationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionListDto {
    name: string | undefined;
    displayName: string | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class GetEditionEditOutput implements IGetEditionEditOutput {
    edition!: EditionEditDto | undefined;
    featureValues!: NameValueDto[] | undefined;
    features!: FlatFeatureDto[] | undefined;

    constructor(data?: IGetEditionEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [] as any;
                for (let item of data["featureValues"])
                    this.featureValues!.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [] as any;
                for (let item of data["features"])
                    this.features!.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetEditionEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionEditOutput {
    edition: EditionEditDto | undefined;
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;
}

/** 版本信息编辑 DTO */
export class EditionEditDto implements IEditionEditDto {
    /** Id(可空) */
    id!: number | undefined;
    /** 是否启用 */
    isEnable!: boolean | undefined;
    /** 显示名称 */
    displayName!: string;
    /** 月价格 */
    monthlyPrice!: number | undefined;
    /** 季度价格 */
    seasonPrice!: number | undefined;
    /** 年价格 */
    annualPrice!: number | undefined;
    /** 试用天数 */
    trialDayCount!: number | undefined;
    waitingDayAfterExpire!: number | undefined;
    /** 过期后 */
    expiringEditionId!: number | undefined;

    constructor(data?: IEditionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isEnable = data["isEnable"];
            this.displayName = data["displayName"];
            this.monthlyPrice = data["monthlyPrice"];
            this.seasonPrice = data["seasonPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.expiringEditionId = data["expiringEditionId"];
        }
    }

    static fromJS(data: any): EditionEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isEnable"] = this.isEnable;
        data["displayName"] = this.displayName;
        data["monthlyPrice"] = this.monthlyPrice;
        data["seasonPrice"] = this.seasonPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["expiringEditionId"] = this.expiringEditionId;
        return data; 
    }
}

/** 版本信息编辑 DTO */
export interface IEditionEditDto {
    /** Id(可空) */
    id: number | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 显示名称 */
    displayName: string;
    /** 月价格 */
    monthlyPrice: number | undefined;
    /** 季度价格 */
    seasonPrice: number | undefined;
    /** 年价格 */
    annualPrice: number | undefined;
    /** 试用天数 */
    trialDayCount: number | undefined;
    waitingDayAfterExpire: number | undefined;
    /** 过期后 */
    expiringEditionId: number | undefined;
}

export class FlatFeatureDto implements IFlatFeatureDto {
    parentName!: string | undefined;
    name!: string | undefined;
    displayName!: string | undefined;
    description!: string | undefined;
    defaultValue!: string | undefined;
    inputType!: FeatureInputTypeDto | undefined;

    constructor(data?: IFlatFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? FeatureInputTypeDto.fromJS(data["inputType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatFeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFlatFeatureDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    defaultValue: string | undefined;
    inputType: FeatureInputTypeDto | undefined;
}

export class FeatureInputTypeDto implements IFeatureInputTypeDto {
    name!: string | undefined;
    attributes!: { [key: string] : any; } | undefined;
    validator!: IValueValidator | undefined;
    itemSource!: LocalizableComboboxItemSourceDto | undefined;

    constructor(data?: IFeatureInputTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {} as any;
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes![key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
            this.itemSource = data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(data["itemSource"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FeatureInputTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFeatureInputTypeDto {
    name: string | undefined;
    attributes: { [key: string] : any; } | undefined;
    validator: IValueValidator | undefined;
    itemSource: LocalizableComboboxItemSourceDto | undefined;
}

export class IValueValidator implements IIValueValidator {
    name!: string | undefined;
    attributes!: { [key: string] : any; } | undefined;

    constructor(data?: IIValueValidator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {} as any;
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes![key] = data["attributes"][key];
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        data = typeof data === 'object' ? data : {};
        let result = new IValueValidator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        return data; 
    }
}

export interface IIValueValidator {
    name: string | undefined;
    attributes: { [key: string] : any; } | undefined;
}

export class LocalizableComboboxItemSourceDto implements ILocalizableComboboxItemSourceDto {
    items!: LocalizableComboboxItemDto[] | undefined;

    constructor(data?: ILocalizableComboboxItemSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(LocalizableComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocalizableComboboxItemSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[] | undefined;
}

export class LocalizableComboboxItemDto implements ILocalizableComboboxItemDto {
    value!: string | undefined;
    displayText!: string | undefined;

    constructor(data?: ILocalizableComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
        }
    }

    static fromJS(data: any): LocalizableComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data; 
    }
}

export interface ILocalizableComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
}

export class CreateOrUpdateEditionDto implements ICreateOrUpdateEditionDto {
    edition!: EditionEditDto;
    featureValues!: NameValueDto[];

    constructor(data?: ICreateOrUpdateEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.edition = new EditionEditDto();
            this.featureValues = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [] as any;
                for (let item of data["featureValues"])
                    this.featureValues!.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
}

export class SelectListItemOfInt32 implements ISelectListItemOfInt32 {
    text!: string | undefined;
    value!: number | undefined;

    constructor(data?: ISelectListItemOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.text = data["text"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): SelectListItemOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new SelectListItemOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["value"] = this.value;
        return data; 
    }
}

export interface ISelectListItemOfInt32 {
    text: string | undefined;
    value: number | undefined;
}

export class EditionsSelectOutput implements IEditionsSelectOutput {
    /** 所有功能（展示用） */
    allFeatures!: FlatFeatureSelectDto[] | undefined;
    /** 版本及版本的功能 */
    editionsWithFeatures!: EditionWithFeaturesForSelectDto[] | undefined;
    tenantEditionId!: number | undefined;

    constructor(data?: IEditionsSelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["allFeatures"] && data["allFeatures"].constructor === Array) {
                this.allFeatures = [] as any;
                for (let item of data["allFeatures"])
                    this.allFeatures!.push(FlatFeatureSelectDto.fromJS(item));
            }
            if (data["editionsWithFeatures"] && data["editionsWithFeatures"].constructor === Array) {
                this.editionsWithFeatures = [] as any;
                for (let item of data["editionsWithFeatures"])
                    this.editionsWithFeatures!.push(EditionWithFeaturesForSelectDto.fromJS(item));
            }
            this.tenantEditionId = data["tenantEditionId"];
        }
    }

    static fromJS(data: any): EditionsSelectOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditionsSelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures && this.allFeatures.constructor === Array) {
            data["allFeatures"] = [];
            for (let item of this.allFeatures)
                data["allFeatures"].push(item.toJSON());
        }
        if (this.editionsWithFeatures && this.editionsWithFeatures.constructor === Array) {
            data["editionsWithFeatures"] = [];
            for (let item of this.editionsWithFeatures)
                data["editionsWithFeatures"].push(item.toJSON());
        }
        data["tenantEditionId"] = this.tenantEditionId;
        return data; 
    }
}

export interface IEditionsSelectOutput {
    /** 所有功能（展示用） */
    allFeatures: FlatFeatureSelectDto[] | undefined;
    /** 版本及版本的功能 */
    editionsWithFeatures: EditionWithFeaturesForSelectDto[] | undefined;
    tenantEditionId: number | undefined;
}

export class FlatFeatureSelectDto implements IFlatFeatureSelectDto {
    parentName!: string | undefined;
    name!: string | undefined;
    displayName!: string | undefined;
    description!: string | undefined;
    defaultValue!: string | undefined;
    inputType!: IInputType | undefined;
    textHtmlColor!: string | undefined;

    constructor(data?: IFlatFeatureSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : <any>undefined;
            this.textHtmlColor = data["textHtmlColor"];
        }
    }

    static fromJS(data: any): FlatFeatureSelectDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatFeatureSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        data["textHtmlColor"] = this.textHtmlColor;
        return data; 
    }
}

export interface IFlatFeatureSelectDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    defaultValue: string | undefined;
    inputType: IInputType | undefined;
    textHtmlColor: string | undefined;
}

export class EditionWithFeaturesForSelectDto implements IEditionWithFeaturesForSelectDto {
    /** 版本信息 */
    edition!: EditionSelectDto | undefined;
    /** 版本功能 */
    featureValues!: FeatureValueDto[] | undefined;

    constructor(data?: IEditionWithFeaturesForSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [] as any;
                for (let item of data["featureValues"])
                    this.featureValues!.push(FeatureValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditionWithFeaturesForSelectDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionWithFeaturesForSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditionWithFeaturesForSelectDto {
    /** 版本信息 */
    edition: EditionSelectDto | undefined;
    /** 版本功能 */
    featureValues: FeatureValueDto[] | undefined;
}

export class IInputType implements IIInputType {
    name!: string | undefined;
    attributes!: { [key: string] : any; } | undefined;
    validator!: IValueValidator | undefined;

    constructor(data?: IIInputType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {} as any;
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes![key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IInputType {
        data = typeof data === 'object' ? data : {};
        let result = new IInputType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIInputType {
    name: string | undefined;
    attributes: { [key: string] : any; } | undefined;
    validator: IValueValidator | undefined;
}

export class EditionSelectDto implements IEditionSelectDto {
    id!: number | undefined;
    /** 是否启用 */
    isEnable!: boolean | undefined;
    /** 版本名称 */
    name!: string | undefined;
    /** 显示名称 */
    displayName!: string | undefined;
    /** 过期版本 */
    expiringEditionId!: number | undefined;
    /** 月价格 */
    monthlyPrice!: number | undefined;
    /** 季度价格 */
    seasonPrice!: number | undefined;
    /** 年价格 */
    annualPrice!: number | undefined;
    /** 试用天数 */
    trialDayCount!: number | undefined;
    /** 过期后等待天数 */
    waitingDayAfterExpire!: number | undefined;
    /** 是否免费 */
    isFree!: boolean | undefined;
    additionalData!: AdditionalData | undefined;

    constructor(data?: IEditionSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isEnable = data["isEnable"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.expiringEditionId = data["expiringEditionId"];
            this.monthlyPrice = data["monthlyPrice"];
            this.seasonPrice = data["seasonPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.isFree = data["isFree"];
            this.additionalData = data["additionalData"] ? AdditionalData.fromJS(data["additionalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditionSelectDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isEnable"] = this.isEnable;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["expiringEditionId"] = this.expiringEditionId;
        data["monthlyPrice"] = this.monthlyPrice;
        data["seasonPrice"] = this.seasonPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["isFree"] = this.isFree;
        data["additionalData"] = this.additionalData ? this.additionalData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditionSelectDto {
    id: number | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 版本名称 */
    name: string | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 过期版本 */
    expiringEditionId: number | undefined;
    /** 月价格 */
    monthlyPrice: number | undefined;
    /** 季度价格 */
    seasonPrice: number | undefined;
    /** 年价格 */
    annualPrice: number | undefined;
    /** 试用天数 */
    trialDayCount: number | undefined;
    /** 过期后等待天数 */
    waitingDayAfterExpire: number | undefined;
    /** 是否免费 */
    isFree: boolean | undefined;
    additionalData: AdditionalData | undefined;
}

export class FeatureValueDto implements IFeatureValueDto {
    /** 版本功能 */
    childs!: NameValueDto[] | undefined;
    name!: string | undefined;
    value!: string | undefined;

    constructor(data?: IFeatureValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["childs"] && data["childs"].constructor === Array) {
                this.childs = [] as any;
                for (let item of data["childs"])
                    this.childs!.push(NameValueDto.fromJS(item));
            }
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): FeatureValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.childs && this.childs.constructor === Array) {
            data["childs"] = [];
            for (let item of this.childs)
                data["childs"].push(item.toJSON());
        }
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface IFeatureValueDto {
    /** 版本功能 */
    childs: NameValueDto[] | undefined;
    name: string | undefined;
    value: string | undefined;
}

export class EditionsViewOutput implements IEditionsViewOutput {
    /** 所有功能（展示用） */
    allFeatures!: FlatFeatureSelectDto[] | undefined;
    /** 版本及版本的功能 */
    editionWithFeatures!: EditionWithFeaturesDto | undefined;

    constructor(data?: IEditionsViewOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["allFeatures"] && data["allFeatures"].constructor === Array) {
                this.allFeatures = [] as any;
                for (let item of data["allFeatures"])
                    this.allFeatures!.push(FlatFeatureSelectDto.fromJS(item));
            }
            this.editionWithFeatures = data["editionWithFeatures"] ? EditionWithFeaturesDto.fromJS(data["editionWithFeatures"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditionsViewOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditionsViewOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures && this.allFeatures.constructor === Array) {
            data["allFeatures"] = [];
            for (let item of this.allFeatures)
                data["allFeatures"].push(item.toJSON());
        }
        data["editionWithFeatures"] = this.editionWithFeatures ? this.editionWithFeatures.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditionsViewOutput {
    /** 所有功能（展示用） */
    allFeatures: FlatFeatureSelectDto[] | undefined;
    /** 版本及版本的功能 */
    editionWithFeatures: EditionWithFeaturesDto | undefined;
}

export class EditionWithFeaturesDto implements IEditionWithFeaturesDto {
    /** 版本信息 */
    edition!: EditionSelectDto | undefined;
    /** 版本功能 */
    featureValues!: NameValueDto[] | undefined;

    constructor(data?: IEditionWithFeaturesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [] as any;
                for (let item of data["featureValues"])
                    this.featureValues!.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditionWithFeaturesDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionWithFeaturesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditionWithFeaturesDto {
    /** 版本信息 */
    edition: EditionSelectDto | undefined;
    /** 版本功能 */
    featureValues: NameValueDto[] | undefined;
}

/** 上传图片回调参数 */
export class UploadPictureInput implements IUploadPictureInput {
    /** 空间名 */
    bucket!: string;
    /** 名称 */
    name!: string | undefined;
    /** 图片 Key */
    key!: string | undefined;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId!: number | undefined;
    /** 租户Id */
    tenantId!: number | undefined;
    /** 分组Id */
    groupId!: number | undefined;
    /** 图片处理接口 */
    imageMogr2!: string | undefined;

    constructor(data?: IUploadPictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bucket = data["bucket"];
            this.name = data["name"];
            this.key = data["key"];
            this.creatorUserId = data["creatorUserId"];
            this.tenantId = data["tenantId"];
            this.groupId = data["groupId"];
            this.imageMogr2 = data["imageMogr2"];
        }
    }

    static fromJS(data: any): UploadPictureInput {
        data = typeof data === 'object' ? data : {};
        let result = new UploadPictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bucket"] = this.bucket;
        data["name"] = this.name;
        data["key"] = this.key;
        data["creatorUserId"] = this.creatorUserId;
        data["tenantId"] = this.tenantId;
        data["groupId"] = this.groupId;
        data["imageMogr2"] = this.imageMogr2;
        return data; 
    }
}

/** 上传图片回调参数 */
export interface IUploadPictureInput {
    /** 空间名 */
    bucket: string;
    /** 名称 */
    name: string | undefined;
    /** 图片 Key */
    key: string | undefined;
    /** 创建者id (回调用,必须大于0) */
    creatorUserId: number | undefined;
    /** 租户Id */
    tenantId: number | undefined;
    /** 分组Id */
    groupId: number | undefined;
    /** 图片处理接口 */
    imageMogr2: string | undefined;
}

export class UploadPictureOutput implements IUploadPictureOutput {
    id!: number | undefined;
    url!: string | undefined;

    constructor(data?: IUploadPictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): UploadPictureOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UploadPictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        return data; 
    }
}

export interface IUploadPictureOutput {
    id: number | undefined;
    url: string | undefined;
}

export class HostDashboardData implements IHostDashboardData {
    newTenantsCount!: number | undefined;
    newSubscriptionAmount!: number | undefined;
    dashboardPlaceholder1!: number | undefined;
    dashboardPlaceholder2!: number | undefined;
    incomeStatistics!: IncomeStastistic[] | undefined;
    editionStatistics!: TenantEdition[] | undefined;
    expiringTenants!: ExpiringTenant[] | undefined;
    recentTenants!: RecentTenant[] | undefined;
    maxExpiringTenantsShownCount!: number | undefined;
    maxRecentTenantsShownCount!: number | undefined;
    subscriptionEndAlertDayCount!: number | undefined;
    recentTenantsDayCount!: number | undefined;
    subscriptionEndDateStart!: moment.Moment | undefined;
    subscriptionEndDateEnd!: moment.Moment | undefined;
    tenantCreationStartDate!: moment.Moment | undefined;

    constructor(data?: IHostDashboardData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newTenantsCount = data["newTenantsCount"];
            this.newSubscriptionAmount = data["newSubscriptionAmount"];
            this.dashboardPlaceholder1 = data["dashboardPlaceholder1"];
            this.dashboardPlaceholder2 = data["dashboardPlaceholder2"];
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [] as any;
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics!.push(IncomeStastistic.fromJS(item));
            }
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [] as any;
                for (let item of data["editionStatistics"])
                    this.editionStatistics!.push(TenantEdition.fromJS(item));
            }
            if (data["expiringTenants"] && data["expiringTenants"].constructor === Array) {
                this.expiringTenants = [] as any;
                for (let item of data["expiringTenants"])
                    this.expiringTenants!.push(ExpiringTenant.fromJS(item));
            }
            if (data["recentTenants"] && data["recentTenants"].constructor === Array) {
                this.recentTenants = [] as any;
                for (let item of data["recentTenants"])
                    this.recentTenants!.push(RecentTenant.fromJS(item));
            }
            this.maxExpiringTenantsShownCount = data["maxExpiringTenantsShownCount"];
            this.maxRecentTenantsShownCount = data["maxRecentTenantsShownCount"];
            this.subscriptionEndAlertDayCount = data["subscriptionEndAlertDayCount"];
            this.recentTenantsDayCount = data["recentTenantsDayCount"];
            this.subscriptionEndDateStart = data["subscriptionEndDateStart"] ? moment(data["subscriptionEndDateStart"].toString()) : <any>undefined;
            this.subscriptionEndDateEnd = data["subscriptionEndDateEnd"] ? moment(data["subscriptionEndDateEnd"].toString()) : <any>undefined;
            this.tenantCreationStartDate = data["tenantCreationStartDate"] ? moment(data["tenantCreationStartDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HostDashboardData {
        data = typeof data === 'object' ? data : {};
        let result = new HostDashboardData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newTenantsCount"] = this.newTenantsCount;
        data["newSubscriptionAmount"] = this.newSubscriptionAmount;
        data["dashboardPlaceholder1"] = this.dashboardPlaceholder1;
        data["dashboardPlaceholder2"] = this.dashboardPlaceholder2;
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        if (this.expiringTenants && this.expiringTenants.constructor === Array) {
            data["expiringTenants"] = [];
            for (let item of this.expiringTenants)
                data["expiringTenants"].push(item.toJSON());
        }
        if (this.recentTenants && this.recentTenants.constructor === Array) {
            data["recentTenants"] = [];
            for (let item of this.recentTenants)
                data["recentTenants"].push(item.toJSON());
        }
        data["maxExpiringTenantsShownCount"] = this.maxExpiringTenantsShownCount;
        data["maxRecentTenantsShownCount"] = this.maxRecentTenantsShownCount;
        data["subscriptionEndAlertDayCount"] = this.subscriptionEndAlertDayCount;
        data["recentTenantsDayCount"] = this.recentTenantsDayCount;
        data["subscriptionEndDateStart"] = this.subscriptionEndDateStart ? this.subscriptionEndDateStart.toISOString() : <any>undefined;
        data["subscriptionEndDateEnd"] = this.subscriptionEndDateEnd ? this.subscriptionEndDateEnd.toISOString() : <any>undefined;
        data["tenantCreationStartDate"] = this.tenantCreationStartDate ? this.tenantCreationStartDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IHostDashboardData {
    newTenantsCount: number | undefined;
    newSubscriptionAmount: number | undefined;
    dashboardPlaceholder1: number | undefined;
    dashboardPlaceholder2: number | undefined;
    incomeStatistics: IncomeStastistic[] | undefined;
    editionStatistics: TenantEdition[] | undefined;
    expiringTenants: ExpiringTenant[] | undefined;
    recentTenants: RecentTenant[] | undefined;
    maxExpiringTenantsShownCount: number | undefined;
    maxRecentTenantsShownCount: number | undefined;
    subscriptionEndAlertDayCount: number | undefined;
    recentTenantsDayCount: number | undefined;
    subscriptionEndDateStart: moment.Moment | undefined;
    subscriptionEndDateEnd: moment.Moment | undefined;
    tenantCreationStartDate: moment.Moment | undefined;
}

export class IncomeStastistic implements IIncomeStastistic {
    label!: string | undefined;
    date!: moment.Moment | undefined;
    amount!: number | undefined;

    constructor(data?: IIncomeStastistic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.amount = data["amount"];
        }
    }

    static fromJS(data: any): IncomeStastistic {
        data = typeof data === 'object' ? data : {};
        let result = new IncomeStastistic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IIncomeStastistic {
    label: string | undefined;
    date: moment.Moment | undefined;
    amount: number | undefined;
}

export class TenantEdition implements ITenantEdition {
    label!: string | undefined;
    value!: number | undefined;

    constructor(data?: ITenantEdition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): TenantEdition {
        data = typeof data === 'object' ? data : {};
        let result = new TenantEdition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITenantEdition {
    label: string | undefined;
    value: number | undefined;
}

export class ExpiringTenant implements IExpiringTenant {
    tenantName!: string | undefined;
    remainingDayCount!: number | undefined;

    constructor(data?: IExpiringTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantName = data["tenantName"];
            this.remainingDayCount = data["remainingDayCount"];
        }
    }

    static fromJS(data: any): ExpiringTenant {
        data = typeof data === 'object' ? data : {};
        let result = new ExpiringTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        data["remainingDayCount"] = this.remainingDayCount;
        return data; 
    }
}

export interface IExpiringTenant {
    tenantName: string | undefined;
    remainingDayCount: number | undefined;
}

export class RecentTenant implements IRecentTenant {
    id!: number | undefined;
    name!: string | undefined;
    creationTime!: moment.Moment | undefined;

    constructor(data?: IRecentTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RecentTenant {
        data = typeof data === 'object' ? data : {};
        let result = new RecentTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRecentTenant {
    id: number | undefined;
    name: string | undefined;
    creationTime: moment.Moment | undefined;
}

export class GetIncomeStatisticsDataOutput implements IGetIncomeStatisticsDataOutput {
    incomeStatistics!: IncomeStastistic[] | undefined;

    constructor(data?: IGetIncomeStatisticsDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [] as any;
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics!.push(IncomeStastistic.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetIncomeStatisticsDataOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomeStatisticsDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[] | undefined;
}

export class GetEditionTenantStatisticsOutput implements IGetEditionTenantStatisticsOutput {
    editionStatistics!: TenantEdition[] | undefined;

    constructor(data?: IGetEditionTenantStatisticsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [] as any;
                for (let item of data["editionStatistics"])
                    this.editionStatistics!.push(TenantEdition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionTenantStatisticsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetEditionTenantStatisticsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[] | undefined;
}

export class HostSettingsEditDto implements IHostSettingsEditDto {
    /** 基本信息 */
    general!: GeneralSettingsEditDto;
    /** 用户管理 */
    userManagement!: HostUserManagementSettingsEditDto;
    /** 邮件 */
    email!: EmailSettingsEditDto;
    /** 租户设置 */
    tenantManagement!: TenantManagementSettingsEditDto;
    /** 安全 */
    security!: SecuritySettingsEditDto;
    /** 第三方登陆 */
    externalAuthentication!: ExternalAuthenticationEditDto;
    /** 短信设置 */
    smsSettings!: SMSSettingsEditDto;

    constructor(data?: IHostSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.general = new GeneralSettingsEditDto();
            this.userManagement = new HostUserManagementSettingsEditDto();
            this.email = new EmailSettingsEditDto();
            this.tenantManagement = new TenantManagementSettingsEditDto();
            this.security = new SecuritySettingsEditDto();
            this.externalAuthentication = new ExternalAuthenticationEditDto();
            this.smsSettings = new SMSSettingsEditDto();
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.externalAuthentication = data["externalAuthentication"] ? ExternalAuthenticationEditDto.fromJS(data["externalAuthentication"]) : new ExternalAuthenticationEditDto();
            this.smsSettings = data["smsSettings"] ? SMSSettingsEditDto.fromJS(data["smsSettings"]) : new SMSSettingsEditDto();
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        data["externalAuthentication"] = this.externalAuthentication ? this.externalAuthentication.toJSON() : <any>undefined;
        data["smsSettings"] = this.smsSettings ? this.smsSettings.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHostSettingsEditDto {
    /** 基本信息 */
    general: GeneralSettingsEditDto;
    /** 用户管理 */
    userManagement: HostUserManagementSettingsEditDto;
    /** 邮件 */
    email: EmailSettingsEditDto;
    /** 租户设置 */
    tenantManagement: TenantManagementSettingsEditDto;
    /** 安全 */
    security: SecuritySettingsEditDto;
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto;
    /** 短信设置 */
    smsSettings: SMSSettingsEditDto;
}

export class GeneralSettingsEditDto implements IGeneralSettingsEditDto {
    /** 时区 */
    timezone!: string | undefined;
    /** 这个值只用于比较用户默认时区 */
    timezoneForComparison!: string | undefined;

    constructor(data?: IGeneralSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timezone = data["timezone"];
            this.timezoneForComparison = data["timezoneForComparison"];
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data; 
    }
}

export interface IGeneralSettingsEditDto {
    /** 时区 */
    timezone: string | undefined;
    /** 这个值只用于比较用户默认时区 */
    timezoneForComparison: string | undefined;
}

export class HostUserManagementSettingsEditDto implements IHostUserManagementSettingsEditDto {
    /** 必须验证邮箱地址后才能登录 */
    isEmailConfirmationRequiredForLogin!: boolean | undefined;

    constructor(data?: IHostUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        return data; 
    }
}

export interface IHostUserManagementSettingsEditDto {
    /** 必须验证邮箱地址后才能登录 */
    isEmailConfirmationRequiredForLogin: boolean | undefined;
}

export class EmailSettingsEditDto implements IEmailSettingsEditDto {
    /** 默认发送邮箱 */
    defaultFromAddress!: string | undefined;
    /** 默认发件人名字 */
    defaultFromDisplayName!: string | undefined;
    /** SMTP 服务器地址 */
    smtpHost!: string | undefined;
    /** SMTP 端口 */
    smtpPort!: number | undefined;
    /** SMTP 用户名 */
    smtpUserName!: string | undefined;
    /** SMTP 密码 */
    smtpPassword!: string | undefined;
    /** SMTP 域名 */
    smtpDomain!: string | undefined;
    /** 使用SSL */
    smtpEnableSsl!: boolean | undefined;
    /** 默认身份验证 */
    smtpUseDefaultCredentials!: boolean | undefined;

    constructor(data?: IEmailSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultFromAddress = data["defaultFromAddress"];
            this.defaultFromDisplayName = data["defaultFromDisplayName"];
            this.smtpHost = data["smtpHost"];
            this.smtpPort = data["smtpPort"];
            this.smtpUserName = data["smtpUserName"];
            this.smtpPassword = data["smtpPassword"];
            this.smtpDomain = data["smtpDomain"];
            this.smtpEnableSsl = data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"];
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data; 
    }
}

export interface IEmailSettingsEditDto {
    /** 默认发送邮箱 */
    defaultFromAddress: string | undefined;
    /** 默认发件人名字 */
    defaultFromDisplayName: string | undefined;
    /** SMTP 服务器地址 */
    smtpHost: string | undefined;
    /** SMTP 端口 */
    smtpPort: number | undefined;
    /** SMTP 用户名 */
    smtpUserName: string | undefined;
    /** SMTP 密码 */
    smtpPassword: string | undefined;
    /** SMTP 域名 */
    smtpDomain: string | undefined;
    /** 使用SSL */
    smtpEnableSsl: boolean | undefined;
    /** 默认身份验证 */
    smtpUseDefaultCredentials: boolean | undefined;
}

/** 租户管理设置 */
export class TenantManagementSettingsEditDto implements ITenantManagementSettingsEditDto {
    /** 允许租户注册 */
    allowSelfRegistration!: boolean | undefined;
    /** 新注册租户默认激活 */
    isNewRegisteredTenantActiveByDefault!: boolean | undefined;
    /** 开启(图形)验证码 */
    useCaptchaOnRegistration!: boolean | undefined;
    /** 默认版本Id */
    defaultEditionId!: number | undefined;

    constructor(data?: ITenantManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
            this.defaultEditionId = data["defaultEditionId"];
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        data["defaultEditionId"] = this.defaultEditionId;
        return data; 
    }
}

/** 租户管理设置 */
export interface ITenantManagementSettingsEditDto {
    /** 允许租户注册 */
    allowSelfRegistration: boolean | undefined;
    /** 新注册租户默认激活 */
    isNewRegisteredTenantActiveByDefault: boolean | undefined;
    /** 开启(图形)验证码 */
    useCaptchaOnRegistration: boolean | undefined;
    /** 默认版本Id */
    defaultEditionId: number | undefined;
}

export class SecuritySettingsEditDto implements ISecuritySettingsEditDto {
    /** 使用默认设置 */
    useDefaultPasswordComplexitySettings!: boolean | undefined;
    /** 密码复杂性 */
    passwordComplexity!: PasswordComplexitySetting | undefined;
    /** 默认密码复杂性 */
    defaultPasswordComplexity!: PasswordComplexitySetting | undefined;
    /** 用户锁定 */
    userLockOut!: UserLockOutSettingsEditDto | undefined;
    /** 验证码设置 */
    verificationCode!: VerificationCodeSettingsEditDto | undefined;

    constructor(data?: ISecuritySettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : <any>undefined;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : <any>undefined;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : <any>undefined;
            this.verificationCode = data["verificationCode"] ? VerificationCodeSettingsEditDto.fromJS(data["verificationCode"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : <any>undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : <any>undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : <any>undefined;
        data["verificationCode"] = this.verificationCode ? this.verificationCode.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISecuritySettingsEditDto {
    /** 使用默认设置 */
    useDefaultPasswordComplexitySettings: boolean | undefined;
    /** 密码复杂性 */
    passwordComplexity: PasswordComplexitySetting | undefined;
    /** 默认密码复杂性 */
    defaultPasswordComplexity: PasswordComplexitySetting | undefined;
    /** 用户锁定 */
    userLockOut: UserLockOutSettingsEditDto | undefined;
    /** 验证码设置 */
    verificationCode: VerificationCodeSettingsEditDto | undefined;
}

/** 第三方登陆配置 */
export class ExternalAuthenticationEditDto implements IExternalAuthenticationEditDto {
    /** 激活账号选项 Id Vapps.Enums.UserActivationOption */
    userActivationId!: number | undefined;
    /** 需要用户名 */
    requiredUserName!: boolean | undefined;
    /** 需要邮箱 */
    requiredEmail!: boolean | undefined;
    /** 需要手机 */
    requiredTelephone!: boolean | undefined;
    /** 使用手机作为用户名 */
    useTelephoneforUsername!: boolean | undefined;
    /** 第三方登陆供应商 */
    externalAuthenticationProviders!: ExternalAuthenticationProviderEditDto[] | undefined;

    constructor(data?: IExternalAuthenticationEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userActivationId = data["userActivationId"];
            this.requiredUserName = data["requiredUserName"];
            this.requiredEmail = data["requiredEmail"];
            this.requiredTelephone = data["requiredTelephone"];
            this.useTelephoneforUsername = data["useTelephoneforUsername"];
            if (data["externalAuthenticationProviders"] && data["externalAuthenticationProviders"].constructor === Array) {
                this.externalAuthenticationProviders = [] as any;
                for (let item of data["externalAuthenticationProviders"])
                    this.externalAuthenticationProviders!.push(ExternalAuthenticationProviderEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExternalAuthenticationEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticationEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userActivationId"] = this.userActivationId;
        data["requiredUserName"] = this.requiredUserName;
        data["requiredEmail"] = this.requiredEmail;
        data["requiredTelephone"] = this.requiredTelephone;
        data["useTelephoneforUsername"] = this.useTelephoneforUsername;
        if (this.externalAuthenticationProviders && this.externalAuthenticationProviders.constructor === Array) {
            data["externalAuthenticationProviders"] = [];
            for (let item of this.externalAuthenticationProviders)
                data["externalAuthenticationProviders"].push(item.toJSON());
        }
        return data; 
    }
}

/** 第三方登陆配置 */
export interface IExternalAuthenticationEditDto {
    /** 激活账号选项 Id Vapps.Enums.UserActivationOption */
    userActivationId: number | undefined;
    /** 需要用户名 */
    requiredUserName: boolean | undefined;
    /** 需要邮箱 */
    requiredEmail: boolean | undefined;
    /** 需要手机 */
    requiredTelephone: boolean | undefined;
    /** 使用手机作为用户名 */
    useTelephoneforUsername: boolean | undefined;
    /** 第三方登陆供应商 */
    externalAuthenticationProviders: ExternalAuthenticationProviderEditDto[] | undefined;
}

export class SMSSettingsEditDto implements ISMSSettingsEditDto {
    /** 是否启用图形验证码 */
    useCaptchaToVerification!: boolean | undefined;
    /** 注册模板 */
    registerVerificationTempId!: number | undefined;
    /** 修改密码模板 */
    changePasswordVerificationTempId!: number | undefined;
    /** 绑定手机模板 */
    unBindingPhoneVerificationTempId!: number | undefined;
    /** 绑定手机模板 */
    bindingPhoneVerificationTempId!: number | undefined;
    /** 登陆模板 */
    loginVerificationTempId!: number | undefined;
    /** 手机验证模板 */
    phoneVerificationTempId!: number | undefined;

    constructor(data?: ISMSSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.useCaptchaToVerification = data["useCaptchaToVerification"];
            this.registerVerificationTempId = data["registerVerificationTempId"];
            this.changePasswordVerificationTempId = data["changePasswordVerificationTempId"];
            this.unBindingPhoneVerificationTempId = data["unBindingPhoneVerificationTempId"];
            this.bindingPhoneVerificationTempId = data["bindingPhoneVerificationTempId"];
            this.loginVerificationTempId = data["loginVerificationTempId"];
            this.phoneVerificationTempId = data["phoneVerificationTempId"];
        }
    }

    static fromJS(data: any): SMSSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SMSSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useCaptchaToVerification"] = this.useCaptchaToVerification;
        data["registerVerificationTempId"] = this.registerVerificationTempId;
        data["changePasswordVerificationTempId"] = this.changePasswordVerificationTempId;
        data["unBindingPhoneVerificationTempId"] = this.unBindingPhoneVerificationTempId;
        data["bindingPhoneVerificationTempId"] = this.bindingPhoneVerificationTempId;
        data["loginVerificationTempId"] = this.loginVerificationTempId;
        data["phoneVerificationTempId"] = this.phoneVerificationTempId;
        return data; 
    }
}

export interface ISMSSettingsEditDto {
    /** 是否启用图形验证码 */
    useCaptchaToVerification: boolean | undefined;
    /** 注册模板 */
    registerVerificationTempId: number | undefined;
    /** 修改密码模板 */
    changePasswordVerificationTempId: number | undefined;
    /** 绑定手机模板 */
    unBindingPhoneVerificationTempId: number | undefined;
    /** 绑定手机模板 */
    bindingPhoneVerificationTempId: number | undefined;
    /** 登陆模板 */
    loginVerificationTempId: number | undefined;
    /** 手机验证模板 */
    phoneVerificationTempId: number | undefined;
}

/** 密码复杂性设置 */
export class PasswordComplexitySetting implements IPasswordComplexitySetting {
    /** 必须包含数字 */
    requireDigit!: boolean | undefined;
    /** 必须包含小写字母 */
    requireLowercase!: boolean | undefined;
    /** 必须包含大写 */
    requireUppercase!: boolean | undefined;
    /** 必须包含非字母数字(符号) */
    requireNonAlphanumeric!: boolean | undefined;
    /** 最小长度限制 */
    requiredLength!: number | undefined;

    constructor(data?: IPasswordComplexitySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.requireDigit = data["requireDigit"];
            this.requireLowercase = data["requireLowercase"];
            this.requireUppercase = data["requireUppercase"];
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"];
            this.requiredLength = data["requiredLength"];
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireUppercase"] = this.requireUppercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requiredLength"] = this.requiredLength;
        return data; 
    }
}

/** 密码复杂性设置 */
export interface IPasswordComplexitySetting {
    /** 必须包含数字 */
    requireDigit: boolean | undefined;
    /** 必须包含小写字母 */
    requireLowercase: boolean | undefined;
    /** 必须包含大写 */
    requireUppercase: boolean | undefined;
    /** 必须包含非字母数字(符号) */
    requireNonAlphanumeric: boolean | undefined;
    /** 最小长度限制 */
    requiredLength: number | undefined;
}

/** 账户锁定设置 */
export class UserLockOutSettingsEditDto implements IUserLockOutSettingsEditDto {
    /** 启用 */
    isEnabled!: boolean | undefined;
    /** 最大访问失败(密码错误)次数 */
    maxFailedAccessAttemptsBeforeLockout!: number | undefined;
    /** 默认锁定时间（单位：秒） */
    defaultAccountLockoutSeconds!: number | undefined;

    constructor(data?: IUserLockOutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"];
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data; 
    }
}

/** 账户锁定设置 */
export interface IUserLockOutSettingsEditDto {
    /** 启用 */
    isEnabled: boolean | undefined;
    /** 最大访问失败(密码错误)次数 */
    maxFailedAccessAttemptsBeforeLockout: number | undefined;
    /** 默认锁定时间（单位：秒） */
    defaultAccountLockoutSeconds: number | undefined;
}

export class VerificationCodeSettingsEditDto implements IVerificationCodeSettingsEditDto {
    /** 启用验证码 */
    isEnabled!: boolean | undefined;
    /** 有效秒数 */
    availableSecond!: number | undefined;
    /** 验证码最小发送间隔 */
    minimumSendInterval!: number | undefined;

    constructor(data?: IVerificationCodeSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.availableSecond = data["availableSecond"];
            this.minimumSendInterval = data["minimumSendInterval"];
        }
    }

    static fromJS(data: any): VerificationCodeSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VerificationCodeSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["availableSecond"] = this.availableSecond;
        data["minimumSendInterval"] = this.minimumSendInterval;
        return data; 
    }
}

export interface IVerificationCodeSettingsEditDto {
    /** 启用验证码 */
    isEnabled: boolean | undefined;
    /** 有效秒数 */
    availableSecond: number | undefined;
    /** 验证码最小发送间隔 */
    minimumSendInterval: number | undefined;
}

export class ExternalAuthenticationProviderEditDto implements IExternalAuthenticationProviderEditDto {
    /** 第三方登陆名称 */
    providerName!: string | undefined;
    /** 启用 */
    isEnabled!: boolean | undefined;
    /** App id */
    appId!: string | undefined;
    /** App secret */
    appSecret!: string | undefined;
    /** 在登录页面显示 */
    showOnLoginPage!: boolean | undefined;

    constructor(data?: IExternalAuthenticationProviderEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.providerName = data["providerName"];
            this.isEnabled = data["isEnabled"];
            this.appId = data["appId"];
            this.appSecret = data["appSecret"];
            this.showOnLoginPage = data["showOnLoginPage"];
        }
    }

    static fromJS(data: any): ExternalAuthenticationProviderEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticationProviderEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["providerName"] = this.providerName;
        data["isEnabled"] = this.isEnabled;
        data["appId"] = this.appId;
        data["appSecret"] = this.appSecret;
        data["showOnLoginPage"] = this.showOnLoginPage;
        return data; 
    }
}

export interface IExternalAuthenticationProviderEditDto {
    /** 第三方登陆名称 */
    providerName: string | undefined;
    /** 启用 */
    isEnabled: boolean | undefined;
    /** App id */
    appId: string | undefined;
    /** App secret */
    appSecret: string | undefined;
    /** 在登录页面显示 */
    showOnLoginPage: boolean | undefined;
}

export class SendTestEmailInput implements ISendTestEmailInput {
    /** 目标邮箱地址 */
    emailAddress!: string;

    constructor(data?: ISendTestEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendTestEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendTestEmailInput {
    /** 目标邮箱地址 */
    emailAddress: string;
}

export class InstallDto implements IInstallDto {
    /** 数据库连接字符串 */
    connectionString!: string;
    /** 管理员密码(Admin) */
    adminPassword!: string;
    /** Url */
    webSiteUrl!: string;
    /** 服务端(Api) Url */
    serverUrl!: string | undefined;
    /** 默认语言 */
    defaultLanguage!: string;
    /** 邮箱设置 */
    smtpSettings!: EmailSettingsEditDto | undefined;

    constructor(data?: IInstallDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.connectionString = data["connectionString"];
            this.adminPassword = data["adminPassword"];
            this.webSiteUrl = data["webSiteUrl"];
            this.serverUrl = data["serverUrl"];
            this.defaultLanguage = data["defaultLanguage"];
            this.smtpSettings = data["smtpSettings"] ? EmailSettingsEditDto.fromJS(data["smtpSettings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InstallDto {
        data = typeof data === 'object' ? data : {};
        let result = new InstallDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["connectionString"] = this.connectionString;
        data["adminPassword"] = this.adminPassword;
        data["webSiteUrl"] = this.webSiteUrl;
        data["serverUrl"] = this.serverUrl;
        data["defaultLanguage"] = this.defaultLanguage;
        data["smtpSettings"] = this.smtpSettings ? this.smtpSettings.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IInstallDto {
    /** 数据库连接字符串 */
    connectionString: string;
    /** 管理员密码(Admin) */
    adminPassword: string;
    /** Url */
    webSiteUrl: string;
    /** 服务端(Api) Url */
    serverUrl: string | undefined;
    /** 默认语言 */
    defaultLanguage: string;
    /** 邮箱设置 */
    smtpSettings: EmailSettingsEditDto | undefined;
}

export class AppSettingsJsonDto implements IAppSettingsJsonDto {
    webSiteUrl!: string | undefined;
    serverSiteUrl!: string | undefined;
    languages!: NameValue[] | undefined;

    constructor(data?: IAppSettingsJsonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.webSiteUrl = data["webSiteUrl"];
            this.serverSiteUrl = data["serverSiteUrl"];
            if (data["languages"] && data["languages"].constructor === Array) {
                this.languages = [] as any;
                for (let item of data["languages"])
                    this.languages!.push(NameValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppSettingsJsonDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppSettingsJsonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["webSiteUrl"] = this.webSiteUrl;
        data["serverSiteUrl"] = this.serverSiteUrl;
        if (this.languages && this.languages.constructor === Array) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAppSettingsJsonDto {
    webSiteUrl: string | undefined;
    serverSiteUrl: string | undefined;
    languages: NameValue[] | undefined;
}

export class NameValue implements INameValue {
    name!: string | undefined;
    value!: string | undefined;

    constructor(data?: INameValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValue {
        data = typeof data === 'object' ? data : {};
        let result = new NameValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValue {
    name: string | undefined;
    value: string | undefined;
}

export class CheckDatabaseOutput implements ICheckDatabaseOutput {
    isDatabaseExist!: boolean | undefined;

    constructor(data?: ICheckDatabaseOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isDatabaseExist = data["isDatabaseExist"];
        }
    }

    static fromJS(data: any): CheckDatabaseOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CheckDatabaseOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDatabaseExist"] = this.isDatabaseExist;
        return data; 
    }
}

export interface ICheckDatabaseOutput {
    isDatabaseExist: boolean | undefined;
}

export class InvoiceDto implements IInvoiceDto {
    amount!: number | undefined;
    editionDisplayName!: string | undefined;
    invoiceNo!: string | undefined;
    invoiceDate!: moment.Moment | undefined;
    tenantLegalName!: string | undefined;
    tenantAddress!: string[] | undefined;
    tenantTaxNo!: string | undefined;

    constructor(data?: IInvoiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.amount = data["amount"];
            this.editionDisplayName = data["editionDisplayName"];
            this.invoiceNo = data["invoiceNo"];
            this.invoiceDate = data["invoiceDate"] ? moment(data["invoiceDate"].toString()) : <any>undefined;
            this.tenantLegalName = data["tenantLegalName"];
            if (data["tenantAddress"] && data["tenantAddress"].constructor === Array) {
                this.tenantAddress = [] as any;
                for (let item of data["tenantAddress"])
                    this.tenantAddress!.push(item);
            }
            this.tenantTaxNo = data["tenantTaxNo"];
        }
    }

    static fromJS(data: any): InvoiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["editionDisplayName"] = this.editionDisplayName;
        data["invoiceNo"] = this.invoiceNo;
        data["invoiceDate"] = this.invoiceDate ? this.invoiceDate.toISOString() : <any>undefined;
        data["tenantLegalName"] = this.tenantLegalName;
        if (this.tenantAddress && this.tenantAddress.constructor === Array) {
            data["tenantAddress"] = [];
            for (let item of this.tenantAddress)
                data["tenantAddress"].push(item);
        }
        data["tenantTaxNo"] = this.tenantTaxNo;
        return data; 
    }
}

export interface IInvoiceDto {
    amount: number | undefined;
    editionDisplayName: string | undefined;
    invoiceNo: string | undefined;
    invoiceDate: moment.Moment | undefined;
    tenantLegalName: string | undefined;
    tenantAddress: string[] | undefined;
    tenantTaxNo: string | undefined;
}

export class CreateInvoiceDto implements ICreateInvoiceDto {
    subscriptionPaymentId!: number | undefined;

    constructor(data?: ICreateInvoiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.subscriptionPaymentId = data["subscriptionPaymentId"];
        }
    }

    static fromJS(data: any): CreateInvoiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateInvoiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subscriptionPaymentId"] = this.subscriptionPaymentId;
        return data; 
    }
}

export interface ICreateInvoiceDto {
    subscriptionPaymentId: number | undefined;
}

export class GetLanguagesOutput implements IGetLanguagesOutput {
    defaultLanguageName!: string | undefined;
    items!: ApplicationLanguageListDto[] | undefined;

    constructor(data?: IGetLanguagesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultLanguageName = data["defaultLanguageName"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ApplicationLanguageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLanguagesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguagesOutput {
    defaultLanguageName: string | undefined;
    items: ApplicationLanguageListDto[] | undefined;
}

export class ApplicationLanguageListDto implements IApplicationLanguageListDto {
    tenantId!: number | undefined;
    name!: string | undefined;
    displayName!: string | undefined;
    icon!: string | undefined;
    isDisabled!: boolean | undefined;
    isDeleted!: boolean | undefined;
    deleterUserId!: number | undefined;
    deletionTime!: moment.Moment | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IApplicationLanguageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.isDisabled = data["isDisabled"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationLanguageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IApplicationLanguageListDto {
    tenantId: number | undefined;
    name: string | undefined;
    displayName: string | undefined;
    icon: string | undefined;
    isDisabled: boolean | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class GetLanguageForEditOutput implements IGetLanguageForEditOutput {
    language!: ApplicationLanguageEditDto | undefined;
    languageNames!: ComboboxItemDto[] | undefined;
    flags!: ComboboxItemDto[] | undefined;

    constructor(data?: IGetLanguageForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : <any>undefined;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [] as any;
                for (let item of data["languageNames"])
                    this.languageNames!.push(ComboboxItemDto.fromJS(item));
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [] as any;
                for (let item of data["flags"])
                    this.flags!.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJSON());
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto | undefined;
    languageNames: ComboboxItemDto[] | undefined;
    flags: ComboboxItemDto[] | undefined;
}

export class ApplicationLanguageEditDto implements IApplicationLanguageEditDto {
    id!: number | undefined;
    name!: string;
    icon!: string | undefined;
    /** Mapped from Language.IsDisabled with using manual mapping in CustomDtoMapper.cs */
    isEnabled!: boolean | undefined;

    constructor(data?: IApplicationLanguageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.icon = data["icon"];
            this.isEnabled = data["isEnabled"];
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationLanguageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface IApplicationLanguageEditDto {
    id: number | undefined;
    name: string;
    icon: string | undefined;
    /** Mapped from Language.IsDisabled with using manual mapping in CustomDtoMapper.cs */
    isEnabled: boolean | undefined;
}

export class ComboboxItemDto implements IComboboxItemDto {
    value!: string | undefined;
    displayText!: string | undefined;
    isSelected!: boolean | undefined;

    constructor(data?: IComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface IComboboxItemDto {
    value: string | undefined;
    displayText: string | undefined;
    isSelected: boolean | undefined;
}

export class CreateOrUpdateLanguageInput implements ICreateOrUpdateLanguageInput {
    language!: ApplicationLanguageEditDto;

    constructor(data?: ICreateOrUpdateLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.language = new ApplicationLanguageEditDto();
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto;
}

export class SetDefaultLanguageInput implements ISetDefaultLanguageInput {
    name!: string;

    constructor(data?: ISetDefaultLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        data = typeof data === 'object' ? data : {};
        let result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ISetDefaultLanguageInput {
    name: string;
}

export class PagedResultDtoOfLanguageTextListDto implements IPagedResultDtoOfLanguageTextListDto {
    totalCount!: number | undefined;
    items!: LanguageTextListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(LanguageTextListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLanguageTextListDto {
    totalCount: number | undefined;
    items: LanguageTextListDto[] | undefined;
}

export class LanguageTextListDto implements ILanguageTextListDto {
    key!: string | undefined;
    baseValue!: string | undefined;
    targetValue!: string | undefined;

    constructor(data?: ILanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"];
            this.baseValue = data["baseValue"];
            this.targetValue = data["targetValue"];
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data; 
    }
}

export interface ILanguageTextListDto {
    key: string | undefined;
    baseValue: string | undefined;
    targetValue: string | undefined;
}

export class UpdateLanguageTextInput implements IUpdateLanguageTextInput {
    /** 语言名称 */
    languageName!: string;
    /** 源名称 */
    sourceName!: string;
    /** 唯一标识符(Key) */
    key!: string;
    /** 值 */
    value!: string;

    constructor(data?: IUpdateLanguageTextInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
            this.sourceName = data["sourceName"];
            this.key = data["key"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IUpdateLanguageTextInput {
    /** 语言名称 */
    languageName: string;
    /** 源名称 */
    sourceName: string;
    /** 唯一标识符(Key) */
    key: string;
    /** 值 */
    value: string;
}

export class PagedResultDtoOfLogisticsListDto implements IPagedResultDtoOfLogisticsListDto {
    totalCount!: number | undefined;
    items!: LogisticsListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLogisticsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(LogisticsListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLogisticsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLogisticsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLogisticsListDto {
    totalCount: number | undefined;
    items: LogisticsListDto[] | undefined;
}

export class LogisticsListDto implements ILogisticsListDto {
    /** 快递名称 */
    name!: string | undefined;
    /** 名称前缀 */
    prefix!: string | undefined;
    /** 快递 Key */
    key!: string | undefined;
    /** 快递简写 */
    memo!: string | undefined;
    id!: number | undefined;

    constructor(data?: ILogisticsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.prefix = data["prefix"];
            this.key = data["key"];
            this.memo = data["memo"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): LogisticsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new LogisticsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["prefix"] = this.prefix;
        data["key"] = this.key;
        data["memo"] = this.memo;
        data["id"] = this.id;
        return data; 
    }
}

export interface ILogisticsListDto {
    /** 快递名称 */
    name: string | undefined;
    /** 名称前缀 */
    prefix: string | undefined;
    /** 快递 Key */
    key: string | undefined;
    /** 快递简写 */
    memo: string | undefined;
    id: number | undefined;
}

export class GetLogisticsForEditOutput implements IGetLogisticsForEditOutput {
    /** 快递名称 */
    name!: string | undefined;
    /** 快递 Key */
    key!: string | undefined;
    /** 快递简写 */
    memo!: string | undefined;
    id!: number | undefined;

    constructor(data?: IGetLogisticsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.key = data["key"];
            this.memo = data["memo"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetLogisticsForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLogisticsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["memo"] = this.memo;
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetLogisticsForEditOutput {
    /** 快递名称 */
    name: string | undefined;
    /** 快递 Key */
    key: string | undefined;
    /** 快递简写 */
    memo: string | undefined;
    id: number | undefined;
}

export class CreateOrUpdateLogisticsInput implements ICreateOrUpdateLogisticsInput {
    /** 物流Id */
    id!: number | undefined;
    /** 快递名称 */
    name!: string | undefined;
    /** 快递 Key */
    key!: string | undefined;
    /** 快递简写 */
    memo!: string | undefined;
    /** 排序(用户绑定物流可以自定义排序) */
    displayOrder!: number | undefined;

    constructor(data?: ICreateOrUpdateLogisticsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.key = data["key"];
            this.memo = data["memo"];
            this.displayOrder = data["displayOrder"];
        }
    }

    static fromJS(data: any): CreateOrUpdateLogisticsInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateLogisticsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["key"] = this.key;
        data["memo"] = this.memo;
        data["displayOrder"] = this.displayOrder;
        return data; 
    }
}

export interface ICreateOrUpdateLogisticsInput {
    /** 物流Id */
    id: number | undefined;
    /** 快递名称 */
    name: string | undefined;
    /** 快递 Key */
    key: string | undefined;
    /** 快递简写 */
    memo: string | undefined;
    /** 排序(用户绑定物流可以自定义排序) */
    displayOrder: number | undefined;
}

export class PagedResultDtoOfTenantLogisticsDto implements IPagedResultDtoOfTenantLogisticsDto {
    totalCount!: number | undefined;
    items!: TenantLogisticsDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTenantLogisticsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(TenantLogisticsDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantLogisticsDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTenantLogisticsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantLogisticsDto {
    totalCount: number | undefined;
    items: TenantLogisticsDto[] | undefined;
}

export class TenantLogisticsDto implements ITenantLogisticsDto {
    /** 快递名称 */
    name!: string | undefined;
    /** 排序 */
    displayOrder!: number | undefined;
    id!: number | undefined;

    constructor(data?: ITenantLogisticsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayOrder = data["displayOrder"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLogisticsDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantLogisticsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayOrder"] = this.displayOrder;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantLogisticsDto {
    /** 快递名称 */
    name: string | undefined;
    /** 排序 */
    displayOrder: number | undefined;
    id: number | undefined;
}

export class CreateOrUpdateTenantLogisticsInput implements ICreateOrUpdateTenantLogisticsInput {
    /** 自选物流Id */
    id!: number | undefined;
    /** 平台物流Id */
    logisticsId!: number | undefined;
    /** 排序(用户绑定物流可以自定义排序) */
    displayOrder!: number | undefined;

    constructor(data?: ICreateOrUpdateTenantLogisticsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.logisticsId = data["logisticsId"];
            this.displayOrder = data["displayOrder"];
        }
    }

    static fromJS(data: any): CreateOrUpdateTenantLogisticsInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTenantLogisticsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["logisticsId"] = this.logisticsId;
        data["displayOrder"] = this.displayOrder;
        return data; 
    }
}

export interface ICreateOrUpdateTenantLogisticsInput {
    /** 自选物流Id */
    id: number | undefined;
    /** 平台物流Id */
    logisticsId: number | undefined;
    /** 排序(用户绑定物流可以自定义排序) */
    displayOrder: number | undefined;
}

export class TokensListDto implements ITokensListDto {
    name!: string | undefined;
    value!: string | undefined;

    constructor(data?: ITokensListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): TokensListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TokensListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITokensListDto {
    name: string | undefined;
    value: string | undefined;
}

export class GetNotificationsOutput implements IGetNotificationsOutput {
    /** 未读消息数量 */
    unreadCount!: number | undefined;
    totalCount!: number | undefined;
    items!: UserNotification[] | undefined;

    constructor(data?: IGetNotificationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unreadCount = data["unreadCount"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationsOutput {
    /** 未读消息数量 */
    unreadCount: number | undefined;
    totalCount: number | undefined;
    items: UserNotification[] | undefined;
}

export class UserNotification implements IUserNotification {
    tenantId!: number | undefined;
    userId!: number | undefined;
    /** 0 = Unread ; 1 = Read */
    state!: UserNotificationState | undefined;
    notification!: TenantNotification | undefined;
    id!: string | undefined;

    constructor(data?: IUserNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.state = data["state"];
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserNotification {
        data = typeof data === 'object' ? data : {};
        let result = new UserNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserNotification {
    tenantId: number | undefined;
    userId: number | undefined;
    /** 0 = Unread ; 1 = Read */
    state: UserNotificationState | undefined;
    notification: TenantNotification | undefined;
    id: string | undefined;
}

export class TenantNotification implements ITenantNotification {
    tenantId!: number | undefined;
    notificationName!: string | undefined;
    data!: NotificationData | undefined;
    entityType!: string | undefined;
    entityTypeName!: string | undefined;
    entityId!: any | undefined;
    /** 0 = Info ; 1 = Success ; 2 = Warn ; 3 = Error ; 4 = Fatal */
    severity!: TenantNotificationSeverity | undefined;
    creationTime!: moment.Moment | undefined;
    id!: string | undefined;

    constructor(data?: ITenantNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.notificationName = data["notificationName"];
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : <any>undefined;
            this.entityType = data["entityType"];
            this.entityTypeName = data["entityTypeName"];
            this.entityId = data["entityId"];
            this.severity = data["severity"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantNotification {
        data = typeof data === 'object' ? data : {};
        let result = new TenantNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        data["entityId"] = this.entityId;
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantNotification {
    tenantId: number | undefined;
    notificationName: string | undefined;
    data: NotificationData | undefined;
    entityType: string | undefined;
    entityTypeName: string | undefined;
    entityId: any | undefined;
    /** 0 = Info ; 1 = Success ; 2 = Warn ; 3 = Error ; 4 = Fatal */
    severity: TenantNotificationSeverity | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class NotificationData implements INotificationData {
    type!: string | undefined;
    properties!: { [key: string] : any; } | undefined;

    constructor(data?: INotificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            if (data["properties"]) {
                this.properties = {} as any;
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties![key] = data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }
}

export interface INotificationData {
    type: string | undefined;
    properties: { [key: string] : any; } | undefined;
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id!: string | undefined;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfGuid {
    id: string | undefined;
}

export class GetNotificationSettingsOutput implements IGetNotificationSettingsOutput {
    /** 是否订阅 */
    receiveNotifications!: boolean | undefined;
    /** 订阅消息 */
    notifications!: NotificationSubscriptionWithDisplayNameDto[] | undefined;

    constructor(data?: IGetNotificationSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [] as any;
                for (let item of data["notifications"])
                    this.notifications!.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationSettingsOutput {
    /** 是否订阅 */
    receiveNotifications: boolean | undefined;
    /** 订阅消息 */
    notifications: NotificationSubscriptionWithDisplayNameDto[] | undefined;
}

export class NotificationSubscriptionWithDisplayNameDto implements INotificationSubscriptionWithDisplayNameDto {
    /** 显示名称 */
    displayName!: string | undefined;
    /** 描述 */
    description!: string | undefined;
    /** 消息名称 */
    name!: string;
    /** 是否订阅 */
    isSubscribed!: boolean | undefined;

    constructor(data?: INotificationSubscriptionWithDisplayNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionWithDisplayNameDto {
    /** 显示名称 */
    displayName: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean | undefined;
}

export class UpdateNotificationSettingsInput implements IUpdateNotificationSettingsInput {
    /** 是否接受通知 */
    receiveNotifications!: boolean | undefined;
    /** 通知订阅 */
    notifications!: NotificationSubscriptionDto[] | undefined;

    constructor(data?: IUpdateNotificationSettingsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [] as any;
                for (let item of data["notifications"])
                    this.notifications!.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateNotificationSettingsInput {
    /** 是否接受通知 */
    receiveNotifications: boolean | undefined;
    /** 通知订阅 */
    notifications: NotificationSubscriptionDto[] | undefined;
}

/** 消息订阅 */
export class NotificationSubscriptionDto implements INotificationSubscriptionDto {
    /** 消息名称 */
    name!: string;
    /** 是否订阅 */
    isSubscribed!: boolean | undefined;

    constructor(data?: INotificationSubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

/** 消息订阅 */
export interface INotificationSubscriptionDto {
    /** 消息名称 */
    name: string;
    /** 是否订阅 */
    isSubscribed: boolean | undefined;
}

export class PagedResultDtoOfOrderListDto implements IPagedResultDtoOfOrderListDto {
    totalCount!: number | undefined;
    items!: OrderListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOrderListDto {
    totalCount: number | undefined;
    items: OrderListDto[] | undefined;
}

export class OrderListDto implements IOrderListDto {
    /** 订单号 */
    orderNumber!: string | undefined;
    /** 店铺 */
    store!: string | undefined;
    /** 订单状态 */
    orderStatusString!: string | undefined;
    /** 订单状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus!: OrderListDtoOrderStatus | undefined;
    /** 支付状态 */
    paymentStatusString!: string | undefined;
    /** 支付状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus!: OrderListDtoPaymentStatus | undefined;
    /** 物流状态 */
    shippingStatusString!: string | undefined;
    /** 物流状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus!: OrderListDtoShippingStatus | undefined;
    /** 订单类型 */
    orderTypeString!: string | undefined;
    /** 订单类型Id1 = PayOnline ; 2 = PayOnDelivery */
    orderType!: OrderListDtoOrderType | undefined;
    /** 订单来源 */
    orderSourceString!: string | undefined;
    /** 订单来源Id10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource!: OrderListDtoOrderSource | undefined;
    /** 管理员备注 */
    adminComment!: string | undefined;
    /** 客户备注 */
    customerComment!: string | undefined;
    /** 创建时间 */
    createOn!: moment.Moment | undefined;
    /** 订单金额 */
    totalAmount!: number | undefined;
    /** 收货姓名 */
    shippingName!: string | undefined;
    /** 收货电话 */
    shippingPhoneNumber!: string | undefined;
    /** 收货地址 */
    shippingAddress!: string | undefined;
    /** 子订单 */
    items!: OrderListItemDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderNumber = data["orderNumber"];
            this.store = data["store"];
            this.orderStatusString = data["orderStatusString"];
            this.orderStatus = data["orderStatus"];
            this.paymentStatusString = data["paymentStatusString"];
            this.paymentStatus = data["paymentStatus"];
            this.shippingStatusString = data["shippingStatusString"];
            this.shippingStatus = data["shippingStatus"];
            this.orderTypeString = data["orderTypeString"];
            this.orderType = data["orderType"];
            this.orderSourceString = data["orderSourceString"];
            this.orderSource = data["orderSource"];
            this.adminComment = data["adminComment"];
            this.customerComment = data["customerComment"];
            this.createOn = data["createOn"] ? moment(data["createOn"].toString()) : <any>undefined;
            this.totalAmount = data["totalAmount"];
            this.shippingName = data["shippingName"];
            this.shippingPhoneNumber = data["shippingPhoneNumber"];
            this.shippingAddress = data["shippingAddress"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrderListItemDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderNumber"] = this.orderNumber;
        data["store"] = this.store;
        data["orderStatusString"] = this.orderStatusString;
        data["orderStatus"] = this.orderStatus;
        data["paymentStatusString"] = this.paymentStatusString;
        data["paymentStatus"] = this.paymentStatus;
        data["shippingStatusString"] = this.shippingStatusString;
        data["shippingStatus"] = this.shippingStatus;
        data["orderTypeString"] = this.orderTypeString;
        data["orderType"] = this.orderType;
        data["orderSourceString"] = this.orderSourceString;
        data["orderSource"] = this.orderSource;
        data["adminComment"] = this.adminComment;
        data["customerComment"] = this.customerComment;
        data["createOn"] = this.createOn ? this.createOn.toISOString() : <any>undefined;
        data["totalAmount"] = this.totalAmount;
        data["shippingName"] = this.shippingName;
        data["shippingPhoneNumber"] = this.shippingPhoneNumber;
        data["shippingAddress"] = this.shippingAddress;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrderListDto {
    /** 订单号 */
    orderNumber: string | undefined;
    /** 店铺 */
    store: string | undefined;
    /** 订单状态 */
    orderStatusString: string | undefined;
    /** 订单状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus: OrderListDtoOrderStatus | undefined;
    /** 支付状态 */
    paymentStatusString: string | undefined;
    /** 支付状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus: OrderListDtoPaymentStatus | undefined;
    /** 物流状态 */
    shippingStatusString: string | undefined;
    /** 物流状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus: OrderListDtoShippingStatus | undefined;
    /** 订单类型 */
    orderTypeString: string | undefined;
    /** 订单类型Id1 = PayOnline ; 2 = PayOnDelivery */
    orderType: OrderListDtoOrderType | undefined;
    /** 订单来源 */
    orderSourceString: string | undefined;
    /** 订单来源Id10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource: OrderListDtoOrderSource | undefined;
    /** 管理员备注 */
    adminComment: string | undefined;
    /** 客户备注 */
    customerComment: string | undefined;
    /** 创建时间 */
    createOn: moment.Moment | undefined;
    /** 订单金额 */
    totalAmount: number | undefined;
    /** 收货姓名 */
    shippingName: string | undefined;
    /** 收货电话 */
    shippingPhoneNumber: string | undefined;
    /** 收货地址 */
    shippingAddress: string | undefined;
    /** 子订单 */
    items: OrderListItemDto[] | undefined;
    id: number | undefined;
}

export class OrderListItemDto implements IOrderListItemDto {
    /** 商品名称 */
    productName!: string | undefined;
    /** 属性描述 */
    attributeDesciption!: string | undefined;
    /** 数量 */
    quantity!: number | undefined;
    /** 价格（小计） */
    price!: number | undefined;
    /** 单价 */
    unitPrice!: number | undefined;
    /** 商品 / 属性图片 */
    pictureUrl!: string | undefined;
    id!: number | undefined;

    constructor(data?: IOrderListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productName = data["productName"];
            this.attributeDesciption = data["attributeDesciption"];
            this.quantity = data["quantity"];
            this.price = data["price"];
            this.unitPrice = data["unitPrice"];
            this.pictureUrl = data["pictureUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderListItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["attributeDesciption"] = this.attributeDesciption;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["unitPrice"] = this.unitPrice;
        data["pictureUrl"] = this.pictureUrl;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrderListItemDto {
    /** 商品名称 */
    productName: string | undefined;
    /** 属性描述 */
    attributeDesciption: string | undefined;
    /** 数量 */
    quantity: number | undefined;
    /** 价格（小计） */
    price: number | undefined;
    /** 单价 */
    unitPrice: number | undefined;
    /** 商品 / 属性图片 */
    pictureUrl: string | undefined;
    id: number | undefined;
}

export class OrderDetailDto implements IOrderDetailDto {
    /** 订单号 */
    orderNumber!: string | undefined;
    /** 店铺 */
    storeId!: string | undefined;
    /** 店铺 */
    store!: string | undefined;
    /** 订单状态 */
    orderStatusString!: string | undefined;
    /** 订单状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus!: OrderDetailDtoOrderStatus | undefined;
    /** 支付状态 */
    paymentStatusString!: string | undefined;
    /** 支付状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus!: OrderDetailDtoPaymentStatus | undefined;
    /** 物流状态 */
    shippingStatusString!: string | undefined;
    /** 物流状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus!: OrderDetailDtoShippingStatus | undefined;
    /** 订单类型 */
    orderTypeString!: string | undefined;
    /** 订单类型Id1 = PayOnline ; 2 = PayOnDelivery */
    orderType!: OrderDetailDtoOrderType | undefined;
    /** 订单来源 */
    orderSourceString!: string | undefined;
    /** 订单来源Id10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource!: OrderDetailDtoOrderSource | undefined;
    /** 管理员备注 */
    adminComment!: string | undefined;
    /** 客户备注 */
    customerComment!: string | undefined;
    /** 收货地址(省份) */
    shippingProvince!: string | undefined;
    /** 收货地址(省份id) */
    shippingProvinceId!: number | undefined;
    /** 收货地址(城市) */
    shippingCity!: string | undefined;
    /** 收货地址(城市Id) */
    shippingCityId!: number | undefined;
    /** 收货地址(区域/县) */
    shippingDistrict!: string | undefined;
    /** 收货地址(区域/县Id) */
    shippingDistrictId!: number | undefined;
    /** 收货地址(详细信息) */
    shippingAddress!: string | undefined;
    /** 收货地址(电话) */
    shippingPhoneNumber!: string | undefined;
    /** 收货地址(姓名) */
    shippingName!: string | undefined;
    /** 创建时间 */
    createOn!: moment.Moment | undefined;
    /** 付款时间(已付款状态才有值) */
    paidOn!: moment.Moment | undefined;
    /** 签收时间(已签收状态才有值) */
    receivedOn!: moment.Moment | undefined;
    /** 下单Ip地址 */
    ipAddress!: string | undefined;
    /** 订单小计 */
    subtotalAmount!: number | undefined;
    /** 订单总额 */
    totalAmount!: number | undefined;
    /** 货运费用 */
    shippingAmount!: number | undefined;
    /** 订单提成金额 */
    rewardAmount!: number | undefined;
    /** 支付方式附加费（货到付款手续费） */
    paymentMethodAdditionalFee!: number | undefined;
    /** 订单折扣（适用于订单总额） */
    discountAmount!: number | undefined;
    /** 订单折扣总额 */
    subTotalDiscountAmount!: number | undefined;
    /** 退款金额 */
    refundedAmount!: number | undefined;
    /** 子订单 */
    items!: OrderDetailItemDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IOrderDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderNumber = data["orderNumber"];
            this.storeId = data["storeId"];
            this.store = data["store"];
            this.orderStatusString = data["orderStatusString"];
            this.orderStatus = data["orderStatus"];
            this.paymentStatusString = data["paymentStatusString"];
            this.paymentStatus = data["paymentStatus"];
            this.shippingStatusString = data["shippingStatusString"];
            this.shippingStatus = data["shippingStatus"];
            this.orderTypeString = data["orderTypeString"];
            this.orderType = data["orderType"];
            this.orderSourceString = data["orderSourceString"];
            this.orderSource = data["orderSource"];
            this.adminComment = data["adminComment"];
            this.customerComment = data["customerComment"];
            this.shippingProvince = data["shippingProvince"];
            this.shippingProvinceId = data["shippingProvinceId"];
            this.shippingCity = data["shippingCity"];
            this.shippingCityId = data["shippingCityId"];
            this.shippingDistrict = data["shippingDistrict"];
            this.shippingDistrictId = data["shippingDistrictId"];
            this.shippingAddress = data["shippingAddress"];
            this.shippingPhoneNumber = data["shippingPhoneNumber"];
            this.shippingName = data["shippingName"];
            this.createOn = data["createOn"] ? moment(data["createOn"].toString()) : <any>undefined;
            this.paidOn = data["paidOn"] ? moment(data["paidOn"].toString()) : <any>undefined;
            this.receivedOn = data["receivedOn"] ? moment(data["receivedOn"].toString()) : <any>undefined;
            this.ipAddress = data["ipAddress"];
            this.subtotalAmount = data["subtotalAmount"];
            this.totalAmount = data["totalAmount"];
            this.shippingAmount = data["shippingAmount"];
            this.rewardAmount = data["rewardAmount"];
            this.paymentMethodAdditionalFee = data["paymentMethodAdditionalFee"];
            this.discountAmount = data["discountAmount"];
            this.subTotalDiscountAmount = data["subTotalDiscountAmount"];
            this.refundedAmount = data["refundedAmount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrderDetailItemDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderNumber"] = this.orderNumber;
        data["storeId"] = this.storeId;
        data["store"] = this.store;
        data["orderStatusString"] = this.orderStatusString;
        data["orderStatus"] = this.orderStatus;
        data["paymentStatusString"] = this.paymentStatusString;
        data["paymentStatus"] = this.paymentStatus;
        data["shippingStatusString"] = this.shippingStatusString;
        data["shippingStatus"] = this.shippingStatus;
        data["orderTypeString"] = this.orderTypeString;
        data["orderType"] = this.orderType;
        data["orderSourceString"] = this.orderSourceString;
        data["orderSource"] = this.orderSource;
        data["adminComment"] = this.adminComment;
        data["customerComment"] = this.customerComment;
        data["shippingProvince"] = this.shippingProvince;
        data["shippingProvinceId"] = this.shippingProvinceId;
        data["shippingCity"] = this.shippingCity;
        data["shippingCityId"] = this.shippingCityId;
        data["shippingDistrict"] = this.shippingDistrict;
        data["shippingDistrictId"] = this.shippingDistrictId;
        data["shippingAddress"] = this.shippingAddress;
        data["shippingPhoneNumber"] = this.shippingPhoneNumber;
        data["shippingName"] = this.shippingName;
        data["createOn"] = this.createOn ? this.createOn.toISOString() : <any>undefined;
        data["paidOn"] = this.paidOn ? this.paidOn.toISOString() : <any>undefined;
        data["receivedOn"] = this.receivedOn ? this.receivedOn.toISOString() : <any>undefined;
        data["ipAddress"] = this.ipAddress;
        data["subtotalAmount"] = this.subtotalAmount;
        data["totalAmount"] = this.totalAmount;
        data["shippingAmount"] = this.shippingAmount;
        data["rewardAmount"] = this.rewardAmount;
        data["paymentMethodAdditionalFee"] = this.paymentMethodAdditionalFee;
        data["discountAmount"] = this.discountAmount;
        data["subTotalDiscountAmount"] = this.subTotalDiscountAmount;
        data["refundedAmount"] = this.refundedAmount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrderDetailDto {
    /** 订单号 */
    orderNumber: string | undefined;
    /** 店铺 */
    storeId: string | undefined;
    /** 店铺 */
    store: string | undefined;
    /** 订单状态 */
    orderStatusString: string | undefined;
    /** 订单状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus: OrderDetailDtoOrderStatus | undefined;
    /** 支付状态 */
    paymentStatusString: string | undefined;
    /** 支付状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus: OrderDetailDtoPaymentStatus | undefined;
    /** 物流状态 */
    shippingStatusString: string | undefined;
    /** 物流状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus: OrderDetailDtoShippingStatus | undefined;
    /** 订单类型 */
    orderTypeString: string | undefined;
    /** 订单类型Id1 = PayOnline ; 2 = PayOnDelivery */
    orderType: OrderDetailDtoOrderType | undefined;
    /** 订单来源 */
    orderSourceString: string | undefined;
    /** 订单来源Id10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource: OrderDetailDtoOrderSource | undefined;
    /** 管理员备注 */
    adminComment: string | undefined;
    /** 客户备注 */
    customerComment: string | undefined;
    /** 收货地址(省份) */
    shippingProvince: string | undefined;
    /** 收货地址(省份id) */
    shippingProvinceId: number | undefined;
    /** 收货地址(城市) */
    shippingCity: string | undefined;
    /** 收货地址(城市Id) */
    shippingCityId: number | undefined;
    /** 收货地址(区域/县) */
    shippingDistrict: string | undefined;
    /** 收货地址(区域/县Id) */
    shippingDistrictId: number | undefined;
    /** 收货地址(详细信息) */
    shippingAddress: string | undefined;
    /** 收货地址(电话) */
    shippingPhoneNumber: string | undefined;
    /** 收货地址(姓名) */
    shippingName: string | undefined;
    /** 创建时间 */
    createOn: moment.Moment | undefined;
    /** 付款时间(已付款状态才有值) */
    paidOn: moment.Moment | undefined;
    /** 签收时间(已签收状态才有值) */
    receivedOn: moment.Moment | undefined;
    /** 下单Ip地址 */
    ipAddress: string | undefined;
    /** 订单小计 */
    subtotalAmount: number | undefined;
    /** 订单总额 */
    totalAmount: number | undefined;
    /** 货运费用 */
    shippingAmount: number | undefined;
    /** 订单提成金额 */
    rewardAmount: number | undefined;
    /** 支付方式附加费（货到付款手续费） */
    paymentMethodAdditionalFee: number | undefined;
    /** 订单折扣（适用于订单总额） */
    discountAmount: number | undefined;
    /** 订单折扣总额 */
    subTotalDiscountAmount: number | undefined;
    /** 退款金额 */
    refundedAmount: number | undefined;
    /** 子订单 */
    items: OrderDetailItemDto[] | undefined;
    id: number | undefined;
}

export class OrderDetailItemDto implements IOrderDetailItemDto {
    /** 子订单号 */
    orderItemNumber!: string | undefined;
    /** 商品id */
    productId!: number | undefined;
    /** 商品名称 */
    productName!: string | undefined;
    /** 属性描述 */
    attributeDesciption!: string | undefined;
    /** 数量 */
    quantity!: number | undefined;
    /** 价格（小计） */
    price!: number | undefined;
    /** 单价 */
    unitPrice!: number | undefined;
    /** 折扣 */
    discountAmount!: number | undefined;
    /** 商品 / 属性图片 */
    pictureUrl!: string | undefined;
    id!: number | undefined;

    constructor(data?: IOrderDetailItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderItemNumber = data["orderItemNumber"];
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.attributeDesciption = data["attributeDesciption"];
            this.quantity = data["quantity"];
            this.price = data["price"];
            this.unitPrice = data["unitPrice"];
            this.discountAmount = data["discountAmount"];
            this.pictureUrl = data["pictureUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderDetailItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderItemNumber"] = this.orderItemNumber;
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["attributeDesciption"] = this.attributeDesciption;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["unitPrice"] = this.unitPrice;
        data["discountAmount"] = this.discountAmount;
        data["pictureUrl"] = this.pictureUrl;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrderDetailItemDto {
    /** 子订单号 */
    orderItemNumber: string | undefined;
    /** 商品id */
    productId: number | undefined;
    /** 商品名称 */
    productName: string | undefined;
    /** 属性描述 */
    attributeDesciption: string | undefined;
    /** 数量 */
    quantity: number | undefined;
    /** 价格（小计） */
    price: number | undefined;
    /** 单价 */
    unitPrice: number | undefined;
    /** 折扣 */
    discountAmount: number | undefined;
    /** 商品 / 属性图片 */
    pictureUrl: string | undefined;
    id: number | undefined;
}

export class GetOrderForEditOutput implements IGetOrderForEditOutput {
    /** 订单号 */
    orderNumber!: string | undefined;
    /** 店铺 */
    storeId!: number | undefined;
    /** 订单状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus!: GetOrderForEditOutputOrderStatus | undefined;
    /** 支付状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus!: GetOrderForEditOutputPaymentStatus | undefined;
    /** 物流状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus!: GetOrderForEditOutputShippingStatus | undefined;
    /** 订单类型Id1 = PayOnline ; 2 = PayOnDelivery */
    orderType!: GetOrderForEditOutputOrderType | undefined;
    /** 订单来源Id10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource!: GetOrderForEditOutputOrderSource | undefined;
    /** 管理员备注 */
    adminComment!: string | undefined;
    /** 客户备注 */
    customerComment!: string | undefined;
    /** 收货地址(省份id) */
    shippingProvinceId!: number | undefined;
    /** 收货地址(城市Id) */
    shippingCityId!: number | undefined;
    /** 收货地址(区域/县Id) */
    shippingDistrictId!: number | undefined;
    /** 收货地址(详细信息) */
    shippingAddress!: string | undefined;
    /** 收货地址(电话) */
    shippingPhoneNumber!: string | undefined;
    /** 收货地址(姓名) */
    shippingName!: string | undefined;
    /** 创建时间 */
    createOn!: moment.Moment | undefined;
    /** 付款时间(已付款状态才有值) */
    paidOn!: moment.Moment | undefined;
    /** 签收时间(已签收状态才有值) */
    receivedOn!: moment.Moment | undefined;
    /** 下单Ip地址 */
    ipAddress!: string | undefined;
    /** 订单小计 */
    subtotalAmount!: number | undefined;
    /** 订单总额 */
    totalAmount!: number | undefined;
    /** 货运费用 */
    shippingAmount!: number | undefined;
    /** 订单提成金额 */
    rewardAmount!: number | undefined;
    /** 支付方式附加费（货到付款手续费） */
    paymentMethodAdditionalFee!: number | undefined;
    /** 订单折扣（适用于订单总额） */
    discountAmount!: number | undefined;
    /** 订单折扣总额 */
    subTotalDiscountAmount!: number | undefined;
    /** 退款金额 */
    refundedAmount!: number | undefined;
    /** 子订单 */
    items!: OrderItemDto[] | undefined;

    constructor(data?: IGetOrderForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderNumber = data["orderNumber"];
            this.storeId = data["storeId"];
            this.orderStatus = data["orderStatus"];
            this.paymentStatus = data["paymentStatus"];
            this.shippingStatus = data["shippingStatus"];
            this.orderType = data["orderType"];
            this.orderSource = data["orderSource"];
            this.adminComment = data["adminComment"];
            this.customerComment = data["customerComment"];
            this.shippingProvinceId = data["shippingProvinceId"];
            this.shippingCityId = data["shippingCityId"];
            this.shippingDistrictId = data["shippingDistrictId"];
            this.shippingAddress = data["shippingAddress"];
            this.shippingPhoneNumber = data["shippingPhoneNumber"];
            this.shippingName = data["shippingName"];
            this.createOn = data["createOn"] ? moment(data["createOn"].toString()) : <any>undefined;
            this.paidOn = data["paidOn"] ? moment(data["paidOn"].toString()) : <any>undefined;
            this.receivedOn = data["receivedOn"] ? moment(data["receivedOn"].toString()) : <any>undefined;
            this.ipAddress = data["ipAddress"];
            this.subtotalAmount = data["subtotalAmount"];
            this.totalAmount = data["totalAmount"];
            this.shippingAmount = data["shippingAmount"];
            this.rewardAmount = data["rewardAmount"];
            this.paymentMethodAdditionalFee = data["paymentMethodAdditionalFee"];
            this.discountAmount = data["discountAmount"];
            this.subTotalDiscountAmount = data["subTotalDiscountAmount"];
            this.refundedAmount = data["refundedAmount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrderItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetOrderForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetOrderForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderNumber"] = this.orderNumber;
        data["storeId"] = this.storeId;
        data["orderStatus"] = this.orderStatus;
        data["paymentStatus"] = this.paymentStatus;
        data["shippingStatus"] = this.shippingStatus;
        data["orderType"] = this.orderType;
        data["orderSource"] = this.orderSource;
        data["adminComment"] = this.adminComment;
        data["customerComment"] = this.customerComment;
        data["shippingProvinceId"] = this.shippingProvinceId;
        data["shippingCityId"] = this.shippingCityId;
        data["shippingDistrictId"] = this.shippingDistrictId;
        data["shippingAddress"] = this.shippingAddress;
        data["shippingPhoneNumber"] = this.shippingPhoneNumber;
        data["shippingName"] = this.shippingName;
        data["createOn"] = this.createOn ? this.createOn.toISOString() : <any>undefined;
        data["paidOn"] = this.paidOn ? this.paidOn.toISOString() : <any>undefined;
        data["receivedOn"] = this.receivedOn ? this.receivedOn.toISOString() : <any>undefined;
        data["ipAddress"] = this.ipAddress;
        data["subtotalAmount"] = this.subtotalAmount;
        data["totalAmount"] = this.totalAmount;
        data["shippingAmount"] = this.shippingAmount;
        data["rewardAmount"] = this.rewardAmount;
        data["paymentMethodAdditionalFee"] = this.paymentMethodAdditionalFee;
        data["discountAmount"] = this.discountAmount;
        data["subTotalDiscountAmount"] = this.subTotalDiscountAmount;
        data["refundedAmount"] = this.refundedAmount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetOrderForEditOutput {
    /** 订单号 */
    orderNumber: string | undefined;
    /** 店铺 */
    storeId: number | undefined;
    /** 订单状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus: GetOrderForEditOutputOrderStatus | undefined;
    /** 支付状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus: GetOrderForEditOutputPaymentStatus | undefined;
    /** 物流状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus: GetOrderForEditOutputShippingStatus | undefined;
    /** 订单类型Id1 = PayOnline ; 2 = PayOnDelivery */
    orderType: GetOrderForEditOutputOrderType | undefined;
    /** 订单来源Id10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource: GetOrderForEditOutputOrderSource | undefined;
    /** 管理员备注 */
    adminComment: string | undefined;
    /** 客户备注 */
    customerComment: string | undefined;
    /** 收货地址(省份id) */
    shippingProvinceId: number | undefined;
    /** 收货地址(城市Id) */
    shippingCityId: number | undefined;
    /** 收货地址(区域/县Id) */
    shippingDistrictId: number | undefined;
    /** 收货地址(详细信息) */
    shippingAddress: string | undefined;
    /** 收货地址(电话) */
    shippingPhoneNumber: string | undefined;
    /** 收货地址(姓名) */
    shippingName: string | undefined;
    /** 创建时间 */
    createOn: moment.Moment | undefined;
    /** 付款时间(已付款状态才有值) */
    paidOn: moment.Moment | undefined;
    /** 签收时间(已签收状态才有值) */
    receivedOn: moment.Moment | undefined;
    /** 下单Ip地址 */
    ipAddress: string | undefined;
    /** 订单小计 */
    subtotalAmount: number | undefined;
    /** 订单总额 */
    totalAmount: number | undefined;
    /** 货运费用 */
    shippingAmount: number | undefined;
    /** 订单提成金额 */
    rewardAmount: number | undefined;
    /** 支付方式附加费（货到付款手续费） */
    paymentMethodAdditionalFee: number | undefined;
    /** 订单折扣（适用于订单总额） */
    discountAmount: number | undefined;
    /** 订单折扣总额 */
    subTotalDiscountAmount: number | undefined;
    /** 退款金额 */
    refundedAmount: number | undefined;
    /** 子订单 */
    items: OrderItemDto[] | undefined;
}

export class OrderItemDto implements IOrderItemDto {
    /** 子订单号 */
    orderItemNumber!: string | undefined;
    /** 商品id */
    productId!: number | undefined;
    /** 数量 */
    quantity!: number | undefined;
    /** 单价(缺省自动计算) */
    unitPrice!: number | undefined;
    /** 价格(小计，缺省自动计算) */
    price!: number | undefined;
    /** 折扣(缺省自动计算) */
    discountAmount!: number | undefined;
    /** 属性值（如果有） */
    attributes!: ProductAttributeDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IOrderItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderItemNumber = data["orderItemNumber"];
            this.productId = data["productId"];
            this.quantity = data["quantity"];
            this.unitPrice = data["unitPrice"];
            this.price = data["price"];
            this.discountAmount = data["discountAmount"];
            if (data["attributes"] && data["attributes"].constructor === Array) {
                this.attributes = [] as any;
                for (let item of data["attributes"])
                    this.attributes!.push(ProductAttributeDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrderItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderItemNumber"] = this.orderItemNumber;
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["price"] = this.price;
        data["discountAmount"] = this.discountAmount;
        if (this.attributes && this.attributes.constructor === Array) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrderItemDto {
    /** 子订单号 */
    orderItemNumber: string | undefined;
    /** 商品id */
    productId: number | undefined;
    /** 数量 */
    quantity: number | undefined;
    /** 单价(缺省自动计算) */
    unitPrice: number | undefined;
    /** 价格(小计，缺省自动计算) */
    price: number | undefined;
    /** 折扣(缺省自动计算) */
    discountAmount: number | undefined;
    /** 属性值（如果有） */
    attributes: ProductAttributeDto[] | undefined;
    id: number | undefined;
}

/** 商品属性 */
export class ProductAttributeDto implements IProductAttributeDto {
    /** 商品属性名 */
    name!: string | undefined;
    /** 预定义值/值记录 */
    values!: ProductAttributeValueDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IProductAttributeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["values"] && data["values"].constructor === Array) {
                this.values = [] as any;
                for (let item of data["values"])
                    this.values!.push(ProductAttributeValueDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductAttributeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAttributeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.values && this.values.constructor === Array) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

/** 商品属性 */
export interface IProductAttributeDto {
    /** 商品属性名 */
    name: string | undefined;
    /** 预定义值/值记录 */
    values: ProductAttributeValueDto[] | undefined;
    id: number | undefined;
}

/** 属性值 */
export class ProductAttributeValueDto implements IProductAttributeValueDto {
    /** 值名称 */
    name!: string | undefined;
    /** 图片id */
    pictureId!: number | undefined;
    /** 图片Url */
    pictureUrl!: string | undefined;
    id!: number | undefined;

    constructor(data?: IProductAttributeValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.pictureId = data["pictureId"];
            this.pictureUrl = data["pictureUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductAttributeValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAttributeValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["pictureId"] = this.pictureId;
        data["pictureUrl"] = this.pictureUrl;
        data["id"] = this.id;
        return data; 
    }
}

/** 属性值 */
export interface IProductAttributeValueDto {
    /** 值名称 */
    name: string | undefined;
    /** 图片id */
    pictureId: number | undefined;
    /** 图片Url */
    pictureUrl: string | undefined;
    id: number | undefined;
}

export class CreateOrUpdateOrderInput implements ICreateOrUpdateOrderInput {
    /** 订单号（缺省自动生成） */
    orderNumber!: string | undefined;
    /** 店铺Id */
    storeId!: number | undefined;
    /** 订单状态(缺省为待确认)10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus!: CreateOrUpdateOrderInputOrderStatus | undefined;
    /** 支付状态(缺省为未支付)10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus!: CreateOrUpdateOrderInputPaymentStatus | undefined;
    /** 物流状态(缺省为未发货）100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus!: CreateOrUpdateOrderInputShippingStatus | undefined;
    /** 订单类型（缺省为货到付款）1 = PayOnline ; 2 = PayOnDelivery */
    orderType!: CreateOrUpdateOrderInputOrderType | undefined;
    /** 订单来源（缺省优先店铺设置，店铺id为空则为后台自建）10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource!: CreateOrUpdateOrderInputOrderSource | undefined;
    /** 管理员备注 */
    adminComment!: string | undefined;
    /** 客户备注 */
    customerComment!: string | undefined;
    /** 收货地址(省份id) */
    shippingProvinceId!: number | undefined;
    /** 收货地址(城市Id) */
    shippingCityId!: number | undefined;
    /** 收货地址(区域/县Id) */
    shippingDistrictId!: number | undefined;
    /** 收货地址(详细信息) */
    shippingAddress!: string | undefined;
    /** 收货地址(电话,自动查找对应客户) */
    shippingPhoneNumber!: string | undefined;
    /** 收货地址(姓名) */
    shippingName!: string | undefined;
    /** 订单小计(子订单小计) */
    subtotalAmount!: number | undefined;
    /** 订单总额(订单金额，折算所有后) */
    totalAmount!: number | undefined;
    /** 货运费用 */
    shippingAmount!: number | undefined;
    /** 订单提成/佣金 */
    rewardAmount!: number | undefined;
    /** 支付方式附加费（货到付款手续费） */
    paymentMethodAdditionalFee!: number | undefined;
    /** 订单折扣（适用于订单总额） */
    discountAmount!: number | undefined;
    /** 订单折扣总额 */
    subTotalDiscountAmount!: number | undefined;
    /** 退款金额 */
    refundedAmount!: number | undefined;
    /** 子订单(商品) */
    items!: OrderItemDto[] | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderNumber = data["orderNumber"];
            this.storeId = data["storeId"];
            this.orderStatus = data["orderStatus"];
            this.paymentStatus = data["paymentStatus"];
            this.shippingStatus = data["shippingStatus"];
            this.orderType = data["orderType"];
            this.orderSource = data["orderSource"];
            this.adminComment = data["adminComment"];
            this.customerComment = data["customerComment"];
            this.shippingProvinceId = data["shippingProvinceId"];
            this.shippingCityId = data["shippingCityId"];
            this.shippingDistrictId = data["shippingDistrictId"];
            this.shippingAddress = data["shippingAddress"];
            this.shippingPhoneNumber = data["shippingPhoneNumber"];
            this.shippingName = data["shippingName"];
            this.subtotalAmount = data["subtotalAmount"];
            this.totalAmount = data["totalAmount"];
            this.shippingAmount = data["shippingAmount"];
            this.rewardAmount = data["rewardAmount"];
            this.paymentMethodAdditionalFee = data["paymentMethodAdditionalFee"];
            this.discountAmount = data["discountAmount"];
            this.subTotalDiscountAmount = data["subTotalDiscountAmount"];
            this.refundedAmount = data["refundedAmount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrderItemDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateOrderInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderNumber"] = this.orderNumber;
        data["storeId"] = this.storeId;
        data["orderStatus"] = this.orderStatus;
        data["paymentStatus"] = this.paymentStatus;
        data["shippingStatus"] = this.shippingStatus;
        data["orderType"] = this.orderType;
        data["orderSource"] = this.orderSource;
        data["adminComment"] = this.adminComment;
        data["customerComment"] = this.customerComment;
        data["shippingProvinceId"] = this.shippingProvinceId;
        data["shippingCityId"] = this.shippingCityId;
        data["shippingDistrictId"] = this.shippingDistrictId;
        data["shippingAddress"] = this.shippingAddress;
        data["shippingPhoneNumber"] = this.shippingPhoneNumber;
        data["shippingName"] = this.shippingName;
        data["subtotalAmount"] = this.subtotalAmount;
        data["totalAmount"] = this.totalAmount;
        data["shippingAmount"] = this.shippingAmount;
        data["rewardAmount"] = this.rewardAmount;
        data["paymentMethodAdditionalFee"] = this.paymentMethodAdditionalFee;
        data["discountAmount"] = this.discountAmount;
        data["subTotalDiscountAmount"] = this.subTotalDiscountAmount;
        data["refundedAmount"] = this.refundedAmount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateOrderInput {
    /** 订单号（缺省自动生成） */
    orderNumber: string | undefined;
    /** 店铺Id */
    storeId: number | undefined;
    /** 订单状态(缺省为待确认)10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    orderStatus: CreateOrUpdateOrderInputOrderStatus | undefined;
    /** 支付状态(缺省为未支付)10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    paymentStatus: CreateOrUpdateOrderInputPaymentStatus | undefined;
    /** 物流状态(缺省为未发货）100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    shippingStatus: CreateOrUpdateOrderInputShippingStatus | undefined;
    /** 订单类型（缺省为货到付款）1 = PayOnline ; 2 = PayOnDelivery */
    orderType: CreateOrUpdateOrderInputOrderType | undefined;
    /** 订单来源（缺省优先店铺设置，店铺id为空则为后台自建）10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSource: CreateOrUpdateOrderInputOrderSource | undefined;
    /** 管理员备注 */
    adminComment: string | undefined;
    /** 客户备注 */
    customerComment: string | undefined;
    /** 收货地址(省份id) */
    shippingProvinceId: number | undefined;
    /** 收货地址(城市Id) */
    shippingCityId: number | undefined;
    /** 收货地址(区域/县Id) */
    shippingDistrictId: number | undefined;
    /** 收货地址(详细信息) */
    shippingAddress: string | undefined;
    /** 收货地址(电话,自动查找对应客户) */
    shippingPhoneNumber: string | undefined;
    /** 收货地址(姓名) */
    shippingName: string | undefined;
    /** 订单小计(子订单小计) */
    subtotalAmount: number | undefined;
    /** 订单总额(订单金额，折算所有后) */
    totalAmount: number | undefined;
    /** 货运费用 */
    shippingAmount: number | undefined;
    /** 订单提成/佣金 */
    rewardAmount: number | undefined;
    /** 支付方式附加费（货到付款手续费） */
    paymentMethodAdditionalFee: number | undefined;
    /** 订单折扣（适用于订单总额） */
    discountAmount: number | undefined;
    /** 订单折扣总额 */
    subTotalDiscountAmount: number | undefined;
    /** 退款金额 */
    refundedAmount: number | undefined;
    /** 子订单(商品) */
    items: OrderItemDto[] | undefined;
    id: number | undefined;
}

export class ChangeOrderStatusInputOfOrderStatus implements IChangeOrderStatusInputOfOrderStatus {
    /** id数组 */
    ids!: Ids[] | undefined;
    /** 状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    stauts!: ChangeOrderStatusInputOfOrderStatusStauts | undefined;
    id!: number | undefined;

    constructor(data?: IChangeOrderStatusInputOfOrderStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["ids"] && data["ids"].constructor === Array) {
                this.ids = [] as any;
                for (let item of data["ids"])
                    this.ids!.push(item);
            }
            this.stauts = data["stauts"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ChangeOrderStatusInputOfOrderStatus {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeOrderStatusInputOfOrderStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.ids && this.ids.constructor === Array) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        data["stauts"] = this.stauts;
        data["id"] = this.id;
        return data; 
    }
}

export interface IChangeOrderStatusInputOfOrderStatus {
    /** id数组 */
    ids: Ids[] | undefined;
    /** 状态10 = WaitConfirm ; 20 = Processing ; 30 = Completed ; 40 = Canceled */
    stauts: ChangeOrderStatusInputOfOrderStatusStauts | undefined;
    id: number | undefined;
}

export class ChangeOrderStatusInputOfShippingStatus implements IChangeOrderStatusInputOfShippingStatus {
    /** id数组 */
    ids!: Ids2[] | undefined;
    /** 状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    stauts!: ChangeOrderStatusInputOfShippingStatusStauts | undefined;
    id!: number | undefined;

    constructor(data?: IChangeOrderStatusInputOfShippingStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["ids"] && data["ids"].constructor === Array) {
                this.ids = [] as any;
                for (let item of data["ids"])
                    this.ids!.push(item);
            }
            this.stauts = data["stauts"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ChangeOrderStatusInputOfShippingStatus {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeOrderStatusInputOfShippingStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.ids && this.ids.constructor === Array) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        data["stauts"] = this.stauts;
        data["id"] = this.id;
        return data; 
    }
}

export interface IChangeOrderStatusInputOfShippingStatus {
    /** id数组 */
    ids: Ids2[] | undefined;
    /** 状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    stauts: ChangeOrderStatusInputOfShippingStatusStauts | undefined;
    id: number | undefined;
}

export class ChangeOrderStatusInputOfPaymentStatus implements IChangeOrderStatusInputOfPaymentStatus {
    /** id数组 */
    ids!: Ids3[] | undefined;
    /** 状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    stauts!: ChangeOrderStatusInputOfPaymentStatusStauts | undefined;
    id!: number | undefined;

    constructor(data?: IChangeOrderStatusInputOfPaymentStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["ids"] && data["ids"].constructor === Array) {
                this.ids = [] as any;
                for (let item of data["ids"])
                    this.ids!.push(item);
            }
            this.stauts = data["stauts"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ChangeOrderStatusInputOfPaymentStatus {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeOrderStatusInputOfPaymentStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.ids && this.ids.constructor === Array) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        data["stauts"] = this.stauts;
        data["id"] = this.id;
        return data; 
    }
}

export interface IChangeOrderStatusInputOfPaymentStatus {
    /** id数组 */
    ids: Ids3[] | undefined;
    /** 状态10 = Pending ; 30 = Paid ; 35 = PartiallyRefunded ; 40 = Refunded */
    stauts: ChangeOrderStatusInputOfPaymentStatusStauts | undefined;
    id: number | undefined;
}

export class ListResultDtoOfOrganizationUnitDto implements IListResultDtoOfOrganizationUnitDto {
    items!: OrganizationUnitDto[] | undefined;

    constructor(data?: IListResultDtoOfOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfOrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[] | undefined;
}

export class OrganizationUnitDto implements IOrganizationUnitDto {
    parentId!: number | undefined;
    code!: string | undefined;
    displayName!: string | undefined;
    memberCount!: number | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.code = data["code"];
            this.displayName = data["displayName"];
            this.memberCount = data["memberCount"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitDto {
    parentId: number | undefined;
    code: string | undefined;
    displayName: string | undefined;
    memberCount: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfOrganizationUnitUserListDto implements IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount!: number | undefined;
    items!: OrganizationUnitUserListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrganizationUnitUserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number | undefined;
    items: OrganizationUnitUserListDto[] | undefined;
}

export class OrganizationUnitUserListDto implements IOrganizationUnitUserListDto {
    name!: string | undefined;
    surname!: string | undefined;
    userName!: string | undefined;
    emailAddress!: string | undefined;
    profilePictureId!: number | undefined;
    addedTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitUserListDto {
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    profilePictureId: number | undefined;
    addedTime: moment.Moment | undefined;
    id: number | undefined;
}

export class CreateOrganizationUnitInput implements ICreateOrganizationUnitInput {
    /** 父节点Id(可空) */
    parentId!: number | undefined;
    /** 显示名称 */
    displayName!: string;

    constructor(data?: ICreateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface ICreateOrganizationUnitInput {
    /** 父节点Id(可空) */
    parentId: number | undefined;
    /** 显示名称 */
    displayName: string;
}

export class UpdateOrganizationUnitInput implements IUpdateOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id!: number | undefined;
    /** 显示名称 */
    displayName!: string;

    constructor(data?: IUpdateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface IUpdateOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number | undefined;
    /** 显示名称 */
    displayName: string;
}

export class MoveOrganizationUnitInput implements IMoveOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id!: number | undefined;
    /** 目标父节点Id(可空) */
    newParentId!: number | undefined;

    constructor(data?: IMoveOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.newParentId = data["newParentId"];
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data; 
    }
}

export interface IMoveOrganizationUnitInput {
    /** 组织单位Id(大于0) */
    id: number | undefined;
    /** 目标父节点Id(可空) */
    newParentId: number | undefined;
}

export class UsersToOrganizationUnitInput implements IUsersToOrganizationUnitInput {
    userIds!: number[] | undefined;
    organizationUnitId!: number | undefined;

    constructor(data?: IUsersToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["userIds"] && data["userIds"].constructor === Array) {
                this.userIds = [] as any;
                for (let item of data["userIds"])
                    this.userIds!.push(item);
            }
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UsersToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.userIds && this.userIds.constructor === Array) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }
}

export interface IUsersToOrganizationUnitInput {
    userIds: number[] | undefined;
    organizationUnitId: number | undefined;
}

export class FindOrganizationUnitUsersInput implements IFindOrganizationUnitUsersInput {
    organizationUnitId!: number | undefined;
    maxResultCount!: number | undefined;
    skipCount!: number | undefined;
    filter!: string | undefined;

    constructor(data?: IFindOrganizationUnitUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindOrganizationUnitUsersInput {
        data = typeof data === 'object' ? data : {};
        let result = new FindOrganizationUnitUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindOrganizationUnitUsersInput {
    organizationUnitId: number | undefined;
    maxResultCount: number | undefined;
    skipCount: number | undefined;
    filter: string | undefined;
}

export class PaymentInfoDto implements IPaymentInfoDto {
    edition!: EditionSelectDto | undefined;
    additionalPrice!: number | undefined;

    constructor(data?: IPaymentInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            this.additionalPrice = data["additionalPrice"];
        }
    }

    static fromJS(data: any): PaymentInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["additionalPrice"] = this.additionalPrice;
        return data; 
    }
}

export interface IPaymentInfoDto {
    edition: EditionSelectDto | undefined;
    additionalPrice: number | undefined;
}

export class CreatePaymentDto implements ICreatePaymentDto {
    /** 版本Id */
    editionId!: number | undefined;
    /** 购买来源0 = NewRegistration ; 1 = BuyNow ; 2 = Upgrade ; 3 = Extend */
    editionPaymentType!: CreatePaymentDtoEditionPaymentType | undefined;
    /** 购买时长30 = Monthly ; 90 = Season ; 365 = Annual */
    paymentPeriodType!: CreatePaymentDtoPaymentPeriodType | undefined;
    /** 支付方式1 = WeChat ; 2 = Alipay */
    subscriptionPaymentGatewayType!: CreatePaymentDtoSubscriptionPaymentGatewayType | undefined;

    constructor(data?: ICreatePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.editionId = data["editionId"];
            this.editionPaymentType = data["editionPaymentType"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionPaymentGatewayType = data["subscriptionPaymentGatewayType"];
        }
    }

    static fromJS(data: any): CreatePaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editionId"] = this.editionId;
        data["editionPaymentType"] = this.editionPaymentType;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionPaymentGatewayType"] = this.subscriptionPaymentGatewayType;
        return data; 
    }
}

export interface ICreatePaymentDto {
    /** 版本Id */
    editionId: number | undefined;
    /** 购买来源0 = NewRegistration ; 1 = BuyNow ; 2 = Upgrade ; 3 = Extend */
    editionPaymentType: CreatePaymentDtoEditionPaymentType | undefined;
    /** 购买时长30 = Monthly ; 90 = Season ; 365 = Annual */
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType | undefined;
    /** 支付方式1 = WeChat ; 2 = Alipay */
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType | undefined;
}

export class CreatePaymentResponse implements ICreatePaymentResponse {
    /** 支付参数 */
    additionalData!: { [key: string] : string; } | undefined;
    /** 总价格 */
    amount!: number | undefined;
    /** 订单号 */
    paymentId!: string | undefined;

    constructor(data?: ICreatePaymentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in data["additionalData"]) {
                    if (data["additionalData"].hasOwnProperty(key))
                        this.additionalData![key] = data["additionalData"][key];
                }
            }
            this.amount = data["amount"];
            this.paymentId = data["paymentId"];
        }
    }

    static fromJS(data: any): CreatePaymentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePaymentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    data["additionalData"][key] = this.additionalData[key];
            }
        }
        data["amount"] = this.amount;
        data["paymentId"] = this.paymentId;
        return data; 
    }
}

export interface ICreatePaymentResponse {
    /** 支付参数 */
    additionalData: { [key: string] : string; } | undefined;
    /** 总价格 */
    amount: number | undefined;
    /** 订单号 */
    paymentId: string | undefined;
}

export class CancelPaymentDto implements ICancelPaymentDto {
    paymentId!: string | undefined;
    /** 1 = WeChat ; 2 = Alipay */
    gateway!: CancelPaymentDtoGateway | undefined;

    constructor(data?: ICancelPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.paymentId = data["paymentId"];
            this.gateway = data["gateway"];
        }
    }

    static fromJS(data: any): CancelPaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CancelPaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentId"] = this.paymentId;
        data["gateway"] = this.gateway;
        return data; 
    }
}

export interface ICancelPaymentDto {
    paymentId: string | undefined;
    /** 1 = WeChat ; 2 = Alipay */
    gateway: CancelPaymentDtoGateway | undefined;
}

export class QueryPaymentOutput implements IQueryPaymentOutput {
    paid!: boolean | undefined;

    constructor(data?: IQueryPaymentOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.paid = data["paid"];
        }
    }

    static fromJS(data: any): QueryPaymentOutput {
        data = typeof data === 'object' ? data : {};
        let result = new QueryPaymentOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paid"] = this.paid;
        return data; 
    }
}

export interface IQueryPaymentOutput {
    paid: boolean | undefined;
}

export class PagedResultDtoOfSubscriptionPaymentListDto implements IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount!: number | undefined;
    items!: SubscriptionPaymentListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(SubscriptionPaymentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSubscriptionPaymentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number | undefined;
    items: SubscriptionPaymentListDto[] | undefined;
}

export class SubscriptionPaymentListDto implements ISubscriptionPaymentListDto {
    /** 支付方式 */
    gateway!: string | undefined;
    /** 支付金额 */
    amount!: number | undefined;
    /** 版本Id */
    editionId!: number | undefined;
    /** 支付天数 */
    dayCount!: number | undefined;
    /** 支付周期类型 */
    paymentPeriodType!: string | undefined;
    /** 支付订单号 */
    paymentId!: string | undefined;
    /** 支付人Id(如果有) */
    payer!: string | undefined;
    /** 支付状态 */
    status!: string | undefined;
    /** 版本显示名称 */
    editionDisplayName!: string | undefined;
    /** 租户Id */
    tenantId!: number | undefined;
    /** 第三方交易号 */
    invoiceNo!: string | undefined;
    lastModificationTime!: moment.Moment | undefined;
    lastModifierUserId!: number | undefined;
    creationTime!: moment.Moment | undefined;
    creatorUserId!: number | undefined;
    id!: number | undefined;

    constructor(data?: ISubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.amount = data["amount"];
            this.editionId = data["editionId"];
            this.dayCount = data["dayCount"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.paymentId = data["paymentId"];
            this.payer = data["payer"];
            this.status = data["status"];
            this.editionDisplayName = data["editionDisplayName"];
            this.tenantId = data["tenantId"];
            this.invoiceNo = data["invoiceNo"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SubscriptionPaymentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["amount"] = this.amount;
        data["editionId"] = this.editionId;
        data["dayCount"] = this.dayCount;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["paymentId"] = this.paymentId;
        data["payer"] = this.payer;
        data["status"] = this.status;
        data["editionDisplayName"] = this.editionDisplayName;
        data["tenantId"] = this.tenantId;
        data["invoiceNo"] = this.invoiceNo;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISubscriptionPaymentListDto {
    /** 支付方式 */
    gateway: string | undefined;
    /** 支付金额 */
    amount: number | undefined;
    /** 版本Id */
    editionId: number | undefined;
    /** 支付天数 */
    dayCount: number | undefined;
    /** 支付周期类型 */
    paymentPeriodType: string | undefined;
    /** 支付订单号 */
    paymentId: string | undefined;
    /** 支付人Id(如果有) */
    payer: string | undefined;
    /** 支付状态 */
    status: string | undefined;
    /** 版本显示名称 */
    editionDisplayName: string | undefined;
    /** 租户Id */
    tenantId: number | undefined;
    /** 第三方交易号 */
    invoiceNo: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class ListResultDtoOfFlatPermissionWithLevelDto implements IListResultDtoOfFlatPermissionWithLevelDto {
    items!: FlatPermissionWithLevelDto[] | undefined;

    constructor(data?: IListResultDtoOfFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(FlatPermissionWithLevelDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[] | undefined;
}

export class FlatPermissionWithLevelDto implements IFlatPermissionWithLevelDto {
    /** 权限等级 */
    level!: number | undefined;
    /** 父权限名称 */
    parentName!: string | undefined;
    /** (系统)名称 */
    name!: string | undefined;
    /** 显示名称 */
    displayName!: string | undefined;
    /** 描述 */
    description!: string | undefined;
    /** 默认授予 */
    isGrantedByDefault!: boolean | undefined;

    constructor(data?: IFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.level = data["level"];
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionWithLevelDto {
    /** 权限等级 */
    level: number | undefined;
    /** 父权限名称 */
    parentName: string | undefined;
    /** (系统)名称 */
    name: string | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** 默认授予 */
    isGrantedByDefault: boolean | undefined;
}

export class PagedResultDtoOfPictureListDto implements IPagedResultDtoOfPictureListDto {
    totalCount!: number | undefined;
    items!: PictureListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPictureListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(PictureListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPictureListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPictureListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfPictureListDto {
    totalCount: number | undefined;
    items: PictureListDto[] | undefined;
}

export class PictureListDto implements IPictureListDto {
    /** 名称 */
    name!: string | undefined;
    /** 图片Url */
    originalUrl!: string | undefined;
    /** 文件 Key(eg:七牛) */
    key!: string | undefined;
    /** 图片类型 */
    mimeType!: string | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IPictureListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.originalUrl = data["originalUrl"];
            this.key = data["key"];
            this.mimeType = data["mimeType"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PictureListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PictureListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["originalUrl"] = this.originalUrl;
        data["key"] = this.key;
        data["mimeType"] = this.mimeType;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPictureListDto {
    /** 名称 */
    name: string | undefined;
    /** 图片Url */
    originalUrl: string | undefined;
    /** 文件 Key(eg:七牛) */
    key: string | undefined;
    /** 图片类型 */
    mimeType: string | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class UploadTokenOutput implements IUploadTokenOutput {
    token!: string | undefined;
    expirationOnUtc!: moment.Moment | undefined;

    constructor(data?: IUploadTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"];
            this.expirationOnUtc = data["expirationOnUtc"] ? moment(data["expirationOnUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UploadTokenOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UploadTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["expirationOnUtc"] = this.expirationOnUtc ? this.expirationOnUtc.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUploadTokenOutput {
    token: string | undefined;
    expirationOnUtc: moment.Moment | undefined;
}

export class UpdatePictureInput implements IUpdatePictureInput {
    /** 名称 */
    name!: string | undefined;
    /** 分组Id */
    groupId!: number | undefined;
    id!: number | undefined;

    constructor(data?: IUpdatePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.groupId = data["groupId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UpdatePictureInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["groupId"] = this.groupId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUpdatePictureInput {
    /** 名称 */
    name: string | undefined;
    /** 分组Id */
    groupId: number | undefined;
    id: number | undefined;
}

export class BatchMove2GroupInput implements IBatchMove2GroupInput {
    /** 分组Id */
    groupId!: number | undefined;
    /** 需要转移的图片Id */
    ids!: number[];

    constructor(data?: IBatchMove2GroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ids = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.groupId = data["groupId"];
            if (data["ids"] && data["ids"].constructor === Array) {
                this.ids = [] as any;
                for (let item of data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): BatchMove2GroupInput {
        data = typeof data === 'object' ? data : {};
        let result = new BatchMove2GroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        if (this.ids && this.ids.constructor === Array) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IBatchMove2GroupInput {
    /** 分组Id */
    groupId: number | undefined;
    /** 需要转移的图片Id */
    ids: number[];
}

export class PictureGroupListDto implements IPictureGroupListDto {
    /** 分组名称 */
    name!: string | undefined;
    /** 图片数量 */
    pictureNum!: number | undefined;
    /** 是否系统分组 */
    isSystemGroup!: boolean | undefined;
    /** 创建者Id */
    creatorUserId!: number | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IPictureGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.pictureNum = data["pictureNum"];
            this.isSystemGroup = data["isSystemGroup"];
            this.creatorUserId = data["creatorUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PictureGroupListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PictureGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["pictureNum"] = this.pictureNum;
        data["isSystemGroup"] = this.isSystemGroup;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IPictureGroupListDto {
    /** 分组名称 */
    name: string | undefined;
    /** 图片数量 */
    pictureNum: number | undefined;
    /** 是否系统分组 */
    isSystemGroup: boolean | undefined;
    /** 创建者Id */
    creatorUserId: number | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class CreateOrUpdatePictureGroupInput implements ICreateOrUpdatePictureGroupInput {
    name!: string;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdatePictureGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdatePictureGroupInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdatePictureGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdatePictureGroupInput {
    name: string;
    id: number | undefined;
}

export class PagedResultDtoOfProductListDto implements IPagedResultDtoOfProductListDto {
    totalCount!: number | undefined;
    items!: ProductListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ProductListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProductListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfProductListDto {
    totalCount: number | undefined;
    items: ProductListDto[] | undefined;
}

export class ProductListDto implements IProductListDto {
    /** 商品名 */
    name!: string | undefined;
    /** 短描述/推荐语 */
    shortDescription!: string | undefined;
    /** SKU */
    sku!: string | undefined;
    /** 库存数量 */
    stockQuantity!: number | undefined;
    /** 售价 */
    price!: number | undefined;
    /** 货物成本/进货价 */
    goodCost!: number | undefined;
    /** 图片Url */
    pictureUrl!: string | undefined;
    id!: number | undefined;

    constructor(data?: IProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.shortDescription = data["shortDescription"];
            this.sku = data["sku"];
            this.stockQuantity = data["stockQuantity"];
            this.price = data["price"];
            this.goodCost = data["goodCost"];
            this.pictureUrl = data["pictureUrl"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortDescription"] = this.shortDescription;
        data["sku"] = this.sku;
        data["stockQuantity"] = this.stockQuantity;
        data["price"] = this.price;
        data["goodCost"] = this.goodCost;
        data["pictureUrl"] = this.pictureUrl;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductListDto {
    /** 商品名 */
    name: string | undefined;
    /** 短描述/推荐语 */
    shortDescription: string | undefined;
    /** SKU */
    sku: string | undefined;
    /** 库存数量 */
    stockQuantity: number | undefined;
    /** 售价 */
    price: number | undefined;
    /** 货物成本/进货价 */
    goodCost: number | undefined;
    /** 图片Url */
    pictureUrl: string | undefined;
    id: number | undefined;
}

export class GetProductAttributeMappingOutput implements IGetProductAttributeMappingOutput {
    /** 商品属性和值 */
    attributes!: ProductAttributeDto[] | undefined;
    /** 商品属性组合 */
    attributeCombinations!: AttributeCombinationDto[] | undefined;

    constructor(data?: IGetProductAttributeMappingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["attributes"] && data["attributes"].constructor === Array) {
                this.attributes = [] as any;
                for (let item of data["attributes"])
                    this.attributes!.push(ProductAttributeDto.fromJS(item));
            }
            if (data["attributeCombinations"] && data["attributeCombinations"].constructor === Array) {
                this.attributeCombinations = [] as any;
                for (let item of data["attributeCombinations"])
                    this.attributeCombinations!.push(AttributeCombinationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetProductAttributeMappingOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductAttributeMappingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.attributes && this.attributes.constructor === Array) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        if (this.attributeCombinations && this.attributeCombinations.constructor === Array) {
            data["attributeCombinations"] = [];
            for (let item of this.attributeCombinations)
                data["attributeCombinations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetProductAttributeMappingOutput {
    /** 商品属性和值 */
    attributes: ProductAttributeDto[] | undefined;
    /** 商品属性组合 */
    attributeCombinations: AttributeCombinationDto[] | undefined;
}

/** 属性组合 */
export class AttributeCombinationDto implements IAttributeCombinationDto {
    /** 属性值 */
    attributes!: ProductAttributeDto[] | undefined;
    /** 库存 */
    stockQuantity!: number | undefined;
    /** SKU */
    sku!: string | undefined;
    /** 第三方sku(仓储发货备用) */
    thirdPartySku!: string | undefined;
    /** 价格覆盖 */
    overriddenPrice!: number | undefined;
    /** 成本覆盖 */
    overriddenGoodCost!: number | undefined;
    id!: number | undefined;

    constructor(data?: IAttributeCombinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["attributes"] && data["attributes"].constructor === Array) {
                this.attributes = [] as any;
                for (let item of data["attributes"])
                    this.attributes!.push(ProductAttributeDto.fromJS(item));
            }
            this.stockQuantity = data["stockQuantity"];
            this.sku = data["sku"];
            this.thirdPartySku = data["thirdPartySku"];
            this.overriddenPrice = data["overriddenPrice"];
            this.overriddenGoodCost = data["overriddenGoodCost"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AttributeCombinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeCombinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.attributes && this.attributes.constructor === Array) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        data["stockQuantity"] = this.stockQuantity;
        data["sku"] = this.sku;
        data["thirdPartySku"] = this.thirdPartySku;
        data["overriddenPrice"] = this.overriddenPrice;
        data["overriddenGoodCost"] = this.overriddenGoodCost;
        data["id"] = this.id;
        return data; 
    }
}

/** 属性组合 */
export interface IAttributeCombinationDto {
    /** 属性值 */
    attributes: ProductAttributeDto[] | undefined;
    /** 库存 */
    stockQuantity: number | undefined;
    /** SKU */
    sku: string | undefined;
    /** 第三方sku(仓储发货备用) */
    thirdPartySku: string | undefined;
    /** 价格覆盖 */
    overriddenPrice: number | undefined;
    /** 成本覆盖 */
    overriddenGoodCost: number | undefined;
    id: number | undefined;
}

export class GetProductForEditOutput implements IGetProductForEditOutput {
    /** 商品名 */
    name!: string | undefined;
    /** 短描述/推荐语 */
    shortDescription!: string | undefined;
    /** 长描述(Html) */
    fullDescription!: string | undefined;
    /** SKU */
    sku!: string | undefined;
    /** 第三方sku(仓储发货备用) */
    thirdPartySku!: string | undefined;
    /** 库存数量 */
    stockQuantity!: number | undefined;
    /** 低库存通知（暂不实现） */
    notifyQuantityBelow!: number | undefined;
    /** 售价 */
    price!: number | undefined;
    /** 货物成本/进货价 */
    goodCost!: number | undefined;
    /** 重量（发货毛重） */
    weight!: number | undefined;
    /** 长 */
    length!: number | undefined;
    /** 宽 */
    width!: number | undefined;
    /** 高 */
    height!: number | undefined;
    /** 分类 */
    categories!: ProductCategoryDto[] | undefined;
    /** 图片 */
    pictures!: ProductPictureDto[] | undefined;
    /** 商品属性和值 */
    attributes!: ProductAttributeDto[] | undefined;
    /** 商品属性组合 */
    attributeCombinations!: AttributeCombinationDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IGetProductForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.shortDescription = data["shortDescription"];
            this.fullDescription = data["fullDescription"];
            this.sku = data["sku"];
            this.thirdPartySku = data["thirdPartySku"];
            this.stockQuantity = data["stockQuantity"];
            this.notifyQuantityBelow = data["notifyQuantityBelow"];
            this.price = data["price"];
            this.goodCost = data["goodCost"];
            this.weight = data["weight"];
            this.length = data["length"];
            this.width = data["width"];
            this.height = data["height"];
            if (data["categories"] && data["categories"].constructor === Array) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(ProductCategoryDto.fromJS(item));
            }
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [] as any;
                for (let item of data["pictures"])
                    this.pictures!.push(ProductPictureDto.fromJS(item));
            }
            if (data["attributes"] && data["attributes"].constructor === Array) {
                this.attributes = [] as any;
                for (let item of data["attributes"])
                    this.attributes!.push(ProductAttributeDto.fromJS(item));
            }
            if (data["attributeCombinations"] && data["attributeCombinations"].constructor === Array) {
                this.attributeCombinations = [] as any;
                for (let item of data["attributeCombinations"])
                    this.attributeCombinations!.push(AttributeCombinationDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetProductForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortDescription"] = this.shortDescription;
        data["fullDescription"] = this.fullDescription;
        data["sku"] = this.sku;
        data["thirdPartySku"] = this.thirdPartySku;
        data["stockQuantity"] = this.stockQuantity;
        data["notifyQuantityBelow"] = this.notifyQuantityBelow;
        data["price"] = this.price;
        data["goodCost"] = this.goodCost;
        data["weight"] = this.weight;
        data["length"] = this.length;
        data["width"] = this.width;
        data["height"] = this.height;
        if (this.categories && this.categories.constructor === Array) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item.toJSON());
        }
        if (this.attributes && this.attributes.constructor === Array) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        if (this.attributeCombinations && this.attributeCombinations.constructor === Array) {
            data["attributeCombinations"] = [];
            for (let item of this.attributeCombinations)
                data["attributeCombinations"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetProductForEditOutput {
    /** 商品名 */
    name: string | undefined;
    /** 短描述/推荐语 */
    shortDescription: string | undefined;
    /** 长描述(Html) */
    fullDescription: string | undefined;
    /** SKU */
    sku: string | undefined;
    /** 第三方sku(仓储发货备用) */
    thirdPartySku: string | undefined;
    /** 库存数量 */
    stockQuantity: number | undefined;
    /** 低库存通知（暂不实现） */
    notifyQuantityBelow: number | undefined;
    /** 售价 */
    price: number | undefined;
    /** 货物成本/进货价 */
    goodCost: number | undefined;
    /** 重量（发货毛重） */
    weight: number | undefined;
    /** 长 */
    length: number | undefined;
    /** 宽 */
    width: number | undefined;
    /** 高 */
    height: number | undefined;
    /** 分类 */
    categories: ProductCategoryDto[] | undefined;
    /** 图片 */
    pictures: ProductPictureDto[] | undefined;
    /** 商品属性和值 */
    attributes: ProductAttributeDto[] | undefined;
    /** 商品属性组合 */
    attributeCombinations: AttributeCombinationDto[] | undefined;
    id: number | undefined;
}

export class ProductCategoryDto implements IProductCategoryDto {
    /** 分类Id */
    id!: number | undefined;
    /** 分类名称(非必填) */
    name!: string | undefined;

    constructor(data?: IProductCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ProductCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IProductCategoryDto {
    /** 分类Id */
    id: number | undefined;
    /** 分类名称(非必填) */
    name: string | undefined;
}

/** 产品图片 */
export class ProductPictureDto implements IProductPictureDto {
    /** 图片Id */
    id!: number | undefined;
    /** 图片Url */
    url!: string | undefined;

    constructor(data?: IProductPictureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): ProductPictureDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPictureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        return data; 
    }
}

/** 产品图片 */
export interface IProductPictureDto {
    /** 图片Id */
    id: number | undefined;
    /** 图片Url */
    url: string | undefined;
}

export class CreateOrUpdateProductInput implements ICreateOrUpdateProductInput {
    /** Id，空或者为0时创建商品 */
    id!: number | undefined;
    /** 商品名 */
    name!: string | undefined;
    /** 短描述/推荐语 */
    shortDescription!: string | undefined;
    /** 长描述(Html) */
    fullDescription!: string | undefined;
    /** SKU */
    sku!: string | undefined;
    /** 第三方sku(仓储发货备用) */
    thirdPartySku!: string | undefined;
    /** 库存数量 */
    stockQuantity!: number | undefined;
    /** 低库存通知（暂不实现） */
    notifyQuantityBelow!: number | undefined;
    /** 售价 */
    price!: number | undefined;
    /** 货物成本/进货价 */
    goodCost!: number | undefined;
    /** 重量（发货毛重） */
    weight!: number | undefined;
    /** 长 */
    length!: number | undefined;
    /** 宽 */
    width!: number | undefined;
    /** 高 */
    height!: number | undefined;
    /** 分类 */
    categories!: ProductCategoryDto[] | undefined;
    /** 图片 */
    pictures!: ProductPictureDto[] | undefined;
    /** 商品属性和值 */
    attributes!: ProductAttributeDto[] | undefined;
    /** 商品属性组合 */
    attributeCombinations!: AttributeCombinationDto[] | undefined;

    constructor(data?: ICreateOrUpdateProductInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.shortDescription = data["shortDescription"];
            this.fullDescription = data["fullDescription"];
            this.sku = data["sku"];
            this.thirdPartySku = data["thirdPartySku"];
            this.stockQuantity = data["stockQuantity"];
            this.notifyQuantityBelow = data["notifyQuantityBelow"];
            this.price = data["price"];
            this.goodCost = data["goodCost"];
            this.weight = data["weight"];
            this.length = data["length"];
            this.width = data["width"];
            this.height = data["height"];
            if (data["categories"] && data["categories"].constructor === Array) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(ProductCategoryDto.fromJS(item));
            }
            if (data["pictures"] && data["pictures"].constructor === Array) {
                this.pictures = [] as any;
                for (let item of data["pictures"])
                    this.pictures!.push(ProductPictureDto.fromJS(item));
            }
            if (data["attributes"] && data["attributes"].constructor === Array) {
                this.attributes = [] as any;
                for (let item of data["attributes"])
                    this.attributes!.push(ProductAttributeDto.fromJS(item));
            }
            if (data["attributeCombinations"] && data["attributeCombinations"].constructor === Array) {
                this.attributeCombinations = [] as any;
                for (let item of data["attributeCombinations"])
                    this.attributeCombinations!.push(AttributeCombinationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateProductInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateProductInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortDescription"] = this.shortDescription;
        data["fullDescription"] = this.fullDescription;
        data["sku"] = this.sku;
        data["thirdPartySku"] = this.thirdPartySku;
        data["stockQuantity"] = this.stockQuantity;
        data["notifyQuantityBelow"] = this.notifyQuantityBelow;
        data["price"] = this.price;
        data["goodCost"] = this.goodCost;
        data["weight"] = this.weight;
        data["length"] = this.length;
        data["width"] = this.width;
        data["height"] = this.height;
        if (this.categories && this.categories.constructor === Array) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (this.pictures && this.pictures.constructor === Array) {
            data["pictures"] = [];
            for (let item of this.pictures)
                data["pictures"].push(item.toJSON());
        }
        if (this.attributes && this.attributes.constructor === Array) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        if (this.attributeCombinations && this.attributeCombinations.constructor === Array) {
            data["attributeCombinations"] = [];
            for (let item of this.attributeCombinations)
                data["attributeCombinations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateProductInput {
    /** Id，空或者为0时创建商品 */
    id: number | undefined;
    /** 商品名 */
    name: string | undefined;
    /** 短描述/推荐语 */
    shortDescription: string | undefined;
    /** 长描述(Html) */
    fullDescription: string | undefined;
    /** SKU */
    sku: string | undefined;
    /** 第三方sku(仓储发货备用) */
    thirdPartySku: string | undefined;
    /** 库存数量 */
    stockQuantity: number | undefined;
    /** 低库存通知（暂不实现） */
    notifyQuantityBelow: number | undefined;
    /** 售价 */
    price: number | undefined;
    /** 货物成本/进货价 */
    goodCost: number | undefined;
    /** 重量（发货毛重） */
    weight: number | undefined;
    /** 长 */
    length: number | undefined;
    /** 宽 */
    width: number | undefined;
    /** 高 */
    height: number | undefined;
    /** 分类 */
    categories: ProductCategoryDto[] | undefined;
    /** 图片 */
    pictures: ProductPictureDto[] | undefined;
    /** 商品属性和值 */
    attributes: ProductAttributeDto[] | undefined;
    /** 商品属性组合 */
    attributeCombinations: AttributeCombinationDto[] | undefined;
}

export class CreateOrUpdateAttributeInput implements ICreateOrUpdateAttributeInput {
    /** 属性名称 */
    name!: string | undefined;
    /** 排序标志 */
    displayOrder!: number | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateAttributeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayOrder = data["displayOrder"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateAttributeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateAttributeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayOrder"] = this.displayOrder;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateAttributeInput {
    /** 属性名称 */
    name: string | undefined;
    /** 排序标志 */
    displayOrder: number | undefined;
    id: number | undefined;
}

/** 商品属性 */
export class ProductAttributeListDto implements IProductAttributeListDto {
    /** 商品属性名 */
    name!: string | undefined;
    id!: number | undefined;

    constructor(data?: IProductAttributeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductAttributeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAttributeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }
}

/** 商品属性 */
export interface IProductAttributeListDto {
    /** 商品属性名 */
    name: string | undefined;
    id: number | undefined;
}

/** 预定义属性值 */
export class PredefinedProductAttributeValueDto implements IPredefinedProductAttributeValueDto {
    /** 值 */
    name!: string | undefined;
    /** 排序Id */
    displayOrder!: number | undefined;
    id!: number | undefined;

    constructor(data?: IPredefinedProductAttributeValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayOrder = data["displayOrder"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PredefinedProductAttributeValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new PredefinedProductAttributeValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayOrder"] = this.displayOrder;
        data["id"] = this.id;
        return data; 
    }
}

/** 预定义属性值 */
export interface IPredefinedProductAttributeValueDto {
    /** 值 */
    name: string | undefined;
    /** 排序Id */
    displayOrder: number | undefined;
    id: number | undefined;
}

export class CreateOrUpdateAttributeValueInput implements ICreateOrUpdateAttributeValueInput {
    /** 属性Id */
    attributeId!: number | undefined;
    /** 属性名称 */
    name!: string | undefined;
    /** 排序标志 */
    displayOrder!: number | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateAttributeValueInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attributeId = data["attributeId"];
            this.name = data["name"];
            this.displayOrder = data["displayOrder"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateAttributeValueInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateAttributeValueInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeId"] = this.attributeId;
        data["name"] = this.name;
        data["displayOrder"] = this.displayOrder;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateAttributeValueInput {
    /** 属性Id */
    attributeId: number | undefined;
    /** 属性名称 */
    name: string | undefined;
    /** 排序标志 */
    displayOrder: number | undefined;
    id: number | undefined;
}

export class CurrentUserProfileEditDto implements ICurrentUserProfileEditDto {
    /** 名字 */
    name!: string;
    /** 昵称 */
    nickName!: string;
    /** 用户名 */
    userName!: string;
    /** 邮箱地址 */
    emailAddress!: string;
    phoneNumber!: string | undefined;
    /** 时区 */
    timezone!: string | undefined;
    /** 性别0 = Unknown ; 1 = M ; 2 = F */
    gender!: CurrentUserProfileEditDtoGender | undefined;
    /** 头像Url */
    profilePictureUrl!: string | undefined;
    /** 图片Id */
    profilePictureId!: number | undefined;

    constructor(data?: ICurrentUserProfileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.nickName = data["nickName"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.timezone = data["timezone"];
            this.gender = data["gender"];
            this.profilePictureUrl = data["profilePictureUrl"];
            this.profilePictureId = data["profilePictureId"];
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nickName"] = this.nickName;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["timezone"] = this.timezone;
        data["gender"] = this.gender;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["profilePictureId"] = this.profilePictureId;
        return data; 
    }
}

export interface ICurrentUserProfileEditDto {
    /** 名字 */
    name: string;
    /** 昵称 */
    nickName: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    phoneNumber: string | undefined;
    /** 时区 */
    timezone: string | undefined;
    /** 性别0 = Unknown ; 1 = M ; 2 = F */
    gender: CurrentUserProfileEditDtoGender | undefined;
    /** 头像Url */
    profilePictureUrl: string | undefined;
    /** 图片Id */
    profilePictureId: number | undefined;
}

export class ChangePasswordInput implements IChangePasswordInput {
    /** 旧密码 */
    currentPassword!: string;
    /** 新密码 */
    newPassword!: string;

    constructor(data?: IChangePasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currentPassword = data["currentPassword"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePasswordInput {
    /** 旧密码 */
    currentPassword: string;
    /** 新密码 */
    newPassword: string;
}

export class ChangePasswordByPhoneInput implements IChangePasswordByPhoneInput {
    /** 手机验证码 */
    code!: string;
    /** 新密码 */
    newPassword!: string;

    constructor(data?: IChangePasswordByPhoneInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordByPhoneInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordByPhoneInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePasswordByPhoneInput {
    /** 手机验证码 */
    code: string;
    /** 新密码 */
    newPassword: string;
}

export class BindingPhoneNumInput implements IBindingPhoneNumInput {
    /** 手机号码 */
    phoneNum!: string | undefined;
    /** 手机验证码 */
    code!: string;

    constructor(data?: IBindingPhoneNumInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phoneNum = data["phoneNum"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): BindingPhoneNumInput {
        data = typeof data === 'object' ? data : {};
        let result = new BindingPhoneNumInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNum"] = this.phoneNum;
        data["code"] = this.code;
        return data; 
    }
}

export interface IBindingPhoneNumInput {
    /** 手机号码 */
    phoneNum: string | undefined;
    /** 手机验证码 */
    code: string;
}

export class ChangeBindingPhoneNumInput implements IChangeBindingPhoneNumInput {
    /** 解绑码 */
    validCode!: string;
    /** 手机号码 */
    newTelephone!: string | undefined;
    /** 手机验证码 */
    bundlingCode!: string;

    constructor(data?: IChangeBindingPhoneNumInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.validCode = data["validCode"];
            this.newTelephone = data["newTelephone"];
            this.bundlingCode = data["bundlingCode"];
        }
    }

    static fromJS(data: any): ChangeBindingPhoneNumInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeBindingPhoneNumInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validCode"] = this.validCode;
        data["newTelephone"] = this.newTelephone;
        data["bundlingCode"] = this.bundlingCode;
        return data; 
    }
}

export interface IChangeBindingPhoneNumInput {
    /** 解绑码 */
    validCode: string;
    /** 手机号码 */
    newTelephone: string | undefined;
    /** 手机验证码 */
    bundlingCode: string;
}

export class UpdateProfilePictureInput implements IUpdateProfilePictureInput {
    /** 图片Id */
    profilePictureId!: number | undefined;

    constructor(data?: IUpdateProfilePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProfilePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        return data; 
    }
}

export interface IUpdateProfilePictureInput {
    /** 图片Id */
    profilePictureId: number | undefined;
}

export class GetPasswordComplexitySettingOutput implements IGetPasswordComplexitySettingOutput {
    setting!: PasswordComplexitySetting | undefined;

    constructor(data?: IGetPasswordComplexitySettingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.setting = data["setting"] ? PasswordComplexitySetting.fromJS(data["setting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetPasswordComplexitySettingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setting"] = this.setting ? this.setting.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting | undefined;
}

export class GetProfilePictureOutput implements IGetProfilePictureOutput {
    profilePicture!: string | undefined;

    constructor(data?: IGetProfilePictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePicture = data["profilePicture"];
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetProfilePictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data; 
    }
}

export interface IGetProfilePictureOutput {
    profilePicture: string | undefined;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    /** 语言名称 */
    languageName!: string;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data; 
    }
}

export interface IChangeUserLanguageDto {
    /** 语言名称 */
    languageName: string;
}

export class UserSecurityInfoDto implements IUserSecurityInfoDto {
    emailAddress!: string | undefined;
    phoneNumber!: string | undefined;
    weChat!: string | undefined;
    qq!: string | undefined;
    weiBo!: string | undefined;

    constructor(data?: IUserSecurityInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.weChat = data["weChat"];
            this.qq = data["qq"];
            this.weiBo = data["weiBo"];
        }
    }

    static fromJS(data: any): UserSecurityInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSecurityInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["weChat"] = this.weChat;
        data["qq"] = this.qq;
        data["weiBo"] = this.weiBo;
        return data; 
    }
}

export interface IUserSecurityInfoDto {
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    weChat: string | undefined;
    qq: string | undefined;
    weiBo: string | undefined;
}

export class BindingEmailInput implements IBindingEmailInput {
    /** 手机号码 */
    emailAddress!: string | undefined;
    /** 邮箱验证码 */
    code!: string;

    constructor(data?: IBindingEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): BindingEmailInput {
        data = typeof data === 'object' ? data : {};
        let result = new BindingEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["code"] = this.code;
        return data; 
    }
}

export interface IBindingEmailInput {
    /** 手机号码 */
    emailAddress: string | undefined;
    /** 邮箱验证码 */
    code: string;
}

export class ChangeBindingEmailInput implements IChangeBindingEmailInput {
    /** 解绑码 */
    validCode!: string;
    /** 新邮箱验证码 */
    newEmailAddress!: string | undefined;
    /** 绑定码 */
    bindlingCode!: string;

    constructor(data?: IChangeBindingEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.validCode = data["validCode"];
            this.newEmailAddress = data["newEmailAddress"];
            this.bindlingCode = data["bindlingCode"];
        }
    }

    static fromJS(data: any): ChangeBindingEmailInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeBindingEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validCode"] = this.validCode;
        data["newEmailAddress"] = this.newEmailAddress;
        data["bindlingCode"] = this.bindlingCode;
        return data; 
    }
}

export interface IChangeBindingEmailInput {
    /** 解绑码 */
    validCode: string;
    /** 新邮箱验证码 */
    newEmailAddress: string | undefined;
    /** 绑定码 */
    bindlingCode: string;
}

export class PagedResultDtoOfRoleListDto implements IPagedResultDtoOfRoleListDto {
    totalCount!: number | undefined;
    items!: RoleListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfRoleListDto {
    totalCount: number | undefined;
    items: RoleListDto[] | undefined;
}

export class RoleListDto implements IRoleListDto {
    /** 角色名称 */
    name!: string | undefined;
    /** 显示名称 */
    displayName!: string | undefined;
    /** 是否为系统角色 */
    isStatic!: boolean | undefined;
    /** 是否默认分配(给用户) */
    isDefault!: boolean | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleListDto {
    /** 角色名称 */
    name: string | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 是否为系统角色 */
    isStatic: boolean | undefined;
    /** 是否默认分配(给用户) */
    isDefault: boolean | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    /** 角色详情 */
    role!: RoleEditDto | undefined;
    /** 权限集合 */
    permissions!: FlatPermissionDto[] | undefined;
    /** 赋予权限名称集合 */
    grantedPermissionNames!: string[] | undefined;

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : <any>undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [] as any;
                for (let item of data["permissions"])
                    this.permissions!.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames!.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetRoleForEditOutput {
    /** 角色详情 */
    role: RoleEditDto | undefined;
    /** 权限集合 */
    permissions: FlatPermissionDto[] | undefined;
    /** 赋予权限名称集合 */
    grantedPermissionNames: string[] | undefined;
}

export class RoleEditDto implements IRoleEditDto {
    /** 角色Id(可空) */
    id!: number | undefined;
    /** 显示名 */
    displayName!: string;
    /** 是否默认 */
    isDefault!: boolean | undefined;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface IRoleEditDto {
    /** 角色Id(可空) */
    id: number | undefined;
    /** 显示名 */
    displayName: string;
    /** 是否默认 */
    isDefault: boolean | undefined;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    /** 父权限名称 */
    parentName!: string | undefined;
    /** (系统)名称 */
    name!: string | undefined;
    /** 显示名称 */
    displayName!: string | undefined;
    /** 描述 */
    description!: string | undefined;
    /** 默认授予 */
    isGrantedByDefault!: boolean | undefined;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionDto {
    /** 父权限名称 */
    parentName: string | undefined;
    /** (系统)名称 */
    name: string | undefined;
    /** 显示名称 */
    displayName: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** 默认授予 */
    isGrantedByDefault: boolean | undefined;
}

export class CreateOrUpdateRoleInput implements ICreateOrUpdateRoleInput {
    /** 角色详情 */
    role!: RoleEditDto;
    /** 授予权限 */
    grantedPermissionNames!: string[];

    constructor(data?: ICreateOrUpdateRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.role = new RoleEditDto();
            this.grantedPermissionNames = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface ICreateOrUpdateRoleInput {
    /** 角色详情 */
    role: RoleEditDto;
    /** 授予权限 */
    grantedPermissionNames: string[];
}

export class SaleStatisticDto implements ISaleStatisticDto {
    /** 统计时间 */
    date!: string | undefined;
    /** 渠道 */
    channel!: string | undefined;
    /** 商品 */
    product!: string | undefined;
    /** 下单数量 */
    orderNum!: number | undefined;
    /** 下单金额 */
    orderTotal!: number | undefined;
    /** 广告消耗 */
    advertCost!: number | undefined;
    /** 转化成本 */
    transformCost!: number | undefined;
    /** ROI */
    roi!: number | undefined;
    /** 发货数量 */
    shipmentNum!: number | undefined;
    /** 签收数量 */
    receivedNum!: number | undefined;
    /** 签收金额 */
    receivedTotal!: number | undefined;
    /** 签收率 */
    receivedRate!: number | undefined;
    /** 签收成本 */
    receivedCost!: number | undefined;
    /** 拒签数量 */
    rejectNum!: number | undefined;
    /** 拒签金额 */
    rejectTotal!: number | undefined;
    /** 拒签率 */
    rejectRate!: number | undefined;
    /** 货物成本 */
    goodsCost!: number | undefined;
    /** 物流费用 */
    shipmentCost!: number | undefined;
    /** 佣金 */
    rewardAmount!: number | undefined;
    /** 总成本 */
    totalCost!: number | undefined;
    /** 利润 */
    profit!: number | undefined;
    /** 利润率 */
    profitRate!: number | undefined;
    /** 成本利润率 */
    costProfitRate!: number | undefined;

    constructor(data?: ISaleStatisticDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.date = data["date"];
            this.channel = data["channel"];
            this.product = data["product"];
            this.orderNum = data["orderNum"];
            this.orderTotal = data["orderTotal"];
            this.advertCost = data["advertCost"];
            this.transformCost = data["transformCost"];
            this.roi = data["roi"];
            this.shipmentNum = data["shipmentNum"];
            this.receivedNum = data["receivedNum"];
            this.receivedTotal = data["receivedTotal"];
            this.receivedRate = data["receivedRate"];
            this.receivedCost = data["receivedCost"];
            this.rejectNum = data["rejectNum"];
            this.rejectTotal = data["rejectTotal"];
            this.rejectRate = data["rejectRate"];
            this.goodsCost = data["goodsCost"];
            this.shipmentCost = data["shipmentCost"];
            this.rewardAmount = data["rewardAmount"];
            this.totalCost = data["totalCost"];
            this.profit = data["profit"];
            this.profitRate = data["profitRate"];
            this.costProfitRate = data["costProfitRate"];
        }
    }

    static fromJS(data: any): SaleStatisticDto {
        data = typeof data === 'object' ? data : {};
        let result = new SaleStatisticDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["channel"] = this.channel;
        data["product"] = this.product;
        data["orderNum"] = this.orderNum;
        data["orderTotal"] = this.orderTotal;
        data["advertCost"] = this.advertCost;
        data["transformCost"] = this.transformCost;
        data["roi"] = this.roi;
        data["shipmentNum"] = this.shipmentNum;
        data["receivedNum"] = this.receivedNum;
        data["receivedTotal"] = this.receivedTotal;
        data["receivedRate"] = this.receivedRate;
        data["receivedCost"] = this.receivedCost;
        data["rejectNum"] = this.rejectNum;
        data["rejectTotal"] = this.rejectTotal;
        data["rejectRate"] = this.rejectRate;
        data["goodsCost"] = this.goodsCost;
        data["shipmentCost"] = this.shipmentCost;
        data["rewardAmount"] = this.rewardAmount;
        data["totalCost"] = this.totalCost;
        data["profit"] = this.profit;
        data["profitRate"] = this.profitRate;
        data["costProfitRate"] = this.costProfitRate;
        return data; 
    }
}

export interface ISaleStatisticDto {
    /** 统计时间 */
    date: string | undefined;
    /** 渠道 */
    channel: string | undefined;
    /** 商品 */
    product: string | undefined;
    /** 下单数量 */
    orderNum: number | undefined;
    /** 下单金额 */
    orderTotal: number | undefined;
    /** 广告消耗 */
    advertCost: number | undefined;
    /** 转化成本 */
    transformCost: number | undefined;
    /** ROI */
    roi: number | undefined;
    /** 发货数量 */
    shipmentNum: number | undefined;
    /** 签收数量 */
    receivedNum: number | undefined;
    /** 签收金额 */
    receivedTotal: number | undefined;
    /** 签收率 */
    receivedRate: number | undefined;
    /** 签收成本 */
    receivedCost: number | undefined;
    /** 拒签数量 */
    rejectNum: number | undefined;
    /** 拒签金额 */
    rejectTotal: number | undefined;
    /** 拒签率 */
    rejectRate: number | undefined;
    /** 货物成本 */
    goodsCost: number | undefined;
    /** 物流费用 */
    shipmentCost: number | undefined;
    /** 佣金 */
    rewardAmount: number | undefined;
    /** 总成本 */
    totalCost: number | undefined;
    /** 利润 */
    profit: number | undefined;
    /** 利润率 */
    profitRate: number | undefined;
    /** 成本利润率 */
    costProfitRate: number | undefined;
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    user!: UserLoginInfoDto | undefined;
    tenant!: TenantLoginInfoDto | undefined;
    application!: ApplicationInfoDto | undefined;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : <any>undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : <any>undefined;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto | undefined;
    tenant: TenantLoginInfoDto | undefined;
    application: ApplicationInfoDto | undefined;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    /** 昵称(可空,显示字段请处理) */
    nickName!: string | undefined;
    /** 用户名(可空,显示字段请处理) */
    userName!: string | undefined;
    /** 邮箱地址(可空,显示字段请处理) */
    emailAddress!: string | undefined;
    /** 电话号码(可空,显示字段请处理) */
    phoneNumber!: string | undefined;
    /** 头像Id */
    profilePictureUrl!: string | undefined;
    /** 未读消息数量 */
    unreadNotificationCount!: number | undefined;
    /** 空密码 */
    emptyPassword!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.nickName = data["nickName"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.profilePictureUrl = data["profilePictureUrl"];
            this.unreadNotificationCount = data["unreadNotificationCount"];
            this.emptyPassword = data["emptyPassword"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nickName"] = this.nickName;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["unreadNotificationCount"] = this.unreadNotificationCount;
        data["emptyPassword"] = this.emptyPassword;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserLoginInfoDto {
    /** 昵称(可空,显示字段请处理) */
    nickName: string | undefined;
    /** 用户名(可空,显示字段请处理) */
    userName: string | undefined;
    /** 邮箱地址(可空,显示字段请处理) */
    emailAddress: string | undefined;
    /** 电话号码(可空,显示字段请处理) */
    phoneNumber: string | undefined;
    /** 头像Id */
    profilePictureUrl: string | undefined;
    /** 未读消息数量 */
    unreadNotificationCount: number | undefined;
    /** 空密码 */
    emptyPassword: boolean | undefined;
    id: number | undefined;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    /** 租户名称(系统名称) */
    tenancyName!: string | undefined;
    /** 租户名称(显示用) */
    name!: string | undefined;
    /** Logo Id */
    logoId!: number | undefined;
    /** Logo url */
    logoUrl!: string | undefined;
    /** Logo 文件类型 */
    logoFileType!: string | undefined;
    /** 是否试用中（在试用有效期内） */
    isInTrialPeriod!: boolean | undefined;
    /** 是否曾经试用过 */
    hadTrialed!: boolean | undefined;
    /** 版本信息 */
    edition!: EditionInfoDto | undefined;
    /** 创建时间(Utc) */
    creationTime!: moment.Moment | undefined;
    /** 创建时间 */
    creationTimeString!: string | undefined;
    /** 订阅结束时间 */
    subscriptionEndDateUtc!: moment.Moment | undefined;
    /** 订阅结束时间(字符串) */
    subscriptionDateString!: string | undefined;
    id!: number | undefined;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.logoId = data["logoId"];
            this.logoUrl = data["logoUrl"];
            this.logoFileType = data["logoFileType"];
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.hadTrialed = data["hadTrialed"];
            this.edition = data["edition"] ? EditionInfoDto.fromJS(data["edition"]) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creationTimeString = data["creationTimeString"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.subscriptionDateString = data["subscriptionDateString"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["logoId"] = this.logoId;
        data["logoUrl"] = this.logoUrl;
        data["logoFileType"] = this.logoFileType;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["hadTrialed"] = this.hadTrialed;
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creationTimeString"] = this.creationTimeString;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["subscriptionDateString"] = this.subscriptionDateString;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantLoginInfoDto {
    /** 租户名称(系统名称) */
    tenancyName: string | undefined;
    /** 租户名称(显示用) */
    name: string | undefined;
    /** Logo Id */
    logoId: number | undefined;
    /** Logo url */
    logoUrl: string | undefined;
    /** Logo 文件类型 */
    logoFileType: string | undefined;
    /** 是否试用中（在试用有效期内） */
    isInTrialPeriod: boolean | undefined;
    /** 是否曾经试用过 */
    hadTrialed: boolean | undefined;
    /** 版本信息 */
    edition: EditionInfoDto | undefined;
    /** 创建时间(Utc) */
    creationTime: moment.Moment | undefined;
    /** 创建时间 */
    creationTimeString: string | undefined;
    /** 订阅结束时间 */
    subscriptionEndDateUtc: moment.Moment | undefined;
    /** 订阅结束时间(字符串) */
    subscriptionDateString: string | undefined;
    id: number | undefined;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version!: string | undefined;
    releaseDate!: moment.Moment | undefined;
    features!: { [key: string] : boolean; } | undefined;

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : <any>undefined;
            if (data["features"]) {
                this.features = {} as any;
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features![key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data; 
    }
}

export interface IApplicationInfoDto {
    version: string | undefined;
    releaseDate: moment.Moment | undefined;
    features: { [key: string] : boolean; } | undefined;
}

export class EditionInfoDto implements IEditionInfoDto {
    /** 显示名称 */
    displayName!: string | undefined;
    /** 试用时间 */
    trialDayCount!: number | undefined;
    /** 月价格 */
    monthlyPrice!: number | undefined;
    /** 季度价格 */
    seasonPrice!: number | undefined;
    /** 年价格 */
    annualPrice!: number | undefined;
    /** 是否最高版本 */
    isHighestEdition!: boolean | undefined;
    /** 是否免费 */
    isFree!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: IEditionInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.trialDayCount = data["trialDayCount"];
            this.monthlyPrice = data["monthlyPrice"];
            this.seasonPrice = data["seasonPrice"];
            this.annualPrice = data["annualPrice"];
            this.isHighestEdition = data["isHighestEdition"];
            this.isFree = data["isFree"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["trialDayCount"] = this.trialDayCount;
        data["monthlyPrice"] = this.monthlyPrice;
        data["seasonPrice"] = this.seasonPrice;
        data["annualPrice"] = this.annualPrice;
        data["isHighestEdition"] = this.isHighestEdition;
        data["isFree"] = this.isFree;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionInfoDto {
    /** 显示名称 */
    displayName: string | undefined;
    /** 试用时间 */
    trialDayCount: number | undefined;
    /** 月价格 */
    monthlyPrice: number | undefined;
    /** 季度价格 */
    seasonPrice: number | undefined;
    /** 年价格 */
    annualPrice: number | undefined;
    /** 是否最高版本 */
    isHighestEdition: boolean | undefined;
    /** 是否免费 */
    isFree: boolean | undefined;
    id: number | undefined;
}

export class UpdateUserSignInTokenOutput implements IUpdateUserSignInTokenOutput {
    signInToken!: string | undefined;
    encodedUserId!: string | undefined;
    encodedTenantId!: string | undefined;

    constructor(data?: IUpdateUserSignInTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.signInToken = data["signInToken"];
            this.encodedUserId = data["encodedUserId"];
            this.encodedTenantId = data["encodedTenantId"];
        }
    }

    static fromJS(data: any): UpdateUserSignInTokenOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserSignInTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["encodedUserId"] = this.encodedUserId;
        data["encodedTenantId"] = this.encodedTenantId;
        return data; 
    }
}

export interface IUpdateUserSignInTokenOutput {
    signInToken: string | undefined;
    encodedUserId: string | undefined;
    encodedTenantId: string | undefined;
}

export class PagedResultDtoOfShipmentListDto implements IPagedResultDtoOfShipmentListDto {
    totalCount!: number | undefined;
    items!: ShipmentListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfShipmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ShipmentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfShipmentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfShipmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfShipmentListDto {
    totalCount: number | undefined;
    items: ShipmentListDto[] | undefined;
}

export class ShipmentListDto implements IShipmentListDto {
    /** 订单Id */
    orderId!: number | undefined;
    /** 订单号 */
    orderNumber!: string | undefined;
    /** 快递单号 */
    logisticsNumber!: string | undefined;
    /** 快递名称 */
    logisticsName!: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status!: ShipmentListDtoStatus | undefined;
    /** 发货状态 */
    statusString!: string | undefined;
    /** 收货姓名 */
    shippingName!: string | undefined;
    /** 收货电话 */
    shippingPhoneNumber!: string | undefined;
    /** 收货地址 */
    shippingAddress!: string | undefined;
    /** 发货时间 */
    deliveryOn!: moment.Moment | undefined;
    /** 签收时间 */
    receivedOn!: moment.Moment | undefined;
    /** 备注 */
    adminComment!: string | undefined;
    id!: number | undefined;

    constructor(data?: IShipmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.orderNumber = data["orderNumber"];
            this.logisticsNumber = data["logisticsNumber"];
            this.logisticsName = data["logisticsName"];
            this.status = data["status"];
            this.statusString = data["statusString"];
            this.shippingName = data["shippingName"];
            this.shippingPhoneNumber = data["shippingPhoneNumber"];
            this.shippingAddress = data["shippingAddress"];
            this.deliveryOn = data["deliveryOn"] ? moment(data["deliveryOn"].toString()) : <any>undefined;
            this.receivedOn = data["receivedOn"] ? moment(data["receivedOn"].toString()) : <any>undefined;
            this.adminComment = data["adminComment"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ShipmentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderNumber"] = this.orderNumber;
        data["logisticsNumber"] = this.logisticsNumber;
        data["logisticsName"] = this.logisticsName;
        data["status"] = this.status;
        data["statusString"] = this.statusString;
        data["shippingName"] = this.shippingName;
        data["shippingPhoneNumber"] = this.shippingPhoneNumber;
        data["shippingAddress"] = this.shippingAddress;
        data["deliveryOn"] = this.deliveryOn ? this.deliveryOn.toISOString() : <any>undefined;
        data["receivedOn"] = this.receivedOn ? this.receivedOn.toISOString() : <any>undefined;
        data["adminComment"] = this.adminComment;
        data["id"] = this.id;
        return data; 
    }
}

export interface IShipmentListDto {
    /** 订单Id */
    orderId: number | undefined;
    /** 订单号 */
    orderNumber: string | undefined;
    /** 快递单号 */
    logisticsNumber: string | undefined;
    /** 快递名称 */
    logisticsName: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status: ShipmentListDtoStatus | undefined;
    /** 发货状态 */
    statusString: string | undefined;
    /** 收货姓名 */
    shippingName: string | undefined;
    /** 收货电话 */
    shippingPhoneNumber: string | undefined;
    /** 收货地址 */
    shippingAddress: string | undefined;
    /** 发货时间 */
    deliveryOn: moment.Moment | undefined;
    /** 签收时间 */
    receivedOn: moment.Moment | undefined;
    /** 备注 */
    adminComment: string | undefined;
    id: number | undefined;
}

export class ShipmentDto implements IShipmentDto {
    /** 订单Id */
    orderId!: number | undefined;
    /** 订单号 */
    orderNumber!: string | undefined;
    /** 快递单号 */
    logisticsNumber!: string | undefined;
    /** 快递Id */
    logisticsId!: number | undefined;
    /** 快递名称 */
    logisticsName!: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status!: ShipmentDtoStatus | undefined;
    /** 发货状态 */
    statusString!: string | undefined;
    /** 发货时间 */
    deliveryOn!: moment.Moment | undefined;
    /** 签收时间 */
    receivedOn!: moment.Moment | undefined;
    /** 收货姓名 */
    shippingName!: string | undefined;
    /** 收货电话 */
    shippingPhoneNumber!: string | undefined;
    /** 收货地址 */
    shippingAddress!: string | undefined;
    /** 备注 */
    adminComment!: string | undefined;
    /** 重量(如果有) */
    totalWeight!: number | undefined;
    /** 体积(如果有) */
    totalVolume!: number | undefined;
    /** 发货条目 */
    items!: ShipmentItemDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IShipmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.orderNumber = data["orderNumber"];
            this.logisticsNumber = data["logisticsNumber"];
            this.logisticsId = data["logisticsId"];
            this.logisticsName = data["logisticsName"];
            this.status = data["status"];
            this.statusString = data["statusString"];
            this.deliveryOn = data["deliveryOn"] ? moment(data["deliveryOn"].toString()) : <any>undefined;
            this.receivedOn = data["receivedOn"] ? moment(data["receivedOn"].toString()) : <any>undefined;
            this.shippingName = data["shippingName"];
            this.shippingPhoneNumber = data["shippingPhoneNumber"];
            this.shippingAddress = data["shippingAddress"];
            this.adminComment = data["adminComment"];
            this.totalWeight = data["totalWeight"];
            this.totalVolume = data["totalVolume"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ShipmentItemDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ShipmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderNumber"] = this.orderNumber;
        data["logisticsNumber"] = this.logisticsNumber;
        data["logisticsId"] = this.logisticsId;
        data["logisticsName"] = this.logisticsName;
        data["status"] = this.status;
        data["statusString"] = this.statusString;
        data["deliveryOn"] = this.deliveryOn ? this.deliveryOn.toISOString() : <any>undefined;
        data["receivedOn"] = this.receivedOn ? this.receivedOn.toISOString() : <any>undefined;
        data["shippingName"] = this.shippingName;
        data["shippingPhoneNumber"] = this.shippingPhoneNumber;
        data["shippingAddress"] = this.shippingAddress;
        data["adminComment"] = this.adminComment;
        data["totalWeight"] = this.totalWeight;
        data["totalVolume"] = this.totalVolume;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IShipmentDto {
    /** 订单Id */
    orderId: number | undefined;
    /** 订单号 */
    orderNumber: string | undefined;
    /** 快递单号 */
    logisticsNumber: string | undefined;
    /** 快递Id */
    logisticsId: number | undefined;
    /** 快递名称 */
    logisticsName: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status: ShipmentDtoStatus | undefined;
    /** 发货状态 */
    statusString: string | undefined;
    /** 发货时间 */
    deliveryOn: moment.Moment | undefined;
    /** 签收时间 */
    receivedOn: moment.Moment | undefined;
    /** 收货姓名 */
    shippingName: string | undefined;
    /** 收货电话 */
    shippingPhoneNumber: string | undefined;
    /** 收货地址 */
    shippingAddress: string | undefined;
    /** 备注 */
    adminComment: string | undefined;
    /** 重量(如果有) */
    totalWeight: number | undefined;
    /** 体积(如果有) */
    totalVolume: number | undefined;
    /** 发货条目 */
    items: ShipmentItemDto[] | undefined;
    id: number | undefined;
}

export class ShipmentItemDto implements IShipmentItemDto {
    /** 商品名称 */
    productName!: string | undefined;
    /** 属性 */
    attributeInfo!: string | undefined;
    /** 订单item id */
    orderItemId!: number | undefined;
    /** 数量 */
    quantity!: number | undefined;
    id!: number | undefined;

    constructor(data?: IShipmentItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productName = data["productName"];
            this.attributeInfo = data["attributeInfo"];
            this.orderItemId = data["orderItemId"];
            this.quantity = data["quantity"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ShipmentItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["attributeInfo"] = this.attributeInfo;
        data["orderItemId"] = this.orderItemId;
        data["quantity"] = this.quantity;
        data["id"] = this.id;
        return data; 
    }
}

export interface IShipmentItemDto {
    /** 商品名称 */
    productName: string | undefined;
    /** 属性 */
    attributeInfo: string | undefined;
    /** 订单item id */
    orderItemId: number | undefined;
    /** 数量 */
    quantity: number | undefined;
    id: number | undefined;
}

export class GetShipmentForEditOutput implements IGetShipmentForEditOutput {
    /** 订单Id */
    orderId!: number | undefined;
    /** 订单号 */
    orderNumber!: string | undefined;
    /** 快递单号 */
    trackingNumber!: string | undefined;
    /** 快递Id */
    logisticsId!: string | undefined;
    /** 快递名称 */
    logisticsName!: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status!: GetShipmentForEditOutputStatus | undefined;
    /** 发货时间 */
    deliveryOd!: moment.Moment | undefined;
    /** 签收时间 */
    receivedOn!: moment.Moment | undefined;
    /** 备注 */
    adminComment!: string | undefined;
    /** 重量(如果有) */
    totalWeight!: number | undefined;
    /** 体积(如果有) */
    totalVolume!: number | undefined;
    /** 发货条目 */
    items!: ShipmentItemDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IGetShipmentForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.orderNumber = data["orderNumber"];
            this.trackingNumber = data["trackingNumber"];
            this.logisticsId = data["logisticsId"];
            this.logisticsName = data["logisticsName"];
            this.status = data["status"];
            this.deliveryOd = data["deliveryOd"] ? moment(data["deliveryOd"].toString()) : <any>undefined;
            this.receivedOn = data["receivedOn"] ? moment(data["receivedOn"].toString()) : <any>undefined;
            this.adminComment = data["adminComment"];
            this.totalWeight = data["totalWeight"];
            this.totalVolume = data["totalVolume"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ShipmentItemDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetShipmentForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetShipmentForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["orderNumber"] = this.orderNumber;
        data["trackingNumber"] = this.trackingNumber;
        data["logisticsId"] = this.logisticsId;
        data["logisticsName"] = this.logisticsName;
        data["status"] = this.status;
        data["deliveryOd"] = this.deliveryOd ? this.deliveryOd.toISOString() : <any>undefined;
        data["receivedOn"] = this.receivedOn ? this.receivedOn.toISOString() : <any>undefined;
        data["adminComment"] = this.adminComment;
        data["totalWeight"] = this.totalWeight;
        data["totalVolume"] = this.totalVolume;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetShipmentForEditOutput {
    /** 订单Id */
    orderId: number | undefined;
    /** 订单号 */
    orderNumber: string | undefined;
    /** 快递单号 */
    trackingNumber: string | undefined;
    /** 快递Id */
    logisticsId: string | undefined;
    /** 快递名称 */
    logisticsName: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status: GetShipmentForEditOutputStatus | undefined;
    /** 发货时间 */
    deliveryOd: moment.Moment | undefined;
    /** 签收时间 */
    receivedOn: moment.Moment | undefined;
    /** 备注 */
    adminComment: string | undefined;
    /** 重量(如果有) */
    totalWeight: number | undefined;
    /** 体积(如果有) */
    totalVolume: number | undefined;
    /** 发货条目 */
    items: ShipmentItemDto[] | undefined;
    id: number | undefined;
}

export class CreateOrUpdateShipmentInput implements ICreateOrUpdateShipmentInput {
    /** 订单Id */
    orderId!: number | undefined;
    /** 快递单号 */
    trackingNumber!: string | undefined;
    /** 快递Id */
    logisticsId!: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status!: CreateOrUpdateShipmentInputStatus | undefined;
    /** 备注 */
    adminComment!: string | undefined;
    /** 重量(如果有) */
    totalWeight!: number | undefined;
    /** 体积(如果有) */
    totalVolume!: number | undefined;
    /** 发货条目 */
    items!: ShipmentItemDto[] | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateShipmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.trackingNumber = data["trackingNumber"];
            this.logisticsId = data["logisticsId"];
            this.status = data["status"];
            this.adminComment = data["adminComment"];
            this.totalWeight = data["totalWeight"];
            this.totalVolume = data["totalVolume"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ShipmentItemDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateShipmentInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateShipmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["trackingNumber"] = this.trackingNumber;
        data["logisticsId"] = this.logisticsId;
        data["status"] = this.status;
        data["adminComment"] = this.adminComment;
        data["totalWeight"] = this.totalWeight;
        data["totalVolume"] = this.totalVolume;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateShipmentInput {
    /** 订单Id */
    orderId: number | undefined;
    /** 快递单号 */
    trackingNumber: string | undefined;
    /** 快递Id */
    logisticsId: string | undefined;
    /** 发货状态100 = NotRequired ; 200 = NotYetShipped ; 250 = PartiallyShipped ; 300 = Shipped ; 302 = Taked ; 303 = OnPassag ; 304 = DestinationCity ; 305 = Delivering ; 306 = Received ; 400 = Issue ; 404 = IssueWithRejected ; 500 = Cancel ; 600 = Intercept */
    status: CreateOrUpdateShipmentInputStatus | undefined;
    /** 备注 */
    adminComment: string | undefined;
    /** 重量(如果有) */
    totalWeight: number | undefined;
    /** 体积(如果有) */
    totalVolume: number | undefined;
    /** 发货条目 */
    items: ShipmentItemDto[] | undefined;
    id: number | undefined;
}

export class QuickDeliveryInput implements IQuickDeliveryInput {
    /** 订单Id */
    orderId!: number | undefined;
    /** 租户自选物流Id */
    logisticsId!: number | undefined;
    /** 物流单号 */
    logisticsNumber!: string | undefined;
    /** 备注 */
    adminComment!: string | undefined;

    constructor(data?: IQuickDeliveryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.logisticsId = data["logisticsId"];
            this.logisticsNumber = data["logisticsNumber"];
            this.adminComment = data["adminComment"];
        }
    }

    static fromJS(data: any): QuickDeliveryInput {
        data = typeof data === 'object' ? data : {};
        let result = new QuickDeliveryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["logisticsId"] = this.logisticsId;
        data["logisticsNumber"] = this.logisticsNumber;
        data["adminComment"] = this.adminComment;
        return data; 
    }
}

export interface IQuickDeliveryInput {
    /** 订单Id */
    orderId: number | undefined;
    /** 租户自选物流Id */
    logisticsId: number | undefined;
    /** 物流单号 */
    logisticsNumber: string | undefined;
    /** 备注 */
    adminComment: string | undefined;
}

export class ShipmentStatisticDto implements IShipmentStatisticDto {
    /** 渠道 */
    channel!: string | undefined;
    /** 商品 */
    product!: string | undefined;
    /** 快递 */
    logistics!: string | undefined;
    /** 统计/下单时间 */
    date!: string | undefined;
    /** 发货数量 */
    shipmentNum!: number | undefined;
    /** 签收数量 */
    receivedNum!: number | undefined;
    /** 签收金额 */
    receivedTotal!: number | undefined;
    /** 签收率 */
    receivedRate!: number | undefined;
    /** 拒签数量 */
    rejectNum!: number | undefined;
    /** 拒签金额 */
    rejectTotal!: number | undefined;
    /** 拒签率 */
    rejectRate!: number | undefined;
    /** 在途数量 */
    onPassagNum!: number | undefined;
    /** 同城数量 */
    destinationCityNum!: number | undefined;
    /** 派件数量 */
    deliveringNum!: number | undefined;
    /** 问题件数量 */
    issueNum!: number | undefined;
    /** 回款数量 */
    clearNum!: number | undefined;
    /** 回款金额 */
    cleaTotal!: number | undefined;
    /** 回款率 */
    cleaRate!: number | undefined;

    constructor(data?: IShipmentStatisticDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.channel = data["channel"];
            this.product = data["product"];
            this.logistics = data["logistics"];
            this.date = data["date"];
            this.shipmentNum = data["shipmentNum"];
            this.receivedNum = data["receivedNum"];
            this.receivedTotal = data["receivedTotal"];
            this.receivedRate = data["receivedRate"];
            this.rejectNum = data["rejectNum"];
            this.rejectTotal = data["rejectTotal"];
            this.rejectRate = data["rejectRate"];
            this.onPassagNum = data["onPassagNum"];
            this.destinationCityNum = data["destinationCityNum"];
            this.deliveringNum = data["deliveringNum"];
            this.issueNum = data["issueNum"];
            this.clearNum = data["clearNum"];
            this.cleaTotal = data["cleaTotal"];
            this.cleaRate = data["cleaRate"];
        }
    }

    static fromJS(data: any): ShipmentStatisticDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentStatisticDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channel"] = this.channel;
        data["product"] = this.product;
        data["logistics"] = this.logistics;
        data["date"] = this.date;
        data["shipmentNum"] = this.shipmentNum;
        data["receivedNum"] = this.receivedNum;
        data["receivedTotal"] = this.receivedTotal;
        data["receivedRate"] = this.receivedRate;
        data["rejectNum"] = this.rejectNum;
        data["rejectTotal"] = this.rejectTotal;
        data["rejectRate"] = this.rejectRate;
        data["onPassagNum"] = this.onPassagNum;
        data["destinationCityNum"] = this.destinationCityNum;
        data["deliveringNum"] = this.deliveringNum;
        data["issueNum"] = this.issueNum;
        data["clearNum"] = this.clearNum;
        data["cleaTotal"] = this.cleaTotal;
        data["cleaRate"] = this.cleaRate;
        return data; 
    }
}

export interface IShipmentStatisticDto {
    /** 渠道 */
    channel: string | undefined;
    /** 商品 */
    product: string | undefined;
    /** 快递 */
    logistics: string | undefined;
    /** 统计/下单时间 */
    date: string | undefined;
    /** 发货数量 */
    shipmentNum: number | undefined;
    /** 签收数量 */
    receivedNum: number | undefined;
    /** 签收金额 */
    receivedTotal: number | undefined;
    /** 签收率 */
    receivedRate: number | undefined;
    /** 拒签数量 */
    rejectNum: number | undefined;
    /** 拒签金额 */
    rejectTotal: number | undefined;
    /** 拒签率 */
    rejectRate: number | undefined;
    /** 在途数量 */
    onPassagNum: number | undefined;
    /** 同城数量 */
    destinationCityNum: number | undefined;
    /** 派件数量 */
    deliveringNum: number | undefined;
    /** 问题件数量 */
    issueNum: number | undefined;
    /** 回款数量 */
    clearNum: number | undefined;
    /** 回款金额 */
    cleaTotal: number | undefined;
    /** 回款率 */
    cleaRate: number | undefined;
}

/** 物流跟踪详情 */
export class TrackingDto implements ITrackingDto {
    /** 快递名称 */
    logisticsName!: string | undefined;
    /** 快递单号 */
    logisticsNumber!: string | undefined;
    /** 状态 */
    status!: string | undefined;
    /** 物流信息 */
    traces!: TrackingItemDto[] | undefined;

    constructor(data?: ITrackingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.logisticsName = data["logisticsName"];
            this.logisticsNumber = data["logisticsNumber"];
            this.status = data["status"];
            if (data["traces"] && data["traces"].constructor === Array) {
                this.traces = [] as any;
                for (let item of data["traces"])
                    this.traces!.push(TrackingItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TrackingDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrackingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logisticsName"] = this.logisticsName;
        data["logisticsNumber"] = this.logisticsNumber;
        data["status"] = this.status;
        if (this.traces && this.traces.constructor === Array) {
            data["traces"] = [];
            for (let item of this.traces)
                data["traces"].push(item.toJSON());
        }
        return data; 
    }
}

/** 物流跟踪详情 */
export interface ITrackingDto {
    /** 快递名称 */
    logisticsName: string | undefined;
    /** 快递单号 */
    logisticsNumber: string | undefined;
    /** 状态 */
    status: string | undefined;
    /** 物流信息 */
    traces: TrackingItemDto[] | undefined;
}

export class TrackingItemDto implements ITrackingItemDto {
    /** 物流信息条目 */
    station!: string | undefined;
    /** 时间 */
    time!: string | undefined;
    /** 备注 */
    remark!: string | undefined;

    constructor(data?: ITrackingItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.station = data["station"];
            this.time = data["time"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): TrackingItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrackingItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["station"] = this.station;
        data["time"] = this.time;
        data["remark"] = this.remark;
        return data; 
    }
}

export interface ITrackingItemDto {
    /** 物流信息条目 */
    station: string | undefined;
    /** 时间 */
    time: string | undefined;
    /** 备注 */
    remark: string | undefined;
}

/** 批量发送短信 */
export class BatchSendSMSInput implements IBatchSendSMSInput {
    /** 目标号码数组 */
    targetNumbers!: string[] | undefined;
    /** 内容 */
    content!: string | undefined;
    /** 验证码结果字符串 */
    captchaResponse!: string | undefined;

    constructor(data?: IBatchSendSMSInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["targetNumbers"] && data["targetNumbers"].constructor === Array) {
                this.targetNumbers = [] as any;
                for (let item of data["targetNumbers"])
                    this.targetNumbers!.push(item);
            }
            this.content = data["content"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): BatchSendSMSInput {
        data = typeof data === 'object' ? data : {};
        let result = new BatchSendSMSInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.targetNumbers && this.targetNumbers.constructor === Array) {
            data["targetNumbers"] = [];
            for (let item of this.targetNumbers)
                data["targetNumbers"].push(item);
        }
        data["content"] = this.content;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

/** 批量发送短信 */
export interface IBatchSendSMSInput {
    /** 目标号码数组 */
    targetNumbers: string[] | undefined;
    /** 内容 */
    content: string | undefined;
    /** 验证码结果字符串 */
    captchaResponse: string | undefined;
}

/** 短信发送结果 */
export class SendResult implements ISendResult {
    /** 是否成功 */
    success!: boolean | undefined;
    /** 错误信息 */
    errorMessage!: string | undefined;
    /** 成功个数 */
    successCount!: number | undefined;
    /** 失败个数 */
    failCount!: number | undefined;

    constructor(data?: ISendResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.errorMessage = data["errorMessage"];
            this.successCount = data["successCount"];
            this.failCount = data["failCount"];
        }
    }

    static fromJS(data: any): SendResult {
        data = typeof data === 'object' ? data : {};
        let result = new SendResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["errorMessage"] = this.errorMessage;
        data["successCount"] = this.successCount;
        data["failCount"] = this.failCount;
        return data; 
    }
}

/** 短信发送结果 */
export interface ISendResult {
    /** 是否成功 */
    success: boolean | undefined;
    /** 错误信息 */
    errorMessage: string | undefined;
    /** 成功个数 */
    successCount: number | undefined;
    /** 失败个数 */
    failCount: number | undefined;
}

export class UserCodeSendInput implements IUserCodeSendInput {
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType!: UserCodeSendInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse!: string | undefined;

    constructor(data?: IUserCodeSendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.codeType = data["codeType"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): UserCodeSendInput {
        data = typeof data === 'object' ? data : {};
        let result = new UserCodeSendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codeType"] = this.codeType;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IUserCodeSendInput {
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType: UserCodeSendInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse: string | undefined;
}

export class CodeSendInput implements ICodeSendInput {
    /** 目标号码(数组) */
    targetNumber!: string | undefined;
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType!: CodeSendInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse!: string | undefined;

    constructor(data?: ICodeSendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetNumber = data["targetNumber"];
            this.codeType = data["codeType"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): CodeSendInput {
        data = typeof data === 'object' ? data : {};
        let result = new CodeSendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetNumber"] = this.targetNumber;
        data["codeType"] = this.codeType;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface ICodeSendInput {
    /** 目标号码(数组) */
    targetNumber: string | undefined;
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType: CodeSendInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse: string | undefined;
}

export class CheckUserCodeInput implements ICheckUserCodeInput {
    /** 验证码 */
    code!: string;
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType!: CheckUserCodeInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse!: string | undefined;

    constructor(data?: ICheckUserCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.codeType = data["codeType"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): CheckUserCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CheckUserCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["codeType"] = this.codeType;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface ICheckUserCodeInput {
    /** 验证码 */
    code: string;
    /** 验证码类型10 = Register ; 20 = Login ; 30 = ChangePassword ; 40 = EmailBinding ; 50 = EmailUnBinding ; 60 = PhoneBinding ; 70 = PhoneUnBinding ; 80 = PhoneVerify */
    codeType: CheckUserCodeInputCodeType | undefined;
    /** 验证码结果字符串 */
    captchaResponse: string | undefined;
}

export class PagedResultDtoOfSMSTemplateListDto implements IPagedResultDtoOfSMSTemplateListDto {
    totalCount!: number | undefined;
    items!: SMSTemplateListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSMSTemplateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(SMSTemplateListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSMSTemplateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSMSTemplateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSMSTemplateListDto {
    totalCount: number | undefined;
    items: SMSTemplateListDto[] | undefined;
}

export class SMSTemplateListDto implements ISMSTemplateListDto {
    /** 模板消息名称 */
    name!: string | undefined;
    /** 短息模板编号（第三方短信编号） */
    templateCode!: string | undefined;
    /** 短信供应商名称 */
    smsProvider!: string | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    /** 是否激活 */
    isActive!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: ISMSTemplateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.templateCode = data["templateCode"];
            this.smsProvider = data["smsProvider"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SMSTemplateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SMSTemplateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["templateCode"] = this.templateCode;
        data["smsProvider"] = this.smsProvider;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISMSTemplateListDto {
    /** 模板消息名称 */
    name: string | undefined;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string | undefined;
    /** 短信供应商名称 */
    smsProvider: string | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    id: number | undefined;
}

export class GetSMSTemplateForEditDto implements IGetSMSTemplateForEditDto {
    /** 模板消息名称 */
    name!: string | undefined;
    /** 短息模板编号（第三方短信编号） */
    templateCode!: string | undefined;
    /** 短信供应商名称 */
    smsProvider!: string | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    /** 最后修改时间 */
    lastModificationTime!: moment.Moment | undefined;
    /** 是否激活 */
    isActive!: boolean | undefined;
    /** 模板参数集合 */
    items!: SMSTemplateItemDto[] | undefined;
    /** 可用的短信供应商 */
    availabelSmsProviders!: SMSProviderInfoDto[] | undefined;
    id!: number | undefined;

    constructor(data?: IGetSMSTemplateForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.templateCode = data["templateCode"];
            this.smsProvider = data["smsProvider"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(SMSTemplateItemDto.fromJS(item));
            }
            if (data["availabelSmsProviders"] && data["availabelSmsProviders"].constructor === Array) {
                this.availabelSmsProviders = [] as any;
                for (let item of data["availabelSmsProviders"])
                    this.availabelSmsProviders!.push(SMSProviderInfoDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetSMSTemplateForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetSMSTemplateForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["templateCode"] = this.templateCode;
        data["smsProvider"] = this.smsProvider;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (this.availabelSmsProviders && this.availabelSmsProviders.constructor === Array) {
            data["availabelSmsProviders"] = [];
            for (let item of this.availabelSmsProviders)
                data["availabelSmsProviders"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetSMSTemplateForEditDto {
    /** 模板消息名称 */
    name: string | undefined;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string | undefined;
    /** 短信供应商名称 */
    smsProvider: string | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    /** 最后修改时间 */
    lastModificationTime: moment.Moment | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    /** 模板参数集合 */
    items: SMSTemplateItemDto[] | undefined;
    /** 可用的短信供应商 */
    availabelSmsProviders: SMSProviderInfoDto[] | undefined;
    id: number | undefined;
}

export class SMSTemplateItemDto implements ISMSTemplateItemDto {
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    /** 模板参数Id，null时为创建,有值时为更新 */
    id!: number | undefined;
    /** 模板消息字段名 */
    dataItemName!: string | undefined;
    /** 模板消息字段值类 */
    dataItemValue!: string | undefined;

    constructor(data?: ISMSTemplateItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
            this.dataItemName = data["dataItemName"];
            this.dataItemValue = data["dataItemValue"];
        }
    }

    static fromJS(data: any): SMSTemplateItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new SMSTemplateItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["dataItemName"] = this.dataItemName;
        data["dataItemValue"] = this.dataItemValue;
        return data; 
    }
}

export interface ISMSTemplateItemDto {
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number | undefined;
    /** 模板消息字段名 */
    dataItemName: string | undefined;
    /** 模板消息字段值类 */
    dataItemValue: string | undefined;
}

export class SMSProviderInfoDto implements ISMSProviderInfoDto {
    /** 名称(显示名称) */
    displayName!: string | undefined;
    /** 系统名称 */
    systemName!: string | undefined;

    constructor(data?: ISMSProviderInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.systemName = data["systemName"];
        }
    }

    static fromJS(data: any): SMSProviderInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new SMSProviderInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["systemName"] = this.systemName;
        return data; 
    }
}

export interface ISMSProviderInfoDto {
    /** 名称(显示名称) */
    displayName: string | undefined;
    /** 系统名称 */
    systemName: string | undefined;
}

export class CreateOrUpdateSMSTemplateInput implements ICreateOrUpdateSMSTemplateInput {
    /** 模板Id，null时为创建,有值时为更新 */
    id!: number | undefined;
    /** 模板消息名称 */
    name!: string | undefined;
    /** 短息模板编号（第三方短信编号） */
    templateCode!: string | undefined;
    /** 短信供应商名称 */
    smsProvider!: string | undefined;
    /** 是否激活 */
    isActive!: boolean | undefined;
    /** 模板参数集合 */
    items!: SMSTemplateItemInput[] | undefined;

    constructor(data?: ICreateOrUpdateSMSTemplateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.templateCode = data["templateCode"];
            this.smsProvider = data["smsProvider"];
            this.isActive = data["isActive"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(SMSTemplateItemInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateSMSTemplateInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateSMSTemplateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["templateCode"] = this.templateCode;
        data["smsProvider"] = this.smsProvider;
        data["isActive"] = this.isActive;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateSMSTemplateInput {
    /** 模板Id，null时为创建,有值时为更新 */
    id: number | undefined;
    /** 模板消息名称 */
    name: string | undefined;
    /** 短息模板编号（第三方短信编号） */
    templateCode: string | undefined;
    /** 短信供应商名称 */
    smsProvider: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    /** 模板参数集合 */
    items: SMSTemplateItemInput[] | undefined;
}

export class SMSTemplateItemInput implements ISMSTemplateItemInput {
    /** 模板参数Id，null时为创建,有值时为更新 */
    id!: number | undefined;
    /** 模板消息字段名 */
    dataItemName!: string | undefined;
    /** 模板消息字段值类 */
    dataItemValue!: string | undefined;

    constructor(data?: ISMSTemplateItemInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dataItemName = data["dataItemName"];
            this.dataItemValue = data["dataItemValue"];
        }
    }

    static fromJS(data: any): SMSTemplateItemInput {
        data = typeof data === 'object' ? data : {};
        let result = new SMSTemplateItemInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dataItemName"] = this.dataItemName;
        data["dataItemValue"] = this.dataItemValue;
        return data; 
    }
}

export interface ISMSTemplateItemInput {
    /** 模板参数Id，null时为创建,有值时为更新 */
    id: number | undefined;
    /** 模板消息字段名 */
    dataItemName: string | undefined;
    /** 模板消息字段值类 */
    dataItemValue: string | undefined;
}

export class PagedResultDtoOfProvinceListDto implements IPagedResultDtoOfProvinceListDto {
    totalCount!: number | undefined;
    items!: ProvinceListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfProvinceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ProvinceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProvinceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfProvinceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfProvinceListDto {
    totalCount: number | undefined;
    items: ProvinceListDto[] | undefined;
}

export class ProvinceListDto implements IProvinceListDto {
    /** 名称 */
    name!: string | undefined;
    /** 显示顺序 */
    display!: number | undefined;
    /** 启用 */
    isActive!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: IProvinceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProvinceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProvinceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProvinceListDto {
    /** 名称 */
    name: string | undefined;
    /** 显示顺序 */
    display: number | undefined;
    /** 启用 */
    isActive: boolean | undefined;
    id: number | undefined;
}

export class CreateOrUpdateProvinceInput implements ICreateOrUpdateProvinceInput {
    /** 名称 */
    name!: string;
    /** 显示顺序 */
    display!: number | undefined;
    /** 启用 */
    isActive!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateProvinceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateProvinceInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateProvinceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateProvinceInput {
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number | undefined;
    /** 启用 */
    isActive: boolean | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfCityListDto implements IPagedResultDtoOfCityListDto {
    totalCount!: number | undefined;
    items!: CityListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCityListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfCityListDto {
    totalCount: number | undefined;
    items: CityListDto[] | undefined;
}

export class CityListDto implements ICityListDto {
    /** 名称 */
    name!: string | undefined;
    /** 显示顺序 */
    display!: number | undefined;
    /** 启用 */
    isActive!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: ICityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CityListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICityListDto {
    /** 名称 */
    name: string | undefined;
    /** 显示顺序 */
    display: number | undefined;
    /** 启用 */
    isActive: boolean | undefined;
    id: number | undefined;
}

export class CreateOrUpdateCityInput implements ICreateOrUpdateCityInput {
    /** 省份id */
    provinceId!: number | undefined;
    /** 名称 */
    name!: string;
    /** 显示顺序 */
    display!: number | undefined;
    /** 启用 */
    isActive!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateCityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.provinceId = data["provinceId"];
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateCityInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateCityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provinceId"] = this.provinceId;
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateCityInput {
    /** 省份id */
    provinceId: number | undefined;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number | undefined;
    /** 启用 */
    isActive: boolean | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfDistrictListDto implements IPagedResultDtoOfDistrictListDto {
    totalCount!: number | undefined;
    items!: DistrictListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDistrictListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(DistrictListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDistrictListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDistrictListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfDistrictListDto {
    totalCount: number | undefined;
    items: DistrictListDto[] | undefined;
}

export class DistrictListDto implements IDistrictListDto {
    /** 名称 */
    name!: string | undefined;
    /** 显示顺序 */
    display!: number | undefined;
    /** 启用 */
    isActive!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: IDistrictListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DistrictListDto {
        data = typeof data === 'object' ? data : {};
        let result = new DistrictListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface IDistrictListDto {
    /** 名称 */
    name: string | undefined;
    /** 显示顺序 */
    display: number | undefined;
    /** 启用 */
    isActive: boolean | undefined;
    id: number | undefined;
}

export class CreateOrUpdateDistrictInput implements ICreateOrUpdateDistrictInput {
    /** 城市id */
    cityId!: number | undefined;
    /** 名称 */
    name!: string;
    /** 显示顺序 */
    display!: number | undefined;
    /** 启用 */
    isActive!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: ICreateOrUpdateDistrictInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cityId = data["cityId"];
            this.name = data["name"];
            this.display = data["display"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateDistrictInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateDistrictInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cityId"] = this.cityId;
        data["name"] = this.name;
        data["display"] = this.display;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateOrUpdateDistrictInput {
    /** 城市id */
    cityId: number | undefined;
    /** 名称 */
    name: string;
    /** 显示顺序 */
    display: number | undefined;
    /** 启用 */
    isActive: boolean | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfStoreListDto implements IPagedResultDtoOfStoreListDto {
    totalCount!: number | undefined;
    items!: StoreListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfStoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(StoreListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfStoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfStoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfStoreListDto {
    totalCount: number | undefined;
    items: StoreListDto[] | undefined;
}

export class StoreListDto implements IStoreListDto {
    /** 店铺名 */
    name!: string | undefined;
    /** 图片Id */
    pictureId!: number | undefined;
    /** 订单来源10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSourceType!: StoreListDtoOrderSourceType | undefined;
    /** 订单同步 */
    orderSync!: boolean | undefined;
    id!: number | undefined;

    constructor(data?: IStoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.pictureId = data["pictureId"];
            this.orderSourceType = data["orderSourceType"];
            this.orderSync = data["orderSync"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): StoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new StoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["pictureId"] = this.pictureId;
        data["orderSourceType"] = this.orderSourceType;
        data["orderSync"] = this.orderSync;
        data["id"] = this.id;
        return data; 
    }
}

export interface IStoreListDto {
    /** 店铺名 */
    name: string | undefined;
    /** 图片Id */
    pictureId: number | undefined;
    /** 订单来源10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSourceType: StoreListDtoOrderSourceType | undefined;
    /** 订单同步 */
    orderSync: boolean | undefined;
    id: number | undefined;
}

export class GetStoreForEditOutput implements IGetStoreForEditOutput {
    /** 店铺名 */
    name!: string | undefined;
    /** 图片Id */
    pictureId!: number | undefined;
    /** 图片Url */
    pictureUrl!: string | undefined;
    /** 第三方App id */
    appKey!: string | undefined;
    /** 第三方App secret */
    appSecret!: string | undefined;
    /** 订单来源10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSourceType!: GetStoreForEditOutputOrderSourceType | undefined;
    /** 订单同步 */
    orderSync!: boolean | undefined;
    /** 排序id */
    displayOrder!: number | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    /** 最后修改时间 */
    lastModificationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IGetStoreForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.pictureId = data["pictureId"];
            this.pictureUrl = data["pictureUrl"];
            this.appKey = data["appKey"];
            this.appSecret = data["appSecret"];
            this.orderSourceType = data["orderSourceType"];
            this.orderSync = data["orderSync"];
            this.displayOrder = data["displayOrder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetStoreForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetStoreForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["pictureId"] = this.pictureId;
        data["pictureUrl"] = this.pictureUrl;
        data["appKey"] = this.appKey;
        data["appSecret"] = this.appSecret;
        data["orderSourceType"] = this.orderSourceType;
        data["orderSync"] = this.orderSync;
        data["displayOrder"] = this.displayOrder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetStoreForEditOutput {
    /** 店铺名 */
    name: string | undefined;
    /** 图片Id */
    pictureId: number | undefined;
    /** 图片Url */
    pictureUrl: string | undefined;
    /** 第三方App id */
    appKey: string | undefined;
    /** 第三方App secret */
    appSecret: string | undefined;
    /** 订单来源10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSourceType: GetStoreForEditOutputOrderSourceType | undefined;
    /** 订单同步 */
    orderSync: boolean | undefined;
    /** 排序id */
    displayOrder: number | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    /** 最后修改时间 */
    lastModificationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class CreateOrUpdateStoreInput implements ICreateOrUpdateStoreInput {
    /** Id，空或者为0时创建店铺 */
    id!: number | undefined;
    /** 店铺名 */
    name!: string;
    /** 图片Id */
    pictureId!: number | undefined;
    /** 第三方App id */
    appKey!: string | undefined;
    /** 第三方App secret */
    appSecret!: string | undefined;
    /** 订单来源10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSourceType!: CreateOrUpdateStoreInputOrderSourceType | undefined;
    /** 订单同步 */
    orderSync!: boolean | undefined;
    /** 排序id */
    displayOrder!: number | undefined;

    constructor(data?: ICreateOrUpdateStoreInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.pictureId = data["pictureId"];
            this.appKey = data["appKey"];
            this.appSecret = data["appSecret"];
            this.orderSourceType = data["orderSourceType"];
            this.orderSync = data["orderSync"];
            this.displayOrder = data["displayOrder"];
        }
    }

    static fromJS(data: any): CreateOrUpdateStoreInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateStoreInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["pictureId"] = this.pictureId;
        data["appKey"] = this.appKey;
        data["appSecret"] = this.appSecret;
        data["orderSourceType"] = this.orderSourceType;
        data["orderSync"] = this.orderSync;
        data["displayOrder"] = this.displayOrder;
        return data; 
    }
}

export interface ICreateOrUpdateStoreInput {
    /** Id，空或者为0时创建店铺 */
    id: number | undefined;
    /** 店铺名 */
    name: string;
    /** 图片Id */
    pictureId: number | undefined;
    /** 第三方App id */
    appKey: string | undefined;
    /** 第三方App secret */
    appSecret: string | undefined;
    /** 订单来源10 = Self ; 20 = FxgAd ; 30 = FxgPd ; 40 = Tenant ; 50 = YouZan */
    orderSourceType: CreateOrUpdateStoreInputOrderSourceType | undefined;
    /** 订单同步 */
    orderSync: boolean | undefined;
    /** 排序id */
    displayOrder: number | undefined;
}

export class PagedResultDtoOfTenantListDto implements IPagedResultDtoOfTenantListDto {
    totalCount!: number | undefined;
    items!: TenantListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantListDto {
    totalCount: number | undefined;
    items: TenantListDto[] | undefined;
}

export class TenantListDto implements ITenantListDto {
    /** 租户名 */
    tenancyName!: string | undefined;
    /** (显示)名称 */
    name!: string | undefined;
    /** 版本名 */
    editionDisplayName!: string | undefined;
    /** 连接字符串 */
    connectionString!: string | undefined;
    /** 是否激活 */
    isActive!: boolean | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: ITenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.editionDisplayName = data["editionDisplayName"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["editionDisplayName"] = this.editionDisplayName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantListDto {
    /** 租户名 */
    tenancyName: string | undefined;
    /** (显示)名称 */
    name: string | undefined;
    /** 版本名 */
    editionDisplayName: string | undefined;
    /** 连接字符串 */
    connectionString: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class CreateTenantInput implements ICreateTenantInput {
    /** 租户名称 */
    tenancyName!: string;
    /** 名称 */
    name!: string;
    /** 管理员邮箱地址 */
    adminEmailAddress!: string;
    /** 管理员手机号码 */
    phoneNumber!: string | undefined;
    /** 管理员密码 */
    adminPassword!: string | undefined;
    /** 数据库连接字符串 */
    connectionString!: string | undefined;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin!: boolean | undefined;
    /** 发送激活邮件 */
    sendActivationEmail!: boolean | undefined;
    /** 版本Id */
    editionId!: number | undefined;
    /** 激活 */
    isActive!: boolean | undefined;
    subscriptionEndDateUtc!: moment.Moment | undefined;
    isInTrialPeriod!: boolean | undefined;

    constructor(data?: ICreateTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.adminPassword = data["adminPassword"];
            this.connectionString = data["connectionString"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.sendActivationEmail = data["sendActivationEmail"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
        }
    }

    static fromJS(data: any): CreateTenantInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["adminPassword"] = this.adminPassword;
        data["connectionString"] = this.connectionString;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        return data; 
    }
}

export interface ICreateTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 管理员邮箱地址 */
    adminEmailAddress: string;
    /** 管理员手机号码 */
    phoneNumber: string | undefined;
    /** 管理员密码 */
    adminPassword: string | undefined;
    /** 数据库连接字符串 */
    connectionString: string | undefined;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean | undefined;
    /** 发送激活邮件 */
    sendActivationEmail: boolean | undefined;
    /** 版本Id */
    editionId: number | undefined;
    /** 激活 */
    isActive: boolean | undefined;
    subscriptionEndDateUtc: moment.Moment | undefined;
    isInTrialPeriod: boolean | undefined;
}

export class GetTenantForEditOutput implements IGetTenantForEditOutput {
    /** 租户详情 */
    tenant!: TenantEditDto | undefined;
    /** 特性(限制) */
    features!: GetTenantFeaturesEditOutput | undefined;
    id!: number | undefined;

    constructor(data?: IGetTenantForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenant = data["tenant"] ? TenantEditDto.fromJS(data["tenant"]) : <any>undefined;
            this.features = data["features"] ? GetTenantFeaturesEditOutput.fromJS(data["features"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetTenantForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTenantForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["features"] = this.features ? this.features.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IGetTenantForEditOutput {
    /** 租户详情 */
    tenant: TenantEditDto | undefined;
    /** 特性(限制) */
    features: GetTenantFeaturesEditOutput | undefined;
    id: number | undefined;
}

export class TenantEditDto implements ITenantEditDto {
    /** 租户名称 */
    tenancyName!: string;
    /** 名称 */
    name!: string;
    /** 数据库连接字符串 */
    connectionString!: string | undefined;
    /** 版本Id */
    editionId!: number | undefined;
    /** 激活 */
    isActive!: boolean | undefined;
    /** 订阅结束时间 */
    subscriptionEndDateUtc!: moment.Moment | undefined;
    /** 是否试用中 */
    isInTrialPeriod!: boolean | undefined;
    /** 已有(设置的)特性值,更新时要赋值 */
    features!: NameValueDto[] | undefined;
    id!: number | undefined;

    constructor(data?: ITenantEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.connectionString = data["connectionString"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [] as any;
                for (let item of data["features"])
                    this.features!.push(NameValueDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["connectionString"] = this.connectionString;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantEditDto {
    /** 租户名称 */
    tenancyName: string;
    /** 名称 */
    name: string;
    /** 数据库连接字符串 */
    connectionString: string | undefined;
    /** 版本Id */
    editionId: number | undefined;
    /** 激活 */
    isActive: boolean | undefined;
    /** 订阅结束时间 */
    subscriptionEndDateUtc: moment.Moment | undefined;
    /** 是否试用中 */
    isInTrialPeriod: boolean | undefined;
    /** 已有(设置的)特性值,更新时要赋值 */
    features: NameValueDto[] | undefined;
    id: number | undefined;
}

export class GetTenantFeaturesEditOutput implements IGetTenantFeaturesEditOutput {
    featureValues!: NameValueDto[] | undefined;
    features!: FlatFeatureDto[] | undefined;

    constructor(data?: IGetTenantFeaturesEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [] as any;
                for (let item of data["featureValues"])
                    this.featureValues!.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [] as any;
                for (let item of data["features"])
                    this.features!.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[] | undefined;
    features: FlatFeatureDto[] | undefined;
}

export class UpdateTenantFeaturesInput implements IUpdateTenantFeaturesInput {
    /** 租户Id */
    id!: number | undefined;
    /** 特性 */
    featureValues!: NameValueDto[];

    constructor(data?: IUpdateTenantFeaturesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.featureValues = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [] as any;
                for (let item of data["featureValues"])
                    this.featureValues!.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateTenantFeaturesInput {
    /** 租户Id */
    id: number | undefined;
    /** 特性 */
    featureValues: NameValueDto[];
}

export class EntityDto implements IEntityDto {
    id!: number | undefined;

    constructor(data?: IEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDto {
    id: number | undefined;
}

export class GetMemberActivityOutput implements IGetMemberActivityOutput {
    memberActivities!: MemberActivity[] | undefined;

    constructor(data?: IGetMemberActivityOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["memberActivities"] && data["memberActivities"].constructor === Array) {
                this.memberActivities = [] as any;
                for (let item of data["memberActivities"])
                    this.memberActivities!.push(MemberActivity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMemberActivityOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetMemberActivityOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.memberActivities && this.memberActivities.constructor === Array) {
            data["memberActivities"] = [];
            for (let item of this.memberActivities)
                data["memberActivities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMemberActivityOutput {
    memberActivities: MemberActivity[] | undefined;
}

export class MemberActivity implements IMemberActivity {
    name!: string | undefined;
    earnings!: string | undefined;
    cases!: number | undefined;
    closed!: number | undefined;
    rate!: string | undefined;

    constructor(data?: IMemberActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.earnings = data["earnings"];
            this.cases = data["cases"];
            this.closed = data["closed"];
            this.rate = data["rate"];
        }
    }

    static fromJS(data: any): MemberActivity {
        data = typeof data === 'object' ? data : {};
        let result = new MemberActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["earnings"] = this.earnings;
        data["cases"] = this.cases;
        data["closed"] = this.closed;
        data["rate"] = this.rate;
        return data; 
    }
}

export interface IMemberActivity {
    name: string | undefined;
    earnings: string | undefined;
    cases: number | undefined;
    closed: number | undefined;
    rate: string | undefined;
}

export class GetDashboardDataOutput implements IGetDashboardDataOutput {
    totalProfit!: number | undefined;
    newFeedbacks!: number | undefined;
    newOrders!: number | undefined;
    newUsers!: number | undefined;
    salesSummary!: SalesSummaryData[] | undefined;
    totalSales!: number | undefined;
    revenue!: number | undefined;
    expenses!: number | undefined;
    growth!: number | undefined;
    transactionPercent!: number | undefined;
    newVisitPercent!: number | undefined;
    bouncePercent!: number | undefined;
    dailySales!: number[] | undefined;
    profitShares!: number[] | undefined;

    constructor(data?: IGetDashboardDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalProfit = data["totalProfit"];
            this.newFeedbacks = data["newFeedbacks"];
            this.newOrders = data["newOrders"];
            this.newUsers = data["newUsers"];
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [] as any;
                for (let item of data["salesSummary"])
                    this.salesSummary!.push(SalesSummaryData.fromJS(item));
            }
            this.totalSales = data["totalSales"];
            this.revenue = data["revenue"];
            this.expenses = data["expenses"];
            this.growth = data["growth"];
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
            if (data["dailySales"] && data["dailySales"].constructor === Array) {
                this.dailySales = [] as any;
                for (let item of data["dailySales"])
                    this.dailySales!.push(item);
            }
            if (data["profitShares"] && data["profitShares"].constructor === Array) {
                this.profitShares = [] as any;
                for (let item of data["profitShares"])
                    this.profitShares!.push(item);
            }
        }
    }

    static fromJS(data: any): GetDashboardDataOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetDashboardDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalProfit"] = this.totalProfit;
        data["newFeedbacks"] = this.newFeedbacks;
        data["newOrders"] = this.newOrders;
        data["newUsers"] = this.newUsers;
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        data["totalSales"] = this.totalSales;
        data["revenue"] = this.revenue;
        data["expenses"] = this.expenses;
        data["growth"] = this.growth;
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        if (this.dailySales && this.dailySales.constructor === Array) {
            data["dailySales"] = [];
            for (let item of this.dailySales)
                data["dailySales"].push(item);
        }
        if (this.profitShares && this.profitShares.constructor === Array) {
            data["profitShares"] = [];
            for (let item of this.profitShares)
                data["profitShares"].push(item);
        }
        return data; 
    }
}

export interface IGetDashboardDataOutput {
    totalProfit: number | undefined;
    newFeedbacks: number | undefined;
    newOrders: number | undefined;
    newUsers: number | undefined;
    salesSummary: SalesSummaryData[] | undefined;
    totalSales: number | undefined;
    revenue: number | undefined;
    expenses: number | undefined;
    growth: number | undefined;
    transactionPercent: number | undefined;
    newVisitPercent: number | undefined;
    bouncePercent: number | undefined;
    dailySales: number[] | undefined;
    profitShares: number[] | undefined;
}

export class SalesSummaryData implements ISalesSummaryData {
    period!: string | undefined;
    sales!: number | undefined;
    profit!: number | undefined;

    constructor(data?: ISalesSummaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.period = data["period"];
            this.sales = data["sales"];
            this.profit = data["profit"];
        }
    }

    static fromJS(data: any): SalesSummaryData {
        data = typeof data === 'object' ? data : {};
        let result = new SalesSummaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["sales"] = this.sales;
        data["profit"] = this.profit;
        return data; 
    }
}

export interface ISalesSummaryData {
    period: string | undefined;
    sales: number | undefined;
    profit: number | undefined;
}

export class GetSalesSummaryOutput implements IGetSalesSummaryOutput {
    salesSummary!: SalesSummaryData[] | undefined;

    constructor(data?: IGetSalesSummaryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [] as any;
                for (let item of data["salesSummary"])
                    this.salesSummary!.push(SalesSummaryData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSalesSummaryOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalesSummaryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[] | undefined;
}

export class GetRegionalStatsOutput implements IGetRegionalStatsOutput {
    stats!: RegionalStatCountry[] | undefined;

    constructor(data?: IGetRegionalStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["stats"] && data["stats"].constructor === Array) {
                this.stats = [] as any;
                for (let item of data["stats"])
                    this.stats!.push(RegionalStatCountry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRegionalStatsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetRegionalStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.stats && this.stats.constructor === Array) {
            data["stats"] = [];
            for (let item of this.stats)
                data["stats"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetRegionalStatsOutput {
    stats: RegionalStatCountry[] | undefined;
}

export class RegionalStatCountry implements IRegionalStatCountry {
    countryName!: string | undefined;
    sales!: number | undefined;
    change!: number[] | undefined;
    averagePrice!: number | undefined;
    totalPrice!: number | undefined;

    constructor(data?: IRegionalStatCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countryName = data["countryName"];
            this.sales = data["sales"];
            if (data["change"] && data["change"].constructor === Array) {
                this.change = [] as any;
                for (let item of data["change"])
                    this.change!.push(item);
            }
            this.averagePrice = data["averagePrice"];
            this.totalPrice = data["totalPrice"];
        }
    }

    static fromJS(data: any): RegionalStatCountry {
        data = typeof data === 'object' ? data : {};
        let result = new RegionalStatCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryName"] = this.countryName;
        data["sales"] = this.sales;
        if (this.change && this.change.constructor === Array) {
            data["change"] = [];
            for (let item of this.change)
                data["change"].push(item);
        }
        data["averagePrice"] = this.averagePrice;
        data["totalPrice"] = this.totalPrice;
        return data; 
    }
}

export interface IRegionalStatCountry {
    countryName: string | undefined;
    sales: number | undefined;
    change: number[] | undefined;
    averagePrice: number | undefined;
    totalPrice: number | undefined;
}

export class GetGeneralStatsOutput implements IGetGeneralStatsOutput {
    transactionPercent!: number | undefined;
    newVisitPercent!: number | undefined;
    bouncePercent!: number | undefined;

    constructor(data?: IGetGeneralStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
        }
    }

    static fromJS(data: any): GetGeneralStatsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetGeneralStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        return data; 
    }
}

export interface IGetGeneralStatsOutput {
    transactionPercent: number | undefined;
    newVisitPercent: number | undefined;
    bouncePercent: number | undefined;
}

export class TenantInfoEditDto implements ITenantInfoEditDto {
    /** 机构名称/租户名 */
    tenancyName!: string;
    /** 宣传语 */
    tagline!: string | undefined;
    /** 描述 */
    description!: string | undefined;
    /** Logo 图片 Id */
    logoId!: number | undefined;
    /** Logo 图片 Url */
    logoUrl!: string | undefined;
    /** 背景图片 Id */
    backgroundPictureId!: number | undefined;
    /** 背景图片 Url */
    backgroundPictureUrl!: string | undefined;

    constructor(data?: ITenantInfoEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.tagline = data["tagline"];
            this.description = data["description"];
            this.logoId = data["logoId"];
            this.logoUrl = data["logoUrl"];
            this.backgroundPictureId = data["backgroundPictureId"];
            this.backgroundPictureUrl = data["backgroundPictureUrl"];
        }
    }

    static fromJS(data: any): TenantInfoEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantInfoEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        data["logoId"] = this.logoId;
        data["logoUrl"] = this.logoUrl;
        data["backgroundPictureId"] = this.backgroundPictureId;
        data["backgroundPictureUrl"] = this.backgroundPictureUrl;
        return data; 
    }
}

export interface ITenantInfoEditDto {
    /** 机构名称/租户名 */
    tenancyName: string;
    /** 宣传语 */
    tagline: string | undefined;
    /** 描述 */
    description: string | undefined;
    /** Logo 图片 Id */
    logoId: number | undefined;
    /** Logo 图片 Url */
    logoUrl: string | undefined;
    /** 背景图片 Id */
    backgroundPictureId: number | undefined;
    /** 背景图片 Url */
    backgroundPictureUrl: string | undefined;
}

export class RegisterTenantInput implements IRegisterTenantInput {
    /** 租户名称 */
    tenancyName!: string;
    /** 注册类型1 = Telephone ; 2 = Email */
    type!: RegisterTenantInputType | undefined;
    /** 手机号码 */
    phoneNumber!: string | undefined;
    emailAddress!: string | undefined;
    /** 注册验证码 */
    registerCode!: string;
    /** 管理员密码 */
    password!: string | undefined;
    /** 验证码结果 */
    captchaResponse!: string | undefined;

    constructor(data?: IRegisterTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.type = data["type"];
            this.phoneNumber = data["phoneNumber"];
            this.emailAddress = data["emailAddress"];
            this.registerCode = data["registerCode"];
            this.password = data["password"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterTenantInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["type"] = this.type;
        data["phoneNumber"] = this.phoneNumber;
        data["emailAddress"] = this.emailAddress;
        data["registerCode"] = this.registerCode;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IRegisterTenantInput {
    /** 租户名称 */
    tenancyName: string;
    /** 注册类型1 = Telephone ; 2 = Email */
    type: RegisterTenantInputType | undefined;
    /** 手机号码 */
    phoneNumber: string | undefined;
    emailAddress: string | undefined;
    /** 注册验证码 */
    registerCode: string;
    /** 管理员密码 */
    password: string | undefined;
    /** 验证码结果 */
    captchaResponse: string | undefined;
}

export class RegisterTenantOutput implements IRegisterTenantOutput {
    tenantId!: number | undefined;
    tenancyName!: string | undefined;
    name!: string | undefined;
    userName!: string | undefined;
    emailAddress!: string | undefined;
    isTenantActive!: boolean | undefined;
    isActive!: boolean | undefined;
    isEmailConfirmationRequired!: boolean | undefined;

    constructor(data?: IRegisterTenantOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.isTenantActive = data["isTenantActive"];
            this.isActive = data["isActive"];
            this.isEmailConfirmationRequired = data["isEmailConfirmationRequired"];
        }
    }

    static fromJS(data: any): RegisterTenantOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTenantOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["isTenantActive"] = this.isTenantActive;
        data["isActive"] = this.isActive;
        data["isEmailConfirmationRequired"] = this.isEmailConfirmationRequired;
        return data; 
    }
}

export interface IRegisterTenantOutput {
    tenantId: number | undefined;
    tenancyName: string | undefined;
    name: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    isTenantActive: boolean | undefined;
    isActive: boolean | undefined;
    isEmailConfirmationRequired: boolean | undefined;
}

export class TenantSettingsEditDto implements ITenantSettingsEditDto {
    general!: GeneralSettingsEditDto | undefined;
    userManagement!: TenantUserManagementSettingsEditDto;
    /** 安全设置 */
    security!: SecuritySettingsEditDto;
    /** 第三方登陆 */
    externalAuthentication!: ExternalAuthenticationEditDto | undefined;
    /** 账单设置 */
    billing!: TenantBillingSettingsEditDto | undefined;

    constructor(data?: ITenantSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userManagement = new TenantUserManagementSettingsEditDto();
            this.security = new SecuritySettingsEditDto();
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : <any>undefined;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.externalAuthentication = data["externalAuthentication"] ? ExternalAuthenticationEditDto.fromJS(data["externalAuthentication"]) : <any>undefined;
            this.billing = data["billing"] ? TenantBillingSettingsEditDto.fromJS(data["billing"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        data["externalAuthentication"] = this.externalAuthentication ? this.externalAuthentication.toJSON() : <any>undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITenantSettingsEditDto {
    general: GeneralSettingsEditDto | undefined;
    userManagement: TenantUserManagementSettingsEditDto;
    /** 安全设置 */
    security: SecuritySettingsEditDto;
    /** 第三方登陆 */
    externalAuthentication: ExternalAuthenticationEditDto | undefined;
    /** 账单设置 */
    billing: TenantBillingSettingsEditDto | undefined;
}

export class TenantUserManagementSettingsEditDto implements ITenantUserManagementSettingsEditDto {
    /** 允许租户注册 */
    allowSelfRegistration!: boolean | undefined;
    /** 新注册用户默认激活 */
    isNewRegisteredUserActiveByDefault!: boolean | undefined;
    /** 登录前须邮箱确认 */
    isEmailConfirmationRequiredForLogin!: boolean | undefined;
    /** 开启(图形)验证码 */
    useCaptchaOnRegistration!: boolean | undefined;

    constructor(data?: ITenantUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"];
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        return data; 
    }
}

export interface ITenantUserManagementSettingsEditDto {
    /** 允许租户注册 */
    allowSelfRegistration: boolean | undefined;
    /** 新注册用户默认激活 */
    isNewRegisteredUserActiveByDefault: boolean | undefined;
    /** 登录前须邮箱确认 */
    isEmailConfirmationRequiredForLogin: boolean | undefined;
    /** 开启(图形)验证码 */
    useCaptchaOnRegistration: boolean | undefined;
}

export class TenantBillingSettingsEditDto implements ITenantBillingSettingsEditDto {
    /** 注册名称 */
    legalName!: string | undefined;
    /** 地址 */
    address!: string | undefined;
    /** 税号 */
    taxVatNo!: string | undefined;

    constructor(data?: ITenantBillingSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.legalName = data["legalName"];
            this.address = data["address"];
            this.taxVatNo = data["taxVatNo"];
        }
    }

    static fromJS(data: any): TenantBillingSettingsEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantBillingSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        data["taxVatNo"] = this.taxVatNo;
        return data; 
    }
}

export interface ITenantBillingSettingsEditDto {
    /** 注册名称 */
    legalName: string | undefined;
    /** 地址 */
    address: string | undefined;
    /** 税号 */
    taxVatNo: string | undefined;
}

export class ListResultDtoOfNameValueDto implements IListResultDtoOfNameValueDto {
    items!: NameValueDto[] | undefined;

    constructor(data?: IListResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfNameValueDto {
    items: NameValueDto[] | undefined;
}

export class AuthenticateModel implements IAuthenticateModel {
    /** 登陆凭证(用户名/邮箱地址/手机) */
    loginCertificate!: string;
    /** 密码 */
    password!: string;
    /** 双重认证码 */
    twoFactorVerificationCode!: string | undefined;
    /** 在客户端记住 */
    rememberClient!: boolean | undefined;
    /** 双重认证在客户端记住 */
    twoFactorRememberClientToken!: string | undefined;
    /** 单步登陆 */
    singleSignIn!: boolean | undefined;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.loginCertificate = data["loginCertificate"];
            this.password = data["password"];
            this.twoFactorVerificationCode = data["twoFactorVerificationCode"];
            this.rememberClient = data["rememberClient"];
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginCertificate"] = this.loginCertificate;
        data["password"] = this.password;
        data["twoFactorVerificationCode"] = this.twoFactorVerificationCode;
        data["rememberClient"] = this.rememberClient;
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IAuthenticateModel {
    /** 登陆凭证(用户名/邮箱地址/手机) */
    loginCertificate: string;
    /** 密码 */
    password: string;
    /** 双重认证码 */
    twoFactorVerificationCode: string | undefined;
    /** 在客户端记住 */
    rememberClient: boolean | undefined;
    /** 双重认证在客户端记住 */
    twoFactorRememberClientToken: string | undefined;
    /** 单步登陆 */
    singleSignIn: boolean | undefined;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    /** 访问令牌 */
    accessToken!: string | undefined;
    /** 访问令牌(加密) */
    encryptedAccessToken!: string | undefined;
    /** 过期时间 */
    expireInSeconds!: number | undefined;
    /** 需要重置密码 */
    shouldResetPassword!: boolean | undefined;
    /** 密码重置码 */
    passwordResetCode!: string | undefined;
    /** 用户Id */
    userId!: number | undefined;
    /** 租户Id */
    tenantId!: number | undefined;
    /** 需要双重验证 */
    requiresTwoFactorVerification!: boolean | undefined;
    /** 双重认证供应商 */
    twoFactorAuthProviders!: string[] | undefined;
    /** 记住双重认证 Token */
    twoFactorRememberClientToken!: string | undefined;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.shouldResetPassword = data["shouldResetPassword"];
            this.passwordResetCode = data["passwordResetCode"];
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.requiresTwoFactorVerification = data["requiresTwoFactorVerification"];
            if (data["twoFactorAuthProviders"] && data["twoFactorAuthProviders"].constructor === Array) {
                this.twoFactorAuthProviders = [] as any;
                for (let item of data["twoFactorAuthProviders"])
                    this.twoFactorAuthProviders!.push(item);
            }
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["shouldResetPassword"] = this.shouldResetPassword;
        data["passwordResetCode"] = this.passwordResetCode;
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["requiresTwoFactorVerification"] = this.requiresTwoFactorVerification;
        if (this.twoFactorAuthProviders && this.twoFactorAuthProviders.constructor === Array) {
            data["twoFactorAuthProviders"] = [];
            for (let item of this.twoFactorAuthProviders)
                data["twoFactorAuthProviders"].push(item);
        }
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        return data; 
    }
}

export interface IAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string | undefined;
    /** 访问令牌(加密) */
    encryptedAccessToken: string | undefined;
    /** 过期时间 */
    expireInSeconds: number | undefined;
    /** 需要重置密码 */
    shouldResetPassword: boolean | undefined;
    /** 密码重置码 */
    passwordResetCode: string | undefined;
    /** 用户Id */
    userId: number | undefined;
    /** 租户Id */
    tenantId: number | undefined;
    /** 需要双重验证 */
    requiresTwoFactorVerification: boolean | undefined;
    /** 双重认证供应商 */
    twoFactorAuthProviders: string[] | undefined;
    /** 记住双重认证 Token */
    twoFactorRememberClientToken: string | undefined;
}

export class PhoneAuthenticateModel implements IPhoneAuthenticateModel {
    /** 手机 */
    phoneNum!: string | undefined;
    /** 登陆验证码 */
    loginCode!: string;
    /** 在客户端记住 */
    rememberClient!: boolean | undefined;

    constructor(data?: IPhoneAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phoneNum = data["phoneNum"];
            this.loginCode = data["loginCode"];
            this.rememberClient = data["rememberClient"];
        }
    }

    static fromJS(data: any): PhoneAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNum"] = this.phoneNum;
        data["loginCode"] = this.loginCode;
        data["rememberClient"] = this.rememberClient;
        return data; 
    }
}

export interface IPhoneAuthenticateModel {
    /** 手机 */
    phoneNum: string | undefined;
    /** 登陆验证码 */
    loginCode: string;
    /** 在客户端记住 */
    rememberClient: boolean | undefined;
}

export class SendTwoFactorAuthCodeModel implements ISendTwoFactorAuthCodeModel {
    /** 用户Id */
    userId!: number | undefined;
    /** 供应商（email/sms） */
    provider!: string;

    constructor(data?: ISendTwoFactorAuthCodeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.provider = data["provider"];
        }
    }

    static fromJS(data: any): SendTwoFactorAuthCodeModel {
        data = typeof data === 'object' ? data : {};
        let result = new SendTwoFactorAuthCodeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface ISendTwoFactorAuthCodeModel {
    /** 用户Id */
    userId: number | undefined;
    /** 供应商（email/sms） */
    provider: string;
}

export class ImpersonatedAuthenticateResultModel implements IImpersonatedAuthenticateResultModel {
    /** 访问令牌 */
    accessToken!: string | undefined;
    /** 访问令牌(加密) */
    encryptedAccessToken!: string | undefined;
    /** 过期时间(秒) */
    expireInSeconds!: number | undefined;

    constructor(data?: IImpersonatedAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface IImpersonatedAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string | undefined;
    /** 访问令牌(加密) */
    encryptedAccessToken: string | undefined;
    /** 过期时间(秒) */
    expireInSeconds: number | undefined;
}

/** 切换账号认证 - 结果 */
export class SwitchedAccountAuthenticateResultModel implements ISwitchedAccountAuthenticateResultModel {
    /** 访问令牌 */
    accessToken!: string | undefined;
    /** 访问令牌（加密） */
    encryptedAccessToken!: string | undefined;
    /** 过期时间（单位:秒） */
    expireInSeconds!: number | undefined;

    constructor(data?: ISwitchedAccountAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

/** 切换账号认证 - 结果 */
export interface ISwitchedAccountAuthenticateResultModel {
    /** 访问令牌 */
    accessToken: string | undefined;
    /** 访问令牌（加密） */
    encryptedAccessToken: string | undefined;
    /** 过期时间（单位:秒） */
    expireInSeconds: number | undefined;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    /** 名称 */
    name!: string | undefined;
    /** 客户端Id */
    clientId!: string | undefined;
    /** 是否在登录界面显示 */
    showOnLoginPage!: boolean | undefined;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
            this.showOnLoginPage = data["showOnLoginPage"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        data["showOnLoginPage"] = this.showOnLoginPage;
        return data; 
    }
}

export interface IExternalLoginProviderInfoModel {
    /** 名称 */
    name: string | undefined;
    /** 客户端Id */
    clientId: string | undefined;
    /** 是否在登录界面显示 */
    showOnLoginPage: boolean | undefined;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    /** 认证类型 */
    authProvider!: string;
    /** 唯一凭证(第三方 OpenId)，可空 */
    providerKey!: string | undefined;
    /** 授权码 */
    providerAccessCode!: string;
    /** 是否单步登陆 */
    singleSignIn!: boolean | undefined;
    /** 用户信息(小程序用) */
    userInfo!: ExternalAuthUserInfo | undefined;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
            this.singleSignIn = data["singleSignIn"];
            this.userInfo = data["userInfo"] ? ExternalAuthUserInfo.fromJS(data["userInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        data["singleSignIn"] = this.singleSignIn;
        data["userInfo"] = this.userInfo ? this.userInfo.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IExternalAuthenticateModel {
    /** 认证类型 */
    authProvider: string;
    /** 唯一凭证(第三方 OpenId)，可空 */
    providerKey: string | undefined;
    /** 授权码 */
    providerAccessCode: string;
    /** 是否单步登陆 */
    singleSignIn: boolean | undefined;
    /** 用户信息(小程序用) */
    userInfo: ExternalAuthUserInfo | undefined;
}

export class ExternalAuthUserInfo implements IExternalAuthUserInfo {
    /** 国家 */
    country!: string | undefined;
    /** 省份 */
    province!: string | undefined;
    /** 城市 */
    city!: string | undefined;
    /** 性别0 = Unknown ; 1 = M ; 2 = F */
    gender!: ExternalAuthUserInfoGender | undefined;
    /** 头像url */
    profilePictureUrl!: string | undefined;
    /** 外部登陆供应商 */
    provider!: string | undefined;
    /** 唯一凭证 */
    providerKey!: string | undefined;
    /** 唯一凭证(全局) */
    unionProviderKey!: string | undefined;
    /** 用户名 */
    userName!: string | undefined;
    /** 邮箱地址 */
    emailAddress!: string | undefined;
    /** 名 */
    name!: string | undefined;
    /** 姓 */
    surname!: string | undefined;

    constructor(data?: IExternalAuthUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.country = data["country"];
            this.province = data["province"];
            this.city = data["city"];
            this.gender = data["gender"];
            this.profilePictureUrl = data["profilePictureUrl"];
            this.provider = data["provider"];
            this.providerKey = data["providerKey"];
            this.unionProviderKey = data["unionProviderKey"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.name = data["name"];
            this.surname = data["surname"];
        }
    }

    static fromJS(data: any): ExternalAuthUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country;
        data["province"] = this.province;
        data["city"] = this.city;
        data["gender"] = this.gender;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["provider"] = this.provider;
        data["providerKey"] = this.providerKey;
        data["unionProviderKey"] = this.unionProviderKey;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["name"] = this.name;
        data["surname"] = this.surname;
        return data; 
    }
}

export interface IExternalAuthUserInfo {
    /** 国家 */
    country: string | undefined;
    /** 省份 */
    province: string | undefined;
    /** 城市 */
    city: string | undefined;
    /** 性别0 = Unknown ; 1 = M ; 2 = F */
    gender: ExternalAuthUserInfoGender | undefined;
    /** 头像url */
    profilePictureUrl: string | undefined;
    /** 外部登陆供应商 */
    provider: string | undefined;
    /** 唯一凭证 */
    providerKey: string | undefined;
    /** 唯一凭证(全局) */
    unionProviderKey: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 邮箱地址 */
    emailAddress: string | undefined;
    /** 名 */
    name: string | undefined;
    /** 姓 */
    surname: string | undefined;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    /** 租户Id */
    tenantId!: number | undefined;
    /** 用户Id */
    userId!: number | undefined;
    /** 访问令牌 */
    accessToken!: string | undefined;
    /** 访问令牌（加密） */
    encryptedAccessToken!: string | undefined;
    /** 过期时间（单位:秒） */
    expireInSeconds!: number | undefined;
    /** 等待激活 */
    waitingForActivation!: boolean | undefined;
    /** 需要补充注册 */
    needSupplementary!: boolean | undefined;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
            this.needSupplementary = data["needSupplementary"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        data["needSupplementary"] = this.needSupplementary;
        return data; 
    }
}

export interface IExternalAuthenticateResultModel {
    /** 租户Id */
    tenantId: number | undefined;
    /** 用户Id */
    userId: number | undefined;
    /** 访问令牌 */
    accessToken: string | undefined;
    /** 访问令牌（加密） */
    encryptedAccessToken: string | undefined;
    /** 过期时间（单位:秒） */
    expireInSeconds: number | undefined;
    /** 等待激活 */
    waitingForActivation: boolean | undefined;
    /** 需要补充注册 */
    needSupplementary: boolean | undefined;
}

export class ExternalBindingModel implements IExternalBindingModel {
    /** 认证类型 */
    authProvider!: string;
    /** 认证秘钥 */
    providerKey!: string;
    /** 认证访问码 */
    providerAccessCode!: string;

    constructor(data?: IExternalBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
        }
    }

    static fromJS(data: any): ExternalBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        return data; 
    }
}

export interface IExternalBindingModel {
    /** 认证类型 */
    authProvider: string;
    /** 认证秘钥 */
    providerKey: string;
    /** 认证访问码 */
    providerAccessCode: string;
}

export class ExternalUnBindingModel implements IExternalUnBindingModel {
    /** 认证类型 */
    authProvider!: string;

    constructor(data?: IExternalUnBindingModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
        }
    }

    static fromJS(data: any): ExternalUnBindingModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalUnBindingModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        return data; 
    }
}

export interface IExternalUnBindingModel {
    /** 认证类型 */
    authProvider: string;
}

/** 补充认证 */
export class SupplementAuthModel implements ISupplementAuthModel {
    /** 机构名称 */
    tenantName!: string | undefined;

    constructor(data?: ISupplementAuthModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantName = data["tenantName"];
        }
    }

    static fromJS(data: any): SupplementAuthModel {
        data = typeof data === 'object' ? data : {};
        let result = new SupplementAuthModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        return data; 
    }
}

/** 补充认证 */
export interface ISupplementAuthModel {
    /** 机构名称 */
    tenantName: string | undefined;
}

export class SupplementAuthResultModel implements ISupplementAuthResultModel {
    /** 能否登陆 */
    canLogin!: boolean | undefined;
    tenantId!: number | undefined;
    accessToken!: string | undefined;
    encryptedAccessToken!: string | undefined;
    expireInSeconds!: number | undefined;

    constructor(data?: ISupplementAuthResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.tenantId = data["tenantId"];
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SupplementAuthResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new SupplementAuthResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["tenantId"] = this.tenantId;
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface ISupplementAuthResultModel {
    /** 能否登陆 */
    canLogin: boolean | undefined;
    tenantId: number | undefined;
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number | undefined;
}

export class ShortAuthTokenModel implements IShortAuthTokenModel {
    shortAuthToken!: string | undefined;

    constructor(data?: IShortAuthTokenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shortAuthToken = data["shortAuthToken"];
        }
    }

    static fromJS(data: any): ShortAuthTokenModel {
        data = typeof data === 'object' ? data : {};
        let result = new ShortAuthTokenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shortAuthToken"] = this.shortAuthToken;
        return data; 
    }
}

export interface IShortAuthTokenModel {
    shortAuthToken: string | undefined;
}

export class PagedResultDtoOfUserListDto implements IPagedResultDtoOfUserListDto {
    totalCount!: number | undefined;
    items!: UserListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfUserListDto {
    totalCount: number | undefined;
    items: UserListDto[] | undefined;
}

export class UserListDto implements IUserListDto {
    /** 名称 */
    name!: string | undefined;
    /** 姓 */
    surname!: string | undefined;
    /** 用户名 */
    userName!: string | undefined;
    /** 邮箱地址 */
    emailAddress!: string | undefined;
    /** 电话号码 */
    phoneNumber!: string | undefined;
    /** 头像图片Id */
    profilePictureId!: number | undefined;
    /** 是否确认邮箱 */
    isEmailConfirmed!: boolean | undefined;
    /** 角色 */
    roles!: UserListRoleDto[] | undefined;
    /** 最后登陆时间 */
    lastLoginTime!: moment.Moment | undefined;
    /** 是否已激活 */
    isActive!: boolean | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.profilePictureId = data["profilePictureId"];
            this.isEmailConfirmed = data["isEmailConfirmed"];
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles!.push(UserListRoleDto.fromJS(item));
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["profilePictureId"] = this.profilePictureId;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserListDto {
    /** 名称 */
    name: string | undefined;
    /** 姓 */
    surname: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 邮箱地址 */
    emailAddress: string | undefined;
    /** 电话号码 */
    phoneNumber: string | undefined;
    /** 头像图片Id */
    profilePictureId: number | undefined;
    /** 是否确认邮箱 */
    isEmailConfirmed: boolean | undefined;
    /** 角色 */
    roles: UserListRoleDto[] | undefined;
    /** 最后登陆时间 */
    lastLoginTime: moment.Moment | undefined;
    /** 是否已激活 */
    isActive: boolean | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class UserListRoleDto implements IUserListRoleDto {
    /** 角色Id */
    roleId!: number | undefined;
    /** 角色名称 */
    roleName!: string | undefined;

    constructor(data?: IUserListRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
        }
    }

    static fromJS(data: any): UserListRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserListRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data; 
    }
}

export interface IUserListRoleDto {
    /** 角色Id */
    roleId: number | undefined;
    /** 角色名称 */
    roleName: string | undefined;
}

export class GetUserForEditOutput implements IGetUserForEditOutput {
    /** 头像图片Id */
    profilePictureId!: number | undefined;
    /** 用户资料 */
    user!: UserEditDto | undefined;
    /** 角色 */
    roles!: UserRoleDto[] | undefined;
    /** 权限 */
    permissions!: GetUserPermissionsForEditOutput | undefined;
    /** 第三方登陆绑定记录 */
    externalLogins!: ExternalUserLoginDto[] | undefined;

    constructor(data?: IGetUserForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : <any>undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles!.push(UserRoleDto.fromJS(item));
            }
            this.permissions = data["permissions"] ? GetUserPermissionsForEditOutput.fromJS(data["permissions"]) : <any>undefined;
            if (data["externalLogins"] && data["externalLogins"].constructor === Array) {
                this.externalLogins = [] as any;
                for (let item of data["externalLogins"])
                    this.externalLogins!.push(ExternalUserLoginDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["permissions"] = this.permissions ? this.permissions.toJSON() : <any>undefined;
        if (this.externalLogins && this.externalLogins.constructor === Array) {
            data["externalLogins"] = [];
            for (let item of this.externalLogins)
                data["externalLogins"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserForEditOutput {
    /** 头像图片Id */
    profilePictureId: number | undefined;
    /** 用户资料 */
    user: UserEditDto | undefined;
    /** 角色 */
    roles: UserRoleDto[] | undefined;
    /** 权限 */
    permissions: GetUserPermissionsForEditOutput | undefined;
    /** 第三方登陆绑定记录 */
    externalLogins: ExternalUserLoginDto[] | undefined;
}

export class UserEditDto implements IUserEditDto {
    /** 用户Id，null时为创建用户,有值时为更新用户 */
    id!: number | undefined;
    /** 名称 */
    name!: string;
    /** 姓 */
    surname!: string;
    /** 用户名 */
    userName!: string;
    /** 邮箱地址 */
    emailAddress!: string;
    /** 电话号码 */
    phoneNumber!: string | undefined;
    /** 密码
<remarks>
不要给这属性添加 Required 特性,因为 这个属性空值时表示代表不修改密码
</remarks> */
    password!: string | undefined;
    /** 激活 */
    isActive!: boolean | undefined;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin!: boolean | undefined;
    /** 启用双重验证 */
    isTwoFactorEnabled!: boolean | undefined;
    /** 是否启用用户锁定 */
    isLockoutEnabled!: boolean | undefined;

    constructor(data?: IUserEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.password = data["password"];
            this.isActive = data["isActive"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
        }
    }

    static fromJS(data: any): UserEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        data["isActive"] = this.isActive;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        return data; 
    }
}

export interface IUserEditDto {
    /** 用户Id，null时为创建用户,有值时为更新用户 */
    id: number | undefined;
    /** 名称 */
    name: string;
    /** 姓 */
    surname: string;
    /** 用户名 */
    userName: string;
    /** 邮箱地址 */
    emailAddress: string;
    /** 电话号码 */
    phoneNumber: string | undefined;
    /** 密码
<remarks>
不要给这属性添加 Required 特性,因为 这个属性空值时表示代表不修改密码
</remarks> */
    password: string | undefined;
    /** 激活 */
    isActive: boolean | undefined;
    /** 下次登录需要修改密码 */
    shouldChangePasswordOnNextLogin: boolean | undefined;
    /** 启用双重验证 */
    isTwoFactorEnabled: boolean | undefined;
    /** 是否启用用户锁定 */
    isLockoutEnabled: boolean | undefined;
}

/** 用户角色 */
export class UserRoleDto implements IUserRoleDto {
    /** 角色Id/唯一凭证 */
    roleId!: number | undefined;
    /** 角色名/系统名 */
    roleName!: string | undefined;
    /** 显示名称 */
    roleDisplayName!: string | undefined;
    /** 是否默认分配角色 */
    isAssigned!: boolean | undefined;

    constructor(data?: IUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
            this.roleDisplayName = data["roleDisplayName"];
            this.isAssigned = data["isAssigned"];
        }
    }

    static fromJS(data: any): UserRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDisplayName"] = this.roleDisplayName;
        data["isAssigned"] = this.isAssigned;
        return data; 
    }
}

/** 用户角色 */
export interface IUserRoleDto {
    /** 角色Id/唯一凭证 */
    roleId: number | undefined;
    /** 角色名/系统名 */
    roleName: string | undefined;
    /** 显示名称 */
    roleDisplayName: string | undefined;
    /** 是否默认分配角色 */
    isAssigned: boolean | undefined;
}

export class GetUserPermissionsForEditOutput implements IGetUserPermissionsForEditOutput {
    /** 现有权限 */
    permissions!: FlatPermissionDto[] | undefined;
    /** 授予权限名称 */
    grantedPermissionNames!: string[] | undefined;

    constructor(data?: IGetUserPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [] as any;
                for (let item of data["permissions"])
                    this.permissions!.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames!.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetUserPermissionsForEditOutput {
    /** 现有权限 */
    permissions: FlatPermissionDto[] | undefined;
    /** 授予权限名称 */
    grantedPermissionNames: string[] | undefined;
}

export class ExternalUserLoginDto implements IExternalUserLoginDto {
    /** 唯一凭证 */
    id!: number | undefined;
    /** 第三方登陆类型 */
    loginProvider!: string | undefined;
    /** OpenId/唯一凭证 */
    providerKey!: string | undefined;
    /** 用户名 */
    userName!: string | undefined;
    /** 第三方接口调用凭证 */
    accessToken!: string | undefined;
    /** 刷新凭证 */
    refreshToken!: string | undefined;
    /** 调用凭证过期时间 */
    accessTokenOutDataTime!: moment.Moment | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;

    constructor(data?: IExternalUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.loginProvider = data["loginProvider"];
            this.providerKey = data["providerKey"];
            this.userName = data["userName"];
            this.accessToken = data["accessToken"];
            this.refreshToken = data["refreshToken"];
            this.accessTokenOutDataTime = data["accessTokenOutDataTime"] ? moment(data["accessTokenOutDataTime"].toString()) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ExternalUserLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalUserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["loginProvider"] = this.loginProvider;
        data["providerKey"] = this.providerKey;
        data["userName"] = this.userName;
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        data["accessTokenOutDataTime"] = this.accessTokenOutDataTime ? this.accessTokenOutDataTime.toISOString() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IExternalUserLoginDto {
    /** 唯一凭证 */
    id: number | undefined;
    /** 第三方登陆类型 */
    loginProvider: string | undefined;
    /** OpenId/唯一凭证 */
    providerKey: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 第三方接口调用凭证 */
    accessToken: string | undefined;
    /** 刷新凭证 */
    refreshToken: string | undefined;
    /** 调用凭证过期时间 */
    accessTokenOutDataTime: moment.Moment | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
}

export class UpdateUserPermissionsInput implements IUpdateUserPermissionsInput {
    /** 用户Id */
    id!: number | undefined;
    /** 授予权限 */
    grantedPermissionNames!: string[];

    constructor(data?: IUpdateUserPermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.grantedPermissionNames = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IUpdateUserPermissionsInput {
    /** 用户Id */
    id: number | undefined;
    /** 授予权限 */
    grantedPermissionNames: string[];
}

export class CreateOrUpdateUserInput implements ICreateOrUpdateUserInput {
    /** 用户基本信息 */
    user!: UserEditDto;
    /** 分配角色名称 */
    assignedRoleNames!: string[];
    /** 授予权限 */
    grantedPermissionNames!: string[] | undefined;
    /** 发送激活邮件 */
    sendActivationEmail!: boolean | undefined;
    /** 设置随机密码 */
    setRandomPassword!: boolean | undefined;

    constructor(data?: ICreateOrUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new UserEditDto();
            this.assignedRoleNames = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : new UserEditDto();
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [] as any;
                for (let item of data["assignedRoleNames"])
                    this.assignedRoleNames!.push(item);
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames!.push(item);
            }
            this.sendActivationEmail = data["sendActivationEmail"];
            this.setRandomPassword = data["setRandomPassword"];
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["setRandomPassword"] = this.setRandomPassword;
        return data; 
    }
}

export interface ICreateOrUpdateUserInput {
    /** 用户基本信息 */
    user: UserEditDto;
    /** 分配角色名称 */
    assignedRoleNames: string[];
    /** 授予权限 */
    grantedPermissionNames: string[] | undefined;
    /** 发送激活邮件 */
    sendActivationEmail: boolean | undefined;
    /** 设置随机密码 */
    setRandomPassword: boolean | undefined;
}

export class LinkToUserInput implements ILinkToUserInput {
    /** 租户名称 */
    tenancyName!: string | undefined;
    /** 用户名或邮箱地址 */
    usernameOrEmailAddress!: string;
    /** 密码 */
    password!: string;

    constructor(data?: ILinkToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LinkToUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new LinkToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILinkToUserInput {
    /** 租户名称 */
    tenancyName: string | undefined;
    /** 用户名或邮箱地址 */
    usernameOrEmailAddress: string;
    /** 密码 */
    password: string;
}

export class PagedResultDtoOfLinkedUserDto implements IPagedResultDtoOfLinkedUserDto {
    totalCount!: number | undefined;
    items!: LinkedUserDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLinkedUserDto {
    totalCount: number | undefined;
    items: LinkedUserDto[] | undefined;
}

/** 关联账号 */
export class LinkedUserDto implements ILinkedUserDto {
    tenantId!: number | undefined;
    tenancyName!: string | undefined;
    username!: string | undefined;
    lastLoginTime!: moment.Moment | undefined;
    id!: number | undefined;

    constructor(data?: ILinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.username = data["username"];
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): LinkedUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["username"] = this.username;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

/** 关联账号 */
export interface ILinkedUserDto {
    tenantId: number | undefined;
    tenancyName: string | undefined;
    username: string | undefined;
    lastLoginTime: moment.Moment | undefined;
    id: number | undefined;
}

export class ListResultDtoOfLinkedUserDto implements IListResultDtoOfLinkedUserDto {
    items!: LinkedUserDto[] | undefined;

    constructor(data?: IListResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[] | undefined;
}

export class UnlinkUserInput implements IUnlinkUserInput {
    /** 租户Id(可空) */
    tenantId!: number | undefined;
    /** 用户Id */
    userId!: number | undefined;

    constructor(data?: IUnlinkUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new UnlinkUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IUnlinkUserInput {
    /** 租户Id(可空) */
    tenantId: number | undefined;
    /** 用户Id */
    userId: number | undefined;
}

export class ListResultDtoOfUserLoginAttemptDto implements IListResultDtoOfUserLoginAttemptDto {
    items!: UserLoginAttemptDto[] | undefined;

    constructor(data?: IListResultDtoOfUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[] | undefined;
}

/** 用户登陆尝试 */
export class UserLoginAttemptDto implements IUserLoginAttemptDto {
    /** 租户名称 */
    tenancyName!: string | undefined;
    /** 用户名或邮箱 */
    userNameOrEmail!: string | undefined;
    /** 客户端Ip地址 */
    clientIpAddress!: string | undefined;
    /** 客户端名称 */
    clientName!: string | undefined;
    /** 浏览器信息 */
    browserInfo!: string | undefined;
    /** 结果 */
    result!: string | undefined;
    /** 创建时间 */
    creationTime!: moment.Moment | undefined;

    constructor(data?: IUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userNameOrEmail = data["userNameOrEmail"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.result = data["result"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmail"] = this.userNameOrEmail;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

/** 用户登陆尝试 */
export interface IUserLoginAttemptDto {
    /** 租户名称 */
    tenancyName: string | undefined;
    /** 用户名或邮箱 */
    userNameOrEmail: string | undefined;
    /** 客户端Ip地址 */
    clientIpAddress: string | undefined;
    /** 客户端名称 */
    clientName: string | undefined;
    /** 浏览器信息 */
    browserInfo: string | undefined;
    /** 结果 */
    result: string | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
}

export class GetLatestWebLogsOutput implements IGetLatestWebLogsOutput {
    latestWebLogLines!: string[] | undefined;

    constructor(data?: IGetLatestWebLogsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["latestWebLogLines"] && data["latestWebLogLines"].constructor === Array) {
                this.latestWebLogLines = [] as any;
                for (let item of data["latestWebLogLines"])
                    this.latestWebLogLines!.push(item);
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLatestWebLogsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.latestWebLogLines && this.latestWebLogLines.constructor === Array) {
            data["latestWebLogLines"] = [];
            for (let item of this.latestWebLogLines)
                data["latestWebLogLines"].push(item);
        }
        return data; 
    }
}

export interface IGetLatestWebLogsOutput {
    latestWebLogLines: string[] | undefined;
}

export class GetJsApiSignatureOutput implements IGetJsApiSignatureOutput {
    /** 公众号 AppId */
    appId!: string | undefined;
    /** 签名 */
    signature!: string | undefined;

    constructor(data?: IGetJsApiSignatureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.appId = data["appId"];
            this.signature = data["signature"];
        }
    }

    static fromJS(data: any): GetJsApiSignatureOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetJsApiSignatureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["signature"] = this.signature;
        return data; 
    }
}

export interface IGetJsApiSignatureOutput {
    /** 公众号 AppId */
    appId: string | undefined;
    /** 签名 */
    signature: string | undefined;
}

export enum AdvertChannels {
    _20 = 20, 
    _40 = 40, 
}

export enum AdvertChannels2 {
    _20 = 20, 
    _40 = 40, 
}

export enum IncomeStatisticsDateInterval {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum IncomeStatisticsDateInterval2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum DateInterval {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

/** 通知状态（可空） */
export enum State {
    _0 = 0, 
    _1 = 1, 
}

export enum OrderStatuses {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum PaymentStatuses {
    _10 = 10, 
    _30 = 30, 
    _35 = 35, 
    _40 = 40, 
}

export enum ShippingStatuses {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum OrderTypes {
    _1 = 1, 
    _2 = 2, 
}

export enum OrderSources {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum OrderTypes2 {
    _1 = 1, 
    _2 = 2, 
}

export enum OrderSources2 {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum Sources {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

/** 空(全部) */
export enum Status {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum Sources2 {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

/** 渠道来源(空-获取所有) */
export enum Source {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum SalesSummaryDatePeriod {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum SalesSummaryDatePeriod2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

/** 默认时区有效范围 */
export enum DefaultTimezoneScope {
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
    _7 = 7, 
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RegisterInputType {
    _1 = 1, 
    _2 = 2, 
}

export enum SendEmailVerificationCodeInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
    _80 = 80, 
}

export enum CheckEmailCodeInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
    _80 = 80, 
}

export enum GetAdvertAccountForEditOutputChannel {
    _20 = 20, 
    _40 = 40, 
}

export enum CreateOrUpdateAdvertAccountInputChannel {
    _20 = 20, 
    _40 = 40, 
}

export enum EntityChangeListDtoChangeType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export class AdditionalData implements IAdditionalData {
    weChat!: { [key: string] : string; } | undefined;
    alipay!: { [key: string] : string; } | undefined;

    constructor(data?: IAdditionalData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["WeChat"]) {
                this.weChat = {} as any;
                for (let key in data["WeChat"]) {
                    if (data["WeChat"].hasOwnProperty(key))
                        this.weChat![key] = data["WeChat"][key];
                }
            }
            if (data["Alipay"]) {
                this.alipay = {} as any;
                for (let key in data["Alipay"]) {
                    if (data["Alipay"].hasOwnProperty(key))
                        this.alipay![key] = data["Alipay"][key];
                }
            }
        }
    }

    static fromJS(data: any): AdditionalData {
        data = typeof data === 'object' ? data : {};
        let result = new AdditionalData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.weChat) {
            data["WeChat"] = {};
            for (let key in this.weChat) {
                if (this.weChat.hasOwnProperty(key))
                    data["WeChat"][key] = this.weChat[key];
            }
        }
        if (this.alipay) {
            data["Alipay"] = {};
            for (let key in this.alipay) {
                if (this.alipay.hasOwnProperty(key))
                    data["Alipay"][key] = this.alipay[key];
            }
        }
        return data; 
    }
}

export interface IAdditionalData {
    weChat: { [key: string] : string; } | undefined;
    alipay: { [key: string] : string; } | undefined;
}

export enum UserNotificationState {
    _0 = 0, 
    _1 = 1, 
}

export enum TenantNotificationSeverity {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum OrderListDtoOrderStatus {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum OrderListDtoPaymentStatus {
    _10 = 10, 
    _30 = 30, 
    _35 = 35, 
    _40 = 40, 
}

export enum OrderListDtoShippingStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum OrderListDtoOrderType {
    _1 = 1, 
    _2 = 2, 
}

export enum OrderListDtoOrderSource {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum OrderDetailDtoOrderStatus {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum OrderDetailDtoPaymentStatus {
    _10 = 10, 
    _30 = 30, 
    _35 = 35, 
    _40 = 40, 
}

export enum OrderDetailDtoShippingStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum OrderDetailDtoOrderType {
    _1 = 1, 
    _2 = 2, 
}

export enum OrderDetailDtoOrderSource {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum GetOrderForEditOutputOrderStatus {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum GetOrderForEditOutputPaymentStatus {
    _10 = 10, 
    _30 = 30, 
    _35 = 35, 
    _40 = 40, 
}

export enum GetOrderForEditOutputShippingStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum GetOrderForEditOutputOrderType {
    _1 = 1, 
    _2 = 2, 
}

export enum GetOrderForEditOutputOrderSource {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum CreateOrUpdateOrderInputOrderStatus {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum CreateOrUpdateOrderInputPaymentStatus {
    _10 = 10, 
    _30 = 30, 
    _35 = 35, 
    _40 = 40, 
}

export enum CreateOrUpdateOrderInputShippingStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum CreateOrUpdateOrderInputOrderType {
    _1 = 1, 
    _2 = 2, 
}

export enum CreateOrUpdateOrderInputOrderSource {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum Ids {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum ChangeOrderStatusInputOfOrderStatusStauts {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
}

export enum Ids2 {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum ChangeOrderStatusInputOfShippingStatusStauts {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum Ids3 {
    _10 = 10, 
    _30 = 30, 
    _35 = 35, 
    _40 = 40, 
}

export enum ChangeOrderStatusInputOfPaymentStatusStauts {
    _10 = 10, 
    _30 = 30, 
    _35 = 35, 
    _40 = 40, 
}

export enum CreatePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum CreatePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _90 = 90, 
    _365 = 365, 
}

export enum CreatePaymentDtoSubscriptionPaymentGatewayType {
    _1 = 1, 
    _2 = 2, 
}

export enum CancelPaymentDtoGateway {
    _1 = 1, 
    _2 = 2, 
}

export enum CurrentUserProfileEditDtoGender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum ShipmentListDtoStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum ShipmentDtoStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum GetShipmentForEditOutputStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum CreateOrUpdateShipmentInputStatus {
    _100 = 100, 
    _200 = 200, 
    _250 = 250, 
    _300 = 300, 
    _302 = 302, 
    _303 = 303, 
    _304 = 304, 
    _305 = 305, 
    _306 = 306, 
    _400 = 400, 
    _404 = 404, 
    _500 = 500, 
    _600 = 600, 
}

export enum UserCodeSendInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
    _80 = 80, 
}

export enum CodeSendInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
    _80 = 80, 
}

export enum CheckUserCodeInputCodeType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
    _60 = 60, 
    _70 = 70, 
    _80 = 80, 
}

export enum StoreListDtoOrderSourceType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum GetStoreForEditOutputOrderSourceType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum CreateOrUpdateStoreInputOrderSourceType {
    _10 = 10, 
    _20 = 20, 
    _30 = 30, 
    _40 = 40, 
    _50 = 50, 
}

export enum RegisterTenantInputType {
    _1 = 1, 
    _2 = 2, 
}

export enum ExternalAuthUserInfoGender {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}